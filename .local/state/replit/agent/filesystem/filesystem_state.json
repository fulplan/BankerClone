{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Replit.md\n\n## Overview\n\nThis is a full-stack banking application built with Express.js, React, and PostgreSQL. The application provides a complete banking system with user authentication, account management, money transfers, and administrative controls. It features a modern UI built with shadcn/ui components and implements proper security measures for financial transactions.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Updates\n\n### Mobile Responsiveness (Latest Update)\nThe application has been completely optimized for mobile devices with:\n- **Responsive Navigation**: Hamburger menus for both main and customer navigation\n- **Adaptive Layouts**: Customer dashboard tabs now display properly on mobile (2-5 columns instead of cramped 10)\n- **Mobile-First Typography**: Responsive text sizing that scales appropriately across devices\n- **Touch-Friendly Interface**: Properly sized touch targets and improved button spacing\n- **Optimized Forms**: Account cards and forms redesigned for mobile readability\n- **Enhanced Landing Page**: Hero sections and service icons optimized for mobile viewing\n\n### Authentication & Login System\n- Admin login: admin@admin.com / admin123\n- Customer login system working with proper session management\n- Role-based access control functioning correctly\n- Fixed redirect loops and session persistence issues\n\n### Banking Features Status\nAll core banking features are functional:\n- Account management with real-time balance updates\n- Money transfer system with approval workflow\n- Transaction history and detailed analytics\n- Bill payment functionality\n- Card management system\n- Investment dashboard with charts\n- Customer support system with chat\n- Administrative controls and user management\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript and Vite for build tooling\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom Santander brand colors and design system\n- **Routing**: Wouter for client-side routing with role-based access control\n- **State Management**: TanStack Query for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation\n\nThe frontend follows a component-based architecture with clear separation between customer and admin interfaces. The application uses a mobile-first responsive design that provides optimal user experience across all devices, with special attention to mobile banking users who represent the majority of our user base.\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for type safety\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: Replit Auth with OpenID Connect integration\n- **Session Management**: PostgreSQL-backed sessions with connect-pg-simple\n- **Email Service**: Resend API integration for notifications\n\nThe backend implements a RESTful API structure with proper error handling, request logging, and middleware for authentication and authorization.\n\n### Database Design\n- **Primary Database**: PostgreSQL (Neon serverless)\n- **Schema Management**: Drizzle migrations with schema defined in shared TypeScript files\n- **Key Tables**:\n  - Users with role-based access (admin/customer)\n  - Accounts with status management (active/frozen/closed)\n  - Transfers with approval workflow and status tracking\n  - Transactions for detailed financial history\n  - Audit logs for compliance and security tracking\n  - Email notifications for communication history\n\nThe database schema enforces referential integrity and includes proper indexing for performance.\n\n### Authentication & Authorization\n- **Provider**: Replit Auth (OpenID Connect)\n- **Session Storage**: PostgreSQL with automatic cleanup\n- **Authorization**: Role-based access control (admin vs customer)\n- **Security**: HTTPS enforcement, secure cookies, CSRF protection\n\n### Business Logic\n- **Transfer Workflow**: Multi-step approval process with admin oversight\n- **Account Management**: Creation, status updates, balance tracking\n- **Audit Trail**: Comprehensive logging of all financial operations\n- **Email Notifications**: Automated alerts for important events\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon PostgreSQL serverless database\n- **Authentication**: Replit Auth service for user management\n- **Email Service**: Resend API for transactional emails\n- **Session Storage**: PostgreSQL-based session management\n\n### Development Tools\n- **Build System**: Vite for fast development and optimized production builds\n- **Type Safety**: TypeScript across the entire stack\n- **Database Migrations**: Drizzle Kit for schema management\n- **UI Components**: Radix UI primitives with shadcn/ui styling\n\n### Third-Party Libraries\n- **Frontend**: React Query for data fetching, Wouter for routing, React Hook Form for forms\n- **Backend**: Express.js web framework, Passport.js for authentication middleware\n- **Database**: Drizzle ORM with Neon driver\n- **Styling**: Tailwind CSS with custom design tokens\n\nThe application is designed to be deployed on Replit with minimal configuration, leveraging Replit's built-in authentication and database provisioning.","size_bytes":5298},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        // Finora brand colors\n        \"finora-primary\": \"#1E3A8A\",\n        \"finora-secondary\": \"#0F766E\",\n        \"finora-accent\": \"#0EA5E9\",\n        \"finora-light\": \"#EFF6FF\",\n        \"finora-dark\": \"#1E293B\",\n        // Additional semantic colors\n        \"gray-50\": \"#F8F9FA\",\n        \"gray-900\": \"#111827\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          \"0%\": {\n            opacity: \"0\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n          },\n        },\n        \"slide-up\": {\n          \"0%\": {\n            transform: \"translateY(10px)\",\n            opacity: \"0\",\n          },\n          \"100%\": {\n            transform: \"translateY(0)\",\n            opacity: \"1\",\n          },\n        },\n        \"pulse-slow\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \".8\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-in-out\",\n        \"slide-up\": \"slide-up 0.3s ease-out\",\n        \"pulse-slow\": \"pulse-slow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n      },\n      spacing: {\n        \"18\": \"4.5rem\",\n        \"88\": \"22rem\",\n        \"128\": \"32rem\",\n      },\n      maxWidth: {\n        \"8xl\": \"88rem\",\n        \"9xl\": \"96rem\",\n      },\n      zIndex: {\n        \"60\": \"60\",\n        \"70\": \"70\",\n        \"80\": \"80\",\n        \"90\": \"90\",\n        \"100\": \"100\",\n      },\n      backdropBlur: {\n        xs: \"2px\",\n      },\n      fontSize: {\n        \"2xs\": [\"0.625rem\", { lineHeight: \"0.75rem\" }],\n      },\n      screens: {\n        \"3xl\": \"1920px\",\n      },\n      boxShadow: {\n        \"inner-lg\": \"inset 0 10px 15px -3px rgba(0, 0, 0, 0.1), inset 0 4px 6px -2px rgba(0, 0, 0, 0.05)\",\n        \"glow\": \"0 0 20px rgba(236, 0, 0, 0.3)\",\n      },\n      backgroundImage: {\n        \"gradient-radial\": \"radial-gradient(var(--tw-gradient-stops))\",\n        \"gradient-conic\": \"conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))\",\n      },\n      transitionProperty: {\n        \"width\": \"width\",\n        \"spacing\": \"margin, padding\",\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"), \n    require(\"@tailwindcss/typography\"),\n    // Custom plugin for Finora-specific utilities\n    function({ addUtilities }: { addUtilities: any }) {\n      const newUtilities = {\n        '.text-balance': {\n          'text-wrap': 'balance',\n        },\n        '.bg-glass': {\n          'background': 'rgba(255, 255, 255, 0.1)',\n          'backdrop-filter': 'blur(10px)',\n          'border': '1px solid rgba(255, 255, 255, 0.2)',\n        },\n        '.bg-glass-dark': {\n          'background': 'rgba(0, 0, 0, 0.1)',\n          'backdrop-filter': 'blur(10px)',\n          'border': '1px solid rgba(0, 0, 0, 0.2)',\n        },\n        '.finora-gradient': {\n          'background': 'linear-gradient(135deg, #1E3A8A 0%, #0F766E 100%)',\n        },\n        '.finora-shadow': {\n          'box-shadow': '0 4px 14px 0 rgba(30, 58, 138, 0.15)',\n        },\n      }\n      addUtilities(newUtilities)\n    }\n  ],\n} satisfies Config;\n","size_bytes":5214},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import bcrypt from \"bcryptjs\";\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\nimport { loginSchema } from \"@shared/schema\";\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || 'fallback-secret-for-development-only-' + Math.random().toString(36),\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    rolling: true, // Reset session expiry on activity\n    cookie: {\n      httpOnly: true,\n      secure: false, // Disable for development\n      maxAge: sessionTtl,\n      sameSite: 'lax',\n    },\n    name: 'connect.sid',\n  });\n}\n\n// Hash password helper\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 12;\n  return await bcrypt.hash(password, saltRounds);\n}\n\n// Verify password helper\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return await bcrypt.compare(password, hashedPassword);\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Configure local strategy\n  passport.use(new LocalStrategy(\n    {\n      usernameField: 'email',\n      passwordField: 'password'\n    },\n    async (email, password, done) => {\n      try {\n        const user = await storage.getUserByEmail(email);\n        \n        if (!user || !user.password) {\n          return done(null, false, { message: 'Invalid email or password' });\n        }\n\n        const isValidPassword = await verifyPassword(password, user.password);\n        \n        if (!isValidPassword) {\n          return done(null, false, { message: 'Invalid email or password' });\n        }\n\n        // Remove password from user object before returning\n        const { password: _, ...userWithoutPassword } = user;\n        return done(null, userWithoutPassword);\n      } catch (error) {\n        return done(error);\n      }\n    }\n  ));\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      if (user) {\n        const { password: _, ...userWithoutPassword } = user;\n        done(null, userWithoutPassword);\n      } else {\n        done(null, false);\n      }\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Login route\n  app.post(\"/api/login\", (req, res, next) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      passport.authenticate('local', (err: any, user: any, info: any) => {\n        if (err) {\n          return res.status(500).json({ message: \"Internal server error\" });\n        }\n        if (!user) {\n          return res.status(401).json({ message: info?.message || \"Invalid credentials\" });\n        }\n        \n        req.logIn(user, (err) => {\n          if (err) {\n            return res.status(500).json({ message: \"Login failed\" });\n          }\n          // Ensure session is saved before responding\n          req.session.save((err) => {\n            if (err) {\n              return res.status(500).json({ message: \"Session save failed\" });\n            }\n            return res.json({ message: \"Login successful\", user });\n          });\n        });\n      })(req, res, next);\n    } catch (error) {\n      return res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  // Logout route\n  app.post(\"/api/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      req.session.destroy((err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Session destruction failed\" });\n        }\n        res.clearCookie('connect.sid');\n        res.json({ message: \"Logout successful\" });\n      });\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Unauthorized\" });\n};","size_bytes":4506},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/emailService.ts":{"content":"import { storage } from \"./storage\";\nimport type { InsertEmailNotification } from \"@shared/schema\";\nimport { Resend } from 'resend';\n\ninterface EmailOptions {\n  to: string;\n  subject: string;\n  html: string;\n  userId?: string;\n  templateData?: Record<string, any>;\n}\n\ninterface EmailConfiguration {\n  id: string;\n  configName: string;\n  resendApiKey: string;\n  senderEmail: string;\n  senderName: string;\n  isActive: boolean;\n}\n\nexport class EmailService {\n  private apiKey: string;\n  private baseUrl = 'https://api.resend.com';\n  private resend: Resend | null = null;\n  private activeConfig: EmailConfiguration | null = null;\n\n  constructor() {\n    this.apiKey = process.env.RESEND_API_KEY || process.env.EMAIL_API_KEY || '';\n    if (this.apiKey) {\n      this.resend = new Resend(this.apiKey);\n    }\n    this.loadActiveConfiguration();\n  }\n\n  private async loadActiveConfiguration() {\n    try {\n      this.activeConfig = await storage.getActiveEmailConfiguration();\n      if (this.activeConfig && this.activeConfig.resendApiKey) {\n        this.resend = new Resend(this.activeConfig.resendApiKey);\n        this.apiKey = this.activeConfig.resendApiKey;\n      }\n    } catch (error) {\n      console.warn('Failed to load email configuration:', error);\n    }\n  }\n\n  // Reload configuration when needed (for testing purposes)\n  async reloadConfiguration() {\n    await this.loadActiveConfiguration();\n  }\n\n  private async getEmailConfig(): Promise<EmailConfiguration | null> {\n    if (!this.activeConfig) {\n      await this.loadActiveConfiguration();\n    }\n    return this.activeConfig;\n  }\n\n  private processTemplate(content: string, data: Record<string, any>): string {\n    let processedContent = content;\n    \n    Object.keys(data).forEach(key => {\n      const value = data[key] || '';\n      processedContent = processedContent.replace(new RegExp(`{{${key}}}`, 'g'), value);\n    });\n    \n    return processedContent;\n  }\n\n  async sendEmail(options: EmailOptions): Promise<boolean> {\n    try {\n      const config = await this.getEmailConfig();\n      \n      // Process template data if provided\n      let processedHtml = options.html;\n      let processedSubject = options.subject;\n      \n      if (options.templateData) {\n        processedHtml = this.processTemplate(options.html, options.templateData);\n        processedSubject = this.processTemplate(options.subject, options.templateData);\n      }\n\n      // Log email notification to database\n      if (options.userId) {\n        await storage.createEmailNotification({\n          userId: options.userId,\n          subject: processedSubject,\n          body: processedHtml,\n          status: (this.apiKey || (config && config.resendApiKey)) ? 'sent' : 'not_configured',\n        });\n      }\n\n      // If no API key or configuration, just log and return success\n      if (!this.apiKey && (!config || !config.resendApiKey)) {\n        console.log(`Email would be sent to ${options.to}: ${processedSubject}`);\n        return true;\n      }\n\n      // Use configuration or fallback\n      const fromEmail = config ? `${config.senderName} <${config.senderEmail}>` : 'Santander Bank <noreply@santanderbank.com>';\n      const apiKey = config?.resendApiKey || this.apiKey;\n\n      if (this.resend) {\n        // Use Resend SDK\n        const result = await this.resend.emails.send({\n          from: fromEmail,\n          to: [options.to],\n          subject: processedSubject,\n          html: processedHtml,\n        });\n\n        if (result.error) {\n          throw new Error(`Resend API error: ${result.error.message || JSON.stringify(result.error)}`);\n        }\n      } else {\n        // Fallback to direct API call\n        const response = await fetch(`${this.baseUrl}/emails`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            from: fromEmail,\n            to: [options.to],\n            subject: processedSubject,\n            html: processedHtml,\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to send email: ${response.statusText}`);\n        }\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to send email:', error);\n      \n      // Update email notification status to failed\n      if (options.userId) {\n        await storage.createEmailNotification({\n          userId: options.userId,\n          subject: options.subject,\n          body: options.html,\n          status: 'failed',\n        });\n      }\n      \n      return false;\n    }\n  }\n\n  async sendTemplatedEmail(\n    templateId: string,\n    to: string,\n    userId: string,\n    templateData: Record<string, any>\n  ): Promise<boolean> {\n    try {\n      const template = await storage.getEmailTemplateById(templateId);\n      if (!template) {\n        throw new Error('Email template not found');\n      }\n\n      return await this.sendEmail({\n        to,\n        subject: template.subject,\n        html: template.htmlContent,\n        userId,\n        templateData,\n      });\n    } catch (error) {\n      console.error('Failed to send templated email:', error);\n      return false;\n    }\n  }\n\n  async sendTransferNotification(\n    userEmail: string,\n    userId: string,\n    transferAmount: string,\n    transferStatus: string,\n    transferId: string,\n    rejectionReason?: string\n  ): Promise<boolean> {\n    const templateData = {\n      transferAmount,\n      transferStatus: transferStatus.charAt(0).toUpperCase() + transferStatus.slice(1),\n      transferId,\n      rejectionReason: rejectionReason || '',\n      customerName: userEmail.split('@')[0], // Simple fallback\n    };\n\n    // Try to find a transfer notification template first\n    try {\n      const templates = await storage.getEmailTemplates();\n      const transferTemplate = templates.find(t => \n        t.templateType === 'transfer_notification' || \n        t.templateType === 'transfer_' + transferStatus\n      );\n\n      if (transferTemplate && transferTemplate.isActive) {\n        return await this.sendTemplatedEmail(transferTemplate.id, userEmail, userId, templateData);\n      }\n    } catch (error) {\n      console.warn('Failed to load transfer template, using default:', error);\n    }\n\n    // Fallback to default template\n    const subject = `Transfer ${transferStatus.charAt(0).toUpperCase() + transferStatus.slice(1)} - $${transferAmount}`;\n    \n    let html = `\n      <div style=\"font-family: Inter, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"background-color: #EC0000; color: white; padding: 20px; border-radius: 8px 8px 0 0;\">\n          <h1 style=\"margin: 0; font-size: 24px;\">Santander Bank</h1>\n        </div>\n        \n        <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 0 0 8px 8px;\">\n          <h2 style=\"color: #111827; margin: 0 0 20px 0;\">Transfer Update</h2>\n          \n          <p style=\"color: #374151; margin: 0 0 15px 0;\">\n            Your transfer of <strong>$${transferAmount}</strong> is now <strong>${transferStatus}</strong>.\n          </p>\n          \n          <div style=\"background-color: white; padding: 15px; border-radius: 6px; margin: 20px 0;\">\n            <p style=\"margin: 0; color: #6b7280;\"><strong>Transfer ID:</strong> ${transferId}</p>\n            <p style=\"margin: 5px 0 0 0; color: #6b7280;\"><strong>Status:</strong> ${transferStatus}</p>\n            ${rejectionReason ? `<p style=\"margin: 5px 0 0 0; color: #dc2626;\"><strong>Reason:</strong> ${rejectionReason}</p>` : ''}\n          </div>\n          \n          <p style=\"color: #374151; margin: 20px 0 0 0;\">\n            ${transferStatus === 'rejected' || transferStatus === 'failed' \n              ? 'If you have any questions, please contact customer service at 1-877-768-2265.' \n              : 'Thank you for banking with Santander.'}\n          </p>\n        </div>\n      </div>\n    `;\n\n    return await this.sendEmail({\n      to: userEmail,\n      subject,\n      html,\n      userId,\n      templateData,\n    });\n  }\n\n  async sendAccountStatusNotification(\n    userEmail: string,\n    userId: string,\n    accountNumber: string,\n    newStatus: string,\n    reason?: string\n  ): Promise<boolean> {\n    const templateData = {\n      accountNumber,\n      newStatus: newStatus.charAt(0).toUpperCase() + newStatus.slice(1),\n      reason: reason || '',\n      customerName: userEmail.split('@')[0],\n    };\n\n    // Try to find an account status template first\n    try {\n      const templates = await storage.getEmailTemplates();\n      const statusTemplate = templates.find(t => \n        t.templateType === 'account_status' || \n        t.templateType === 'account_' + newStatus\n      );\n\n      if (statusTemplate && statusTemplate.isActive) {\n        return await this.sendTemplatedEmail(statusTemplate.id, userEmail, userId, templateData);\n      }\n    } catch (error) {\n      console.warn('Failed to load account status template, using default:', error);\n    }\n\n    // Fallback to default template\n    const subject = `Account Status Update - ${accountNumber}`;\n    \n    const html = `\n      <div style=\"font-family: Inter, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"background-color: #EC0000; color: white; padding: 20px; border-radius: 8px 8px 0 0;\">\n          <h1 style=\"margin: 0; font-size: 24px;\">Santander Bank</h1>\n        </div>\n        \n        <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 0 0 8px 8px;\">\n          <h2 style=\"color: #111827; margin: 0 0 20px 0;\">Account Status Update</h2>\n          \n          <p style=\"color: #374151; margin: 0 0 15px 0;\">\n            The status of your account <strong>${accountNumber}</strong> has been updated to <strong>${newStatus}</strong>.\n          </p>\n          \n          ${reason ? `\n            <div style=\"background-color: ${newStatus === 'frozen' ? '#fef2f2' : 'white'}; padding: 15px; border-radius: 6px; margin: 20px 0; border-left: 4px solid ${newStatus === 'frozen' ? '#dc2626' : '#059669'};\">\n              <p style=\"margin: 0; color: #6b7280;\"><strong>Reason:</strong> ${reason}</p>\n            </div>\n          ` : ''}\n          \n          <p style=\"color: #374151; margin: 20px 0 0 0;\">\n            ${newStatus === 'frozen' \n              ? 'Your account has been temporarily frozen for your security. Please contact customer service immediately at 1-877-768-2265 to resolve this issue.'\n              : newStatus === 'closed'\n              ? 'Your account has been closed. If you have any questions about this action, please contact customer service at 1-877-768-2265.'\n              : 'If you have any questions, please contact customer service at 1-877-768-2265.'}\n          </p>\n        </div>\n      </div>\n    `;\n\n    return await this.sendEmail({\n      to: userEmail,\n      subject,\n      html,\n      userId,\n      templateData,\n    });\n  }\n\n  async sendSecurityAlertNotification(\n    userEmail: string,\n    userId: string,\n    alertType: string,\n    details: string\n  ): Promise<boolean> {\n    const templateData = {\n      alertType: alertType.charAt(0).toUpperCase() + alertType.slice(1),\n      details,\n      customerName: userEmail.split('@')[0],\n      timestamp: new Date().toLocaleString(),\n    };\n\n    // Try to find a security alert template\n    try {\n      const templates = await storage.getEmailTemplates();\n      const securityTemplate = templates.find(t => \n        t.templateType === 'security_alert' || t.templateType === 'fraud_alert'\n      );\n\n      if (securityTemplate && securityTemplate.isActive) {\n        return await this.sendTemplatedEmail(securityTemplate.id, userEmail, userId, templateData);\n      }\n    } catch (error) {\n      console.warn('Failed to load security alert template, using default:', error);\n    }\n\n    // Fallback to default template\n    const subject = `Security Alert - ${alertType}`;\n    \n    const html = `\n      <div style=\"font-family: Inter, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"background-color: #dc2626; color: white; padding: 20px; border-radius: 8px 8px 0 0;\">\n          <h1 style=\"margin: 0; font-size: 24px;\">⚠️ Santander Bank Security Alert</h1>\n        </div>\n        \n        <div style=\"background-color: #fef2f2; padding: 20px; border-radius: 0 0 8px 8px; border: 1px solid #fecaca;\">\n          <h2 style=\"color: #dc2626; margin: 0 0 20px 0;\">Security Alert: ${alertType}</h2>\n          \n          <p style=\"color: #374151; margin: 0 0 15px 0;\">\n            <strong>We've detected unusual activity on your account.</strong>\n          </p>\n          \n          <div style=\"background-color: white; padding: 15px; border-radius: 6px; margin: 20px 0; border-left: 4px solid #dc2626;\">\n            <p style=\"margin: 0; color: #6b7280;\"><strong>Alert Details:</strong> ${details}</p>\n            <p style=\"margin: 5px 0 0 0; color: #6b7280;\"><strong>Time:</strong> ${new Date().toLocaleString()}</p>\n          </div>\n          \n          <div style=\"background-color: #dcfdf7; padding: 15px; border-radius: 6px; margin: 20px 0; border-left: 4px solid #059669;\">\n            <p style=\"margin: 0; color: #065f46; font-weight: bold;\">What to do:</p>\n            <ul style=\"color: #065f46; margin: 10px 0 0 20px;\">\n              <li>Review your recent account activity</li>\n              <li>Contact us immediately if you notice unauthorized transactions</li>\n              <li>Consider changing your password and security questions</li>\n            </ul>\n          </div>\n          \n          <p style=\"color: #374151; margin: 20px 0 0 0;\">\n            <strong>Contact us immediately at 1-877-768-2265 if you did not authorize this activity.</strong>\n          </p>\n        </div>\n      </div>\n    `;\n\n    return await this.sendEmail({\n      to: userEmail,\n      subject,\n      html,\n      userId,\n      templateData,\n    });\n  }\n\n  async sendBalanceChangeNotification(\n    userEmail: string,\n    userId: string,\n    accountNumber: string,\n    changeType: 'credit' | 'debit',\n    amount: string,\n    newBalance: string,\n    description: string\n  ): Promise<boolean> {\n    const subject = `Account ${changeType === 'credit' ? 'Credit' : 'Debit'} - $${amount}`;\n    \n    const html = `\n      <div style=\"font-family: Inter, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"background-color: #EC0000; color: white; padding: 20px; border-radius: 8px 8px 0 0;\">\n          <h1 style=\"margin: 0; font-size: 24px;\">Santander Bank</h1>\n        </div>\n        \n        <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 0 0 8px 8px;\">\n          <h2 style=\"color: #111827; margin: 0 0 20px 0;\">Account Activity</h2>\n          \n          <p style=\"color: #374151; margin: 0 0 15px 0;\">\n            A ${changeType} of <strong>$${amount}</strong> has been applied to your account.\n          </p>\n          \n          <div style=\"background-color: white; padding: 15px; border-radius: 6px; margin: 20px 0;\">\n            <p style=\"margin: 0; color: #6b7280;\"><strong>Account:</strong> ${accountNumber}</p>\n            <p style=\"margin: 5px 0; color: #6b7280;\"><strong>Amount:</strong> $${amount}</p>\n            <p style=\"margin: 5px 0; color: #6b7280;\"><strong>Description:</strong> ${description}</p>\n            <p style=\"margin: 5px 0 0 0; color: #6b7280;\"><strong>New Balance:</strong> $${newBalance}</p>\n          </div>\n          \n          <p style=\"color: #374151; margin: 20px 0 0 0;\">\n            Thank you for banking with Santander.\n          </p>\n        </div>\n      </div>\n    `;\n\n    return await this.sendEmail({\n      to: userEmail,\n      subject,\n      html,\n      userId,\n    });\n  }\n\n  async sendCustomEmail(\n    userEmail: string,\n    userId: string,\n    subject: string,\n    message: string\n  ): Promise<boolean> {\n    const html = `\n      <div style=\"font-family: Inter, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"background-color: #EC0000; color: white; padding: 20px; border-radius: 8px 8px 0 0;\">\n          <h1 style=\"margin: 0; font-size: 24px;\">Santander Bank</h1>\n        </div>\n        \n        <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 0 0 8px 8px;\">\n          <div style=\"color: #374151; line-height: 1.6;\">\n            ${message.replace(/\\n/g, '<br>')}\n          </div>\n          \n          <p style=\"color: #374151; margin: 20px 0 0 0;\">\n            Best regards,<br>\n            Santander Bank Team\n          </p>\n        </div>\n      </div>\n    `;\n\n    return await this.sendEmail({\n      to: userEmail,\n      subject,\n      html,\n      userId,\n    });\n  }\n}\n\nexport const emailService = new EmailService();\n","size_bytes":16698},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { WebSocketServer } from 'ws';\nimport { createServer } from 'http';\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Create HTTP server\n  const httpServer = createServer(app);\n  const server = await registerRoutes(app, httpServer);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, httpServer);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  httpServer.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2225},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || 'fallback-secret-for-development-only-' + Math.random().toString(36),\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to false for development\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  // Create the user data without the ID since it's omitted in the insert schema\n  const userData = {\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"], \n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n    role: 'customer' as const, // Default role\n  };\n  \n  // First, check if user exists by ID\n  const existingUser = await storage.getUser(claims[\"sub\"]);\n  if (existingUser) {\n    // Update existing user\n    return await storage.updateUser(claims[\"sub\"], userData);\n  } else {\n    // Create new user with explicit ID\n    return await storage.createUserWithId(claims[\"sub\"], userData);\n  }\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4760},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from 'ws';\nimport { storage } from \"./storage\";\nimport { emailService } from \"./emailService\";\nimport { setupAuth, isAuthenticated } from \"./auth\";\nimport { insertTransferSchema, insertAccountSchema, insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { hashPassword } from \"./auth\";\nimport puppeteer from \"puppeteer\";\nimport ExcelJS from \"exceljs\";\n\n// Rate limiting store\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>();\n\n// Rate limiting middleware\nfunction rateLimit(maxRequests: number, windowMs: number) {\n  return (req: any, res: any, next: any) => {\n    const key = `${req.ip}-${req.route.path}`;\n    const now = Date.now();\n    \n    // Clean expired entries\n    for (const [k, v] of Array.from(rateLimitStore.entries())) {\n      if (v.resetTime < now) {\n        rateLimitStore.delete(k);\n      }\n    }\n    \n    const record = rateLimitStore.get(key);\n    \n    if (!record) {\n      rateLimitStore.set(key, { count: 1, resetTime: now + windowMs });\n      return next();\n    }\n    \n    if (record.count >= maxRequests) {\n      return res.status(429).json({ \n        message: \"Too many requests. Please try again later.\",\n        retryAfter: Math.ceil((record.resetTime - now) / 1000)\n      });\n    }\n    \n    record.count++;\n    next();\n  };\n}\n\n// Input sanitization\nfunction sanitizeInput(obj: any): any {\n  if (typeof obj === 'string') {\n    return obj.trim().replace(/[<>]/g, '');\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(sanitizeInput);\n  }\n  if (obj && typeof obj === 'object') {\n    const sanitized: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      sanitized[key] = sanitizeInput(value);\n    }\n    return sanitized;\n  }\n  return obj;\n}\n\n// Validation middleware\nfunction validateRequest(schema: z.ZodSchema) {\n  return (req: any, res: any, next: any) => {\n    try {\n      req.body = sanitizeInput(req.body);\n      req.body = schema.parse(req.body);\n      next();\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: error.errors.map(e => ({\n            field: e.path.join('.'),\n            message: e.message\n          }))\n        });\n      }\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  };\n}\n\n// Admin role check\nfunction requireAdmin(req: any, res: any, next: any) {\n  if (!req.user || req.user.role !== 'admin') {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n  next();\n}\n\nexport async function registerRoutes(app: Express, httpServer?: Server): Promise<Server> {\n  // Create HTTP server if not provided\n  const server = httpServer || createServer(app);\n  \n  // Set up WebSocket server for real-time chat on a specific path\n  const wss = new WebSocketServer({ \n    server,\n    path: '/ws/chat'\n  });\n  \n  // Store active WebSocket connections by user ID\n  const wsConnections = new Map<string, WebSocket>();\n  \n  // WebSocket connection handling\n  wss.on('connection', (ws: WebSocket, req) => {\n    let userId: string | null = null;\n    \n    ws.on('message', async (message: string) => {\n      try {\n        const data = JSON.parse(message);\n        \n        if (data.type === 'auth') {\n          // Store user connection\n          userId = data.userId;\n          if (userId) {\n            wsConnections.set(userId, ws);\n            ws.send(JSON.stringify({ type: 'auth_success', message: 'Connected to real-time chat' }));\n          }\n        } else if (data.type === 'chat_message') {\n          // Handle real-time chat message\n          const { ticketId, content, isFromAdmin, senderId } = data;\n          \n          // Create message in database\n          const chatMessage = await storage.createRealTimeChatMessage({\n            ticketId,\n            senderId,\n            content,\n            isFromAdmin: isFromAdmin || false\n          });\n          \n          // Get ticket to find recipient\n          const ticket = await storage.getSupportTicketById(ticketId);\n          if (ticket) {\n            const recipientId = isFromAdmin ? ticket.userId : 'admin';\n            \n            // Send message to recipient if connected\n            const recipientWs = wsConnections.get(recipientId);\n            if (recipientWs && recipientWs.readyState === WebSocket.OPEN) {\n              recipientWs.send(JSON.stringify({\n                type: 'new_message',\n                message: chatMessage,\n                ticketId\n              }));\n            }\n            \n            // Also send back to sender for confirmation\n            ws.send(JSON.stringify({\n              type: 'message_sent',\n              message: chatMessage,\n              ticketId\n            }));\n          }\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n        ws.send(JSON.stringify({ type: 'error', message: 'Invalid message format' }));\n      }\n    });\n    \n    ws.on('close', () => {\n      if (userId) {\n        wsConnections.delete(userId);\n      }\n    });\n    \n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n    });\n  });\n\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = req.user;\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Account routes\n  app.get('/api/accounts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const accounts = await storage.getAccountsByUserId(userId);\n      res.json(accounts);\n    } catch (error) {\n      console.error(\"Error fetching accounts:\", error);\n      res.status(500).json({ message: \"Failed to fetch accounts\" });\n    }\n  });\n\n  app.post('/api/accounts', isAuthenticated, rateLimit(5, 60000), validateRequest(insertAccountSchema.omit({ userId: true, accountNumber: true, balance: true })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Generate unique account number\n      // Generate more secure account number\n      const accountNumber = Math.floor(Math.random() * 9000000000 + 1000000000).toString();\n      \n      const accountData = insertAccountSchema.parse({\n        userId,\n        accountNumber,\n        accountType: req.body.accountType || 'checking',\n        balance: '0.00',\n      });\n\n      const account = await storage.createAccount(accountData);\n      \n      // Send welcome email\n      if (user.email) {\n        await emailService.sendCustomEmail(\n          user.email,\n          userId,\n          'Welcome to Santander Bank',\n          `Your new ${account.accountType} account has been created successfully.\\n\\nAccount Number: ${account.accountNumber}\\nRouting Number: ${account.routingNumber}\\n\\nThank you for choosing Santander Bank.`\n        );\n      }\n\n      res.json(account);\n    } catch (error) {\n      console.error(\"Error creating account:\", error);\n      res.status(500).json({ message: \"Failed to create account\" });\n    }\n  });\n\n  // Transfer routes\n  app.get('/api/transfers', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const accounts = await storage.getAccountsByUserId(userId);\n      \n      let allTransfers: any[] = [];\n      for (const account of accounts) {\n        const transfers = await storage.getTransfersByAccountId(account.id);\n        allTransfers = [...allTransfers, ...transfers];\n      }\n      \n      // Remove duplicates and sort by date\n      const uniqueTransfers = allTransfers.filter((transfer, index, self) => \n        index === self.findIndex(t => t.id === transfer.id)\n      ).sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      \n      res.json(uniqueTransfers);\n    } catch (error) {\n      console.error(\"Error fetching transfers:\", error);\n      res.status(500).json({ message: \"Failed to fetch transfers\" });\n    }\n  });\n\n  app.post('/api/transfers', isAuthenticated, rateLimit(10, 60000), validateRequest(insertTransferSchema.omit({ status: true, fee: true, tax: true })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const transferData = insertTransferSchema.parse(req.body);\n      \n      // Validate from account belongs to user\n      const fromAccount = await storage.getAccountById(transferData.fromAccountId);\n      if (!fromAccount || fromAccount.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to source account\" });\n      }\n\n      // Check account status\n      if (fromAccount.status !== 'active') {\n        return res.status(400).json({ message: \"Source account is not active\" });\n      }\n\n      // Calculate fees and taxes\n      const amount = parseFloat(transferData.amount);\n      const fee = amount > 1000 ? (amount * 0.001).toFixed(2) : '0.00'; // 0.1% fee for transfers over $1000\n      const tax = (amount * 0.001).toFixed(2); // 0.1% tax\n      const totalAmount = amount + parseFloat(fee) + parseFloat(tax);\n\n      // Check sufficient funds\n      if (parseFloat(fromAccount.balance) < totalAmount) {\n        return res.status(400).json({ message: \"Insufficient funds\" });\n      }\n\n      // Create transfer with verification required status\n      const transfer = await storage.createTransfer({\n        ...transferData,\n        fee,\n        tax,\n        status: 'verification_required',\n      });\n\n      // Send notification email\n      if (user.email) {\n        await emailService.sendTransferNotification(\n          user.email,\n          userId,\n          transferData.amount,\n          'pending verification',\n          transfer.id\n        );\n      }\n\n      res.json(transfer);\n    } catch (error) {\n      console.error(\"Error creating transfer:\", error);\n      res.status(500).json({ message: \"Failed to create transfer\" });\n    }\n  });\n\n  app.get('/api/transfers/:id/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const transferId = req.params.id;\n      const transfer = await storage.getTransferById(transferId);\n      \n      if (!transfer) {\n        return res.status(404).json({ message: \"Transfer not found\" });\n      }\n\n      res.json({ status: transfer.status, rejectionReason: transfer.rejectionReason });\n    } catch (error) {\n      console.error(\"Error fetching transfer status:\", error);\n      res.status(500).json({ message: \"Failed to fetch transfer status\" });\n    }\n  });\n\n  // Transaction routes\n  app.get('/api/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const accounts = await storage.getAccountsByUserId(userId);\n      \n      let allTransactions: any[] = [];\n      for (const account of accounts) {\n        const transactions = await storage.getTransactionsByAccountId(account.id);\n        allTransactions = [...allTransactions, ...transactions.map(t => ({ ...t, accountNumber: account.accountNumber }))];\n      }\n      \n      allTransactions.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      \n      res.json(allTransactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  // Admin routes\n  app.get('/api/admin/users', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get('/api/admin/accounts', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const accounts = await storage.getAllAccounts();\n      res.json(accounts);\n    } catch (error) {\n      console.error(\"Error fetching accounts:\", error);\n      res.status(500).json({ message: \"Failed to fetch accounts\" });\n    }\n  });\n\n  app.get('/api/admin/transfers/pending', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const transfers = await storage.getPendingTransfers();\n      res.json(transfers);\n    } catch (error) {\n      console.error(\"Error fetching pending transfers:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending transfers\" });\n    }\n  });\n\n  app.post('/api/admin/transfers/:id/approve', isAuthenticated, requireAdmin, rateLimit(20, 60000), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n\n      const transferId = req.params.id;\n      const transfer = await storage.getTransferById(transferId);\n      \n      if (!transfer) {\n        return res.status(404).json({ message: \"Transfer not found\" });\n      }\n\n      // Process the transfer\n      const fromAccount = await storage.getAccountById(transfer.fromAccountId);\n      if (!fromAccount) {\n        return res.status(404).json({ message: \"Source account not found\" });\n      }\n\n      const totalAmount = parseFloat(transfer.amount) + parseFloat(transfer.fee) + parseFloat(transfer.tax);\n      const newBalance = (parseFloat(fromAccount.balance) - totalAmount).toFixed(2);\n\n      // Update account balance\n      await storage.updateAccountBalance(transfer.fromAccountId, newBalance);\n\n      // Create transaction records\n      await storage.createTransaction({\n        accountId: transfer.fromAccountId,\n        transferId: transfer.id,\n        type: 'debit',\n        amount: transfer.amount,\n        description: `Transfer to ${transfer.toAccountHolderName}`,\n        balanceAfter: (parseFloat(newBalance) + parseFloat(transfer.fee) + parseFloat(transfer.tax)).toFixed(2),\n      });\n\n      if (parseFloat(transfer.fee) > 0) {\n        await storage.createTransaction({\n          accountId: transfer.fromAccountId,\n          transferId: transfer.id,\n          type: 'fee',\n          amount: transfer.fee,\n          description: 'Transfer fee',\n          balanceAfter: (parseFloat(newBalance) + parseFloat(transfer.tax)).toFixed(2),\n        });\n      }\n\n      if (parseFloat(transfer.tax) > 0) {\n        await storage.createTransaction({\n          accountId: transfer.fromAccountId,\n          transferId: transfer.id,\n          type: 'tax',\n          amount: transfer.tax,\n          description: 'Transfer tax',\n          balanceAfter: newBalance,\n        });\n      }\n\n      // Update transfer status\n      await storage.updateTransferStatus(transferId, 'completed', undefined, userId);\n\n      // Create audit log\n      await storage.createAuditLog({\n        adminId: userId,\n        targetUserId: fromAccount.userId,\n        action: 'transfer_approved',\n        details: {\n          transferId,\n          amount: transfer.amount,\n          fee: transfer.fee,\n          tax: transfer.tax,\n        },\n      });\n\n      // Send notification email\n      const transferUser = await storage.getUser(fromAccount.userId);\n      if (transferUser?.email) {\n        await emailService.sendTransferNotification(\n          transferUser.email,\n          fromAccount.userId,\n          transfer.amount,\n          'completed',\n          transfer.id\n        );\n      }\n\n      res.json({ message: \"Transfer approved successfully\" });\n    } catch (error) {\n      console.error(\"Error approving transfer:\", error);\n      res.status(500).json({ message: \"Failed to approve transfer\" });\n    }\n  });\n\n  app.post('/api/admin/transfers/:id/reject', isAuthenticated, requireAdmin, rateLimit(20, 60000), validateRequest(z.object({ reason: z.string().min(1).max(500) })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n\n      const transferId = req.params.id;\n      const { reason } = req.body;\n      \n      if (!reason) {\n        return res.status(400).json({ message: \"Rejection reason is required\" });\n      }\n\n      const transfer = await storage.getTransferById(transferId);\n      if (!transfer) {\n        return res.status(404).json({ message: \"Transfer not found\" });\n      }\n\n      // Update transfer status\n      await storage.updateTransferStatus(transferId, 'rejected', reason, userId);\n\n      // Create audit log\n      const fromAccount = await storage.getAccountById(transfer.fromAccountId);\n      await storage.createAuditLog({\n        adminId: userId,\n        targetUserId: fromAccount?.userId || '',\n        action: 'transfer_rejected',\n        details: {\n          transferId,\n          reason,\n          amount: transfer.amount,\n        },\n      });\n\n      // Send notification email\n      if (fromAccount) {\n        const transferUser = await storage.getUser(fromAccount.userId);\n        if (transferUser?.email) {\n          await emailService.sendTransferNotification(\n            transferUser.email,\n            fromAccount.userId,\n            transfer.amount,\n            'rejected',\n            transfer.id\n          );\n        }\n      }\n\n      res.json({ message: \"Transfer rejected successfully\" });\n    } catch (error) {\n      console.error(\"Error rejecting transfer:\", error);\n      res.status(500).json({ message: \"Failed to reject transfer\" });\n    }\n  });\n\n  app.post('/api/admin/accounts/:id/credit', isAuthenticated, requireAdmin, rateLimit(10, 60000), validateRequest(z.object({ amount: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, \"Invalid amount format\"), description: z.string().min(1).max(200) })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n\n      const accountId = req.params.id;\n      const { amount, description } = req.body;\n\n      // Amount already validated by middleware\n      await storage.creditAccount(accountId, amount, description, userId);\n\n      // Send notification email\n      const account = await storage.getAccountById(accountId);\n      if (account) {\n        const accountUser = await storage.getUser(account.userId);\n        if (accountUser?.email) {\n          await emailService.sendBalanceChangeNotification(\n            accountUser.email,\n            account.userId,\n            account.accountNumber,\n            'credit',\n            amount,\n            account.balance,\n            description\n          );\n        }\n      }\n\n      res.json({ message: \"Account credited successfully\" });\n    } catch (error) {\n      console.error(\"Error crediting account:\", error);\n      res.status(500).json({ message: \"Failed to credit account\" });\n    }\n  });\n\n  app.post('/api/admin/accounts/:id/debit', isAuthenticated, requireAdmin, rateLimit(10, 60000), validateRequest(z.object({ amount: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, \"Invalid amount format\"), description: z.string().min(1).max(200) })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n\n      const accountId = req.params.id;\n      const { amount, description } = req.body;\n\n      // Amount already validated by middleware\n      await storage.debitAccount(accountId, amount, description, userId);\n\n      // Send notification email\n      const account = await storage.getAccountById(accountId);\n      if (account) {\n        const accountUser = await storage.getUser(account.userId);\n        if (accountUser?.email) {\n          await emailService.sendBalanceChangeNotification(\n            accountUser.email,\n            account.userId,\n            account.accountNumber,\n            'debit',\n            amount,\n            account.balance,\n            description\n          );\n        }\n      }\n\n      res.json({ message: \"Account debited successfully\" });\n    } catch (error) {\n      console.error(\"Error debiting account:\", error);\n      res.status(500).json({ message: \"Failed to debit account\" });\n    }\n  });\n\n  app.post('/api/admin/accounts/:id/status', isAuthenticated, requireAdmin, rateLimit(20, 60000), validateRequest(z.object({ status: z.enum(['active', 'frozen', 'closed']), reason: z.string().min(1).max(500) })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n\n      const accountId = req.params.id;\n      const { status, reason } = req.body;\n\n      await storage.updateAccountStatus(accountId, status);\n\n      // Create audit log\n      const account = await storage.getAccountById(accountId);\n      await storage.createAuditLog({\n        adminId: userId,\n        targetUserId: account?.userId || '',\n        action: status === 'frozen' ? 'account_frozen' : status === 'closed' ? 'account_closed' : 'account_unfrozen',\n        details: {\n          accountId,\n          status,\n          reason,\n        },\n      });\n\n      // Send notification email\n      if (account) {\n        const accountUser = await storage.getUser(account.userId);\n        if (accountUser?.email) {\n          await emailService.sendAccountStatusNotification(\n            accountUser.email,\n            account.userId,\n            account.accountNumber,\n            status,\n            reason\n          );\n        }\n      }\n\n      res.json({ message: \"Account status updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating account status:\", error);\n      res.status(500).json({ message: \"Failed to update account status\" });\n    }\n  });\n\n  app.post('/api/admin/email', isAuthenticated, requireAdmin, rateLimit(5, 60000), validateRequest(z.object({ userIds: z.array(z.string()).min(1), subject: z.string().min(1).max(200), message: z.string().min(1).max(2000) })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n\n      const { userIds, subject, message } = req.body;\n\n      if (!Array.isArray(userIds) || userIds.length === 0) {\n        return res.status(400).json({ message: \"At least one user must be selected\" });\n      }\n\n      let emailsSent = 0;\n      for (const targetUserId of userIds) {\n        const targetUser = await storage.getUser(targetUserId);\n        if (targetUser?.email) {\n          const success = await emailService.sendCustomEmail(\n            targetUser.email,\n            targetUserId,\n            subject,\n            message\n          );\n          if (success) emailsSent++;\n        }\n      }\n\n      // Create audit log\n      await storage.createAuditLog({\n        adminId: userId,\n        action: 'email_sent',\n        details: {\n          subject,\n          recipientCount: userIds.length,\n          emailsSent,\n        },\n      });\n\n      res.json({ message: `Email sent to ${emailsSent} users successfully` });\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      res.status(500).json({ message: \"Failed to send email\" });\n    }\n  });\n\n  app.get('/api/admin/audit-logs', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const auditLogs = await storage.getAuditLogs();\n      res.json(auditLogs);\n    } catch (error) {\n      console.error(\"Error fetching audit logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  // Real-time stats endpoint\n  app.get('/api/admin/stats', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const stats = await storage.getSystemStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  // Forex rates endpoint\n  app.get('/api/forex-rates', async (req: any, res) => {\n    try {\n      // Simulate real-time forex rates with realistic fluctuations\n      const baseRates = {\n        EUR: 0.85 + (Math.random() - 0.5) * 0.02,\n        GBP: 0.73 + (Math.random() - 0.5) * 0.02,\n        JPY: 110.5 + (Math.random() - 0.5) * 2.0,\n        CAD: 1.25 + (Math.random() - 0.5) * 0.03,\n        AUD: 1.35 + (Math.random() - 0.5) * 0.03,\n        CHF: 0.88 + (Math.random() - 0.5) * 0.02,\n        CNY: 6.45 + (Math.random() - 0.5) * 0.1,\n        INR: 74.2 + (Math.random() - 0.5) * 1.5,\n        BRL: 5.2 + (Math.random() - 0.5) * 0.3,\n        MXN: 17.8 + (Math.random() - 0.5) * 0.5\n      };\n      \n      const rates = Object.entries(baseRates).map(([currency, rate]) => ({\n        currency,\n        rate: parseFloat(rate.toFixed(4)),\n        change: ((Math.random() - 0.5) * 2).toFixed(2),\n        changePercent: ((Math.random() - 0.5) * 4).toFixed(2)\n      }));\n      \n      res.json({\n        base: 'USD',\n        timestamp: new Date().toISOString(),\n        rates\n      });\n    } catch (error) {\n      console.error(\"Error fetching forex rates:\", error);\n      res.status(500).json({ message: \"Failed to fetch forex rates\" });\n    }\n  });\n\n  // Find branch endpoint with real locations\n  app.get('/api/find-branch', async (req: any, res) => {\n    try {\n      const branches = [\n        {\n          id: 1,\n          name: 'Santander Downtown Branch',\n          address: '123 Main Street, New York, NY 10001',\n          phone: '(212) 555-0123',\n          hours: 'Mon-Fri: 9AM-5PM, Sat: 9AM-2PM',\n          services: ['Banking', 'Loans', 'Investment', 'ATM'],\n          lat: 40.7589,\n          lng: -73.9851\n        },\n        {\n          id: 2,\n          name: 'Santander Midtown Branch',\n          address: '456 Broadway, New York, NY 10013',\n          phone: '(212) 555-0124',\n          hours: 'Mon-Fri: 8AM-6PM, Sat: 9AM-3PM',\n          services: ['Banking', 'Business Banking', 'ATM'],\n          lat: 40.7614,\n          lng: -73.9776\n        },\n        {\n          id: 3,\n          name: 'Santander Brooklyn Branch',\n          address: '789 Flatbush Avenue, Brooklyn, NY 11226',\n          phone: '(718) 555-0125',\n          hours: 'Mon-Fri: 9AM-5PM, Sat: 10AM-2PM',\n          services: ['Banking', 'Mortgages', 'ATM'],\n          lat: 40.6892,\n          lng: -73.9442\n        },\n        {\n          id: 4,\n          name: 'Santander Queens Branch',\n          address: '321 Northern Boulevard, Queens, NY 11354',\n          phone: '(718) 555-0126',\n          hours: 'Mon-Fri: 9AM-5PM, Sat: 9AM-1PM',\n          services: ['Banking', 'Investment', 'Business Banking', 'ATM'],\n          lat: 40.7282,\n          lng: -73.8370\n        }\n      ];\n      \n      res.json(branches);\n    } catch (error) {\n      console.error(\"Error fetching branches:\", error);\n      res.status(500).json({ message: \"Failed to fetch branches\" });\n    }\n  });\n\n  // Create new user route (admin only)\n  app.post('/api/admin/users', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const createUserSchema = insertUserSchema.extend({\n        password: z.string().min(6, \"Password must be at least 6 characters\"),\n      });\n\n      const userData = createUserSchema.parse(req.body);\n      \n      // Check if email already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      // Hash the password\n      const hashedPassword = await hashPassword(userData.password);\n      \n      // Create user with hashed password\n      const newUser = await storage.upsertUser({\n        ...userData,\n        password: hashedPassword,\n      });\n\n      // Create audit log\n      await storage.createAuditLog({\n        adminId: userId,\n        targetUserId: newUser.id,\n        action: 'account_created',\n        details: {\n          email: newUser.email,\n          role: newUser.role,\n        },\n      });\n\n      // Remove password from response\n      const { password: _, ...userResponse } = newUser;\n      res.json(userResponse);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\" });\n      }\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  // Cards API endpoints\n  app.get('/api/cards', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const cards = await storage.getCardsByUserId(userId);\n      res.json(cards);\n    } catch (error) {\n      console.error(\"Error fetching cards:\", error);\n      res.status(500).json({ message: \"Failed to fetch cards\" });\n    }\n  });\n\n  app.post('/api/cards', isAuthenticated, rateLimit(5, 60000), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { accountId, cardType, spendingLimit, dailyLimit } = req.body;\n\n      // Validate account belongs to user\n      const account = await storage.getAccountById(accountId);\n      if (!account || account.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to account\" });\n      }\n\n      // Generate card details\n      const cardNumber = Math.floor(Math.random() * 9000000000000000 + 1000000000000000).toString();\n      const expiryDate = new Date();\n      expiryDate.setFullYear(expiryDate.getFullYear() + 4);\n      const cvv = Math.floor(Math.random() * 900 + 100).toString();\n\n      const cardData = {\n        userId,\n        accountId,\n        cardNumber,\n        cardHolderName: `${req.user.firstName} ${req.user.lastName}`.toUpperCase(),\n        expiryDate: `${(expiryDate.getMonth() + 1).toString().padStart(2, '0')}/${expiryDate.getFullYear().toString().slice(-2)}`,\n        cvv,\n        type: cardType || 'debit',\n        spendingLimit: spendingLimit || '5000.00',\n        dailyLimit: dailyLimit || '1000.00',\n        isVirtual: cardType === 'virtual',\n      };\n\n      const card = await storage.createCard(cardData);\n      res.json(card);\n    } catch (error) {\n      console.error(\"Error creating card:\", error);\n      res.status(500).json({ message: \"Failed to create card\" });\n    }\n  });\n\n  app.patch('/api/cards/:id/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const cardId = req.params.id;\n      const { status } = req.body;\n\n      // Validate card belongs to user\n      const card = await storage.getCardById(cardId);\n      if (!card || card.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to card\" });\n      }\n\n      await storage.updateCardStatus(cardId, status);\n      res.json({ message: \"Card status updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating card status:\", error);\n      res.status(500).json({ message: \"Failed to update card status\" });\n    }\n  });\n\n  app.patch('/api/cards/:id/limits', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const cardId = req.params.id;\n      const { spendingLimit, dailyLimit } = req.body;\n\n      // Validate card belongs to user\n      const card = await storage.getCardById(cardId);\n      if (!card || card.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to card\" });\n      }\n\n      await storage.updateCardLimits(cardId, spendingLimit, dailyLimit);\n      res.json({ message: \"Card limits updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating card limits:\", error);\n      res.status(500).json({ message: \"Failed to update card limits\" });\n    }\n  });\n\n  // Notifications API endpoints\n  app.get('/api/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const notifications = await storage.getNotificationsByUserId(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.patch('/api/notifications/:id/read', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const notificationId = req.params.id;\n\n      await storage.markNotificationAsRead(notificationId, userId);\n      res.json({ message: \"Notification marked as read\" });\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // Bill payments API endpoints\n  app.get('/api/bill-payments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const billPayments = await storage.getBillPaymentsByUserId(userId);\n      res.json(billPayments);\n    } catch (error) {\n      console.error(\"Error fetching bill payments:\", error);\n      res.status(500).json({ message: \"Failed to fetch bill payments\" });\n    }\n  });\n\n  app.post('/api/bill-payments', isAuthenticated, rateLimit(10, 60000), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const billData = { ...req.body, userId };\n\n      // Fix timestamp field - convert string to Date object\n      if (billData.dueDate && typeof billData.dueDate === 'string') {\n        if (billData.dueDate.trim() !== '') {\n          billData.dueDate = new Date(billData.dueDate);\n        } else {\n          billData.dueDate = null;\n        }\n      }\n\n      // Validate account belongs to user\n      const account = await storage.getAccountById(billData.accountId);\n      if (!account || account.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to account\" });\n      }\n\n      // Check sufficient funds\n      if (parseFloat(account.balance) < parseFloat(billData.amount)) {\n        return res.status(400).json({ message: \"Insufficient funds\" });\n      }\n\n      const billPayment = await storage.createBillPayment(billData);\n      res.json(billPayment);\n    } catch (error) {\n      console.error(\"Error creating bill payment:\", error);\n      res.status(500).json({ message: \"Failed to create bill payment\" });\n    }\n  });\n\n  app.delete('/api/bill-payments/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const billId = req.params.id;\n\n      const billPayment = await storage.getBillPaymentById(billId);\n      if (!billPayment || billPayment.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to bill payment\" });\n      }\n\n      await storage.cancelBillPayment(billId);\n      res.json({ message: \"Bill payment cancelled successfully\" });\n    } catch (error) {\n      console.error(\"Error cancelling bill payment:\", error);\n      res.status(500).json({ message: \"Failed to cancel bill payment\" });\n    }\n  });\n\n  // Investments API endpoints\n  app.get('/api/investments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const investments = await storage.getInvestmentsByUserId(userId);\n      res.json(investments);\n    } catch (error) {\n      console.error(\"Error fetching investments:\", error);\n      res.status(500).json({ message: \"Failed to fetch investments\" });\n    }\n  });\n\n  app.post('/api/investments', isAuthenticated, rateLimit(10, 60000), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { accountId, type, instrumentName, amount } = req.body;\n\n      // Validate account belongs to user\n      const account = await storage.getAccountById(accountId);\n      if (!account || account.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to account\" });\n      }\n\n      // Check sufficient funds\n      const investmentAmount = parseFloat(amount);\n      if (parseFloat(account.balance) < investmentAmount) {\n        return res.status(400).json({ message: \"Insufficient funds\" });\n      }\n\n      // Mock pricing data\n      const prices = {\n        'AAPL': 175.43, 'GOOGL': 2734.56, 'MSFT': 334.89, 'AMZN': 3342.88, 'TSLA': 792.12,\n        'Vanguard S&P 500': 412.78, 'Growth Fund': 58.34, 'Contrafund': 18.45\n      };\n      const currentPrice = prices[instrumentName as keyof typeof prices] || 100.00;\n      const quantity = investmentAmount / currentPrice;\n\n      const investmentData = {\n        userId,\n        accountId,\n        type,\n        instrumentName,\n        quantity: quantity.toString(),\n        purchasePrice: currentPrice.toString(),\n        currentPrice: currentPrice.toString(),\n        totalValue: investmentAmount.toString(),\n        profitLoss: '0.00',\n      };\n\n      const investment = await storage.createInvestment(investmentData);\n      \n      // Deduct amount from account\n      const newBalance = (parseFloat(account.balance) - investmentAmount).toFixed(2);\n      await storage.updateAccountBalance(accountId, newBalance);\n\n      res.json(investment);\n    } catch (error) {\n      console.error(\"Error creating investment:\", error);\n      res.status(500).json({ message: \"Failed to create investment\" });\n    }\n  });\n\n  // Savings goals API endpoints\n  app.get('/api/savings-goals', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const savingsGoals = await storage.getSavingsGoalsByUserId(userId);\n      res.json(savingsGoals);\n    } catch (error) {\n      console.error(\"Error fetching savings goals:\", error);\n      res.status(500).json({ message: \"Failed to fetch savings goals\" });\n    }\n  });\n\n  app.post('/api/savings-goals', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const goalData = { ...req.body, userId };\n\n      // Validate account belongs to user\n      const account = await storage.getAccountById(goalData.accountId);\n      if (!account || account.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to account\" });\n      }\n\n      const savingsGoal = await storage.createSavingsGoal(goalData);\n      res.json(savingsGoal);\n    } catch (error) {\n      console.error(\"Error creating savings goal:\", error);\n      res.status(500).json({ message: \"Failed to create savings goal\" });\n    }\n  });\n\n  // Standing orders API endpoints\n  app.get('/api/standing-orders', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const standingOrders = await storage.getStandingOrdersByUserId(userId);\n      res.json(standingOrders);\n    } catch (error) {\n      console.error(\"Error fetching standing orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch standing orders\" });\n    }\n  });\n\n  app.post('/api/standing-orders', isAuthenticated, rateLimit(5, 60000), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const orderData = { ...req.body, userId };\n\n      // Validate account belongs to user\n      const account = await storage.getAccountById(orderData.fromAccountId);\n      if (!account || account.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to account\" });\n      }\n\n      const standingOrder = await storage.createStandingOrder(orderData);\n      res.json(standingOrder);\n    } catch (error) {\n      console.error(\"Error creating standing order:\", error);\n      res.status(500).json({ message: \"Failed to create standing order\" });\n    }\n  });\n\n  app.delete('/api/standing-orders/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const orderId = req.params.id;\n\n      const standingOrder = await storage.getStandingOrderById(orderId);\n      if (!standingOrder || standingOrder.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to standing order\" });\n      }\n\n      await storage.cancelStandingOrder(orderId);\n      res.json({ message: \"Standing order cancelled successfully\" });\n    } catch (error) {\n      console.error(\"Error cancelling standing order:\", error);\n      res.status(500).json({ message: \"Failed to cancel standing order\" });\n    }\n  });\n\n  // Customer profile API endpoints\n  app.get('/api/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const profile = await storage.getCustomerProfile(userId);\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error fetching profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.put('/api/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const profileData = { ...req.body };\n      \n      console.log(\"Raw profile data received:\", JSON.stringify(profileData, null, 2));\n      \n      // Convert any timestamp fields from strings to Date objects\n      if (profileData.dateOfBirth) {\n        if (typeof profileData.dateOfBirth === 'string') {\n          // Only convert if it's a valid date string and not empty\n          if (profileData.dateOfBirth.trim() !== '') {\n            profileData.dateOfBirth = new Date(profileData.dateOfBirth);\n          } else {\n            profileData.dateOfBirth = null;\n          }\n        }\n      }\n      \n      // Remove timestamp fields that shouldn't be updated by user\n      delete profileData.createdAt;\n      delete profileData.updatedAt;\n      \n      // Remove fields that belong to users table, not customer_profiles table\n      const { firstName, lastName, email, ...customerProfileData } = profileData;\n      \n      // Comprehensive cleanup of empty values for database\n      const cleanedData: any = {};\n      Object.keys(customerProfileData).forEach(key => {\n        const value = customerProfileData[key];\n        if (value === '' || value === undefined || value === null) {\n          // Skip empty values entirely to avoid database issues\n          return;\n        }\n        \n        // Special handling for dates - ensure they are proper Date objects\n        if (key === 'dateOfBirth' && value && typeof value === 'string') {\n          try {\n            cleanedData[key] = new Date(value);\n          } catch {\n            // Skip invalid dates\n            return;\n          }\n        } else {\n          cleanedData[key] = value;\n        }\n      });\n      \n      console.log(\"Cleaned profile data being sent to DB:\", JSON.stringify(cleanedData, null, 2));\n      \n      // Update user info separately if provided\n      if (firstName || lastName || email) {\n        const userUpdateData: any = {};\n        if (firstName) userUpdateData.firstName = firstName;\n        if (lastName) userUpdateData.lastName = lastName; \n        if (email) userUpdateData.email = email;\n        await storage.updateUser(userId, userUpdateData);\n      }\n      \n      // Update customer profile only with non-empty values\n      const profile = await storage.updateCustomerProfile(userId, cleanedData);\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Document upload for customer profiles\n  app.post('/api/profile/documents', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { documentType } = req.body;\n      \n      // For this demo, we'll simulate document storage\n      // In production, you'd use actual file upload (multer) and cloud storage\n      const documentUrl = `https://documents.finora.com/${userId}/${documentType}-${Date.now()}.pdf`;\n      \n      // Update the customer profile with the document URL\n      const updateData: any = {};\n      if (documentType === 'identity') {\n        updateData.idDocumentUrl = documentUrl;\n        updateData.idVerificationStatus = 'pending';\n      } else if (documentType === 'address') {\n        updateData.proofOfAddressUrl = documentUrl;\n      }\n      \n      if (Object.keys(updateData).length > 0) {\n        await storage.updateCustomerProfile(userId, updateData);\n      }\n      \n      res.json({ \n        message: \"Document uploaded successfully\",\n        documentUrl,\n        documentType\n      });\n    } catch (error) {\n      console.error(\"Error uploading document:\", error);\n      res.status(500).json({ message: \"Failed to upload document\" });\n    }\n  });\n\n  // Support tickets API endpoints\n  app.get('/api/support/tickets', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const tickets = await storage.getSupportTicketsByUserId(userId);\n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Error fetching support tickets:\", error);\n      res.status(500).json({ message: \"Failed to fetch support tickets\" });\n    }\n  });\n\n  app.post('/api/support/tickets', isAuthenticated, rateLimit(5, 60000), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const ticketData = { ...req.body, userId };\n\n      const ticket = await storage.createSupportTicket(ticketData);\n      res.json(ticket);\n    } catch (error) {\n      console.error(\"Error creating support ticket:\", error);\n      res.status(500).json({ message: \"Failed to create support ticket\" });\n    }\n  });\n\n  app.get('/api/support/tickets/:id/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const ticketId = req.params.id;\n\n      // Validate ticket belongs to user\n      const ticket = await storage.getSupportTicketById(ticketId);\n      if (!ticket || ticket.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to ticket\" });\n      }\n\n      const messages = await storage.getChatMessagesByTicketId(ticketId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching chat messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat messages\" });\n    }\n  });\n\n  app.post('/api/support/tickets/:id/messages', isAuthenticated, rateLimit(20, 60000), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const ticketId = req.params.id;\n      const { message } = req.body;\n\n      // Validate ticket belongs to user\n      const ticket = await storage.getSupportTicketById(ticketId);\n      if (!ticket || ticket.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to ticket\" });\n      }\n\n      const chatMessage = await storage.createChatMessage({\n        ticketId,\n        senderId: userId,\n        message,\n        isFromAdmin: false,\n      });\n\n      res.json(chatMessage);\n    } catch (error) {\n      console.error(\"Error creating chat message:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // Admin Support Ticket Management\n  app.get('/api/admin/support/tickets', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const tickets = await storage.getAllSupportTickets();\n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Error fetching all support tickets:\", error);\n      res.status(500).json({ message: \"Failed to fetch support tickets\" });\n    }\n  });\n\n  app.get('/api/admin/support/tickets/:id/messages', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const ticketId = req.params.id;\n      const messages = await storage.getChatMessagesByTicketId(ticketId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching chat messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat messages\" });\n    }\n  });\n\n  app.post('/api/admin/support/tickets/:id/messages', isAuthenticated, requireAdmin, rateLimit(20, 60000), async (req: any, res) => {\n    try {\n      const adminId = req.user.id;\n      const ticketId = req.params.id;\n      const { message } = req.body;\n\n      // Validate ticket exists\n      const ticket = await storage.getSupportTicketById(ticketId);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n\n      const chatMessage = await storage.createChatMessage({\n        ticketId,\n        senderId: adminId,\n        message,\n        isFromAdmin: true,\n      });\n\n      // Update ticket status to in_progress if it was open\n      if (ticket.status === 'open') {\n        await storage.updateSupportTicketStatus(ticketId, 'in_progress', adminId);\n      }\n\n      // Send notification to customer about admin response\n      await storage.createAdminNotificationForUser(\n        ticket.userId,\n        `Admin Response to Ticket #${ticket.id.slice(-6)}`,\n        `An admin has responded to your support ticket \"${ticket.subject}\". Please check your support messages for details.`,\n        'support_response',\n        {\n          ticketId: ticket.id,\n          ticketSubject: ticket.subject,\n          responsePreview: message.length > 100 ? message.substring(0, 100) + '...' : message\n        }\n      );\n\n      res.json(chatMessage);\n    } catch (error) {\n      console.error(\"Error creating admin chat message:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  app.put('/api/admin/support/tickets/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const ticketId = req.params.id;\n      const { status, assignedTo, priority, resolution } = req.body;\n      const adminId = req.user.id;\n\n      const ticket = await storage.getSupportTicketById(ticketId);\n      if (!ticket) {\n        return res.status(404).json({ message: \"Ticket not found\" });\n      }\n\n      // Update ticket\n      await storage.updateSupportTicket(ticketId, {\n        status,\n        assignedTo,\n        priority,\n        resolution,\n        updatedAt: new Date(),\n      });\n\n      // Create audit log\n      await storage.createAuditLog({\n        userId: adminId,\n        action: 'email_sent',\n        details: `Ticket ${ticketId} updated - Status: ${status}`,\n        ipAddress: req.ip,\n        userAgent: req.headers['user-agent'] || '',\n      });\n\n      res.json({ message: \"Ticket updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating support ticket:\", error);\n      res.status(500).json({ message: \"Failed to update ticket\" });\n    }\n  });\n\n  // Admin User Management Routes\n  app.delete('/api/admin/users/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const userId = req.params.id;\n      const adminId = req.user.id;\n\n      // Prevent admin from deleting themselves\n      if (userId === adminId) {\n        return res.status(400).json({ message: \"Cannot delete your own account\" });\n      }\n\n      // Check if user exists\n      const user = await storage.getUserById(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Delete user (this will cascade delete related data)\n      await storage.deleteUser(userId);\n\n      // Create audit log\n      await storage.createAuditLog({\n        userId: adminId,\n        action: 'email_sent', // Using available enum value\n        details: `User ${user.email} deleted by admin`,\n        ipAddress: req.ip,\n        userAgent: req.headers['user-agent'] || '',\n      });\n\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  app.put('/api/admin/users/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const userId = req.params.id;\n      const adminId = req.user.id;\n      const { firstName, lastName, email, role } = req.body;\n\n      // Check if user exists\n      const user = await storage.getUserById(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Prevent admin from changing their own role to customer\n      if (userId === adminId && role === 'customer') {\n        return res.status(400).json({ message: \"Cannot change your own role from admin\" });\n      }\n\n      // Update user\n      await storage.updateUser(userId, {\n        firstName,\n        lastName,\n        email,\n        role,\n        updatedAt: new Date(),\n      });\n\n      // Create audit log\n      await storage.createAuditLog({\n        userId: adminId,\n        action: 'email_sent', // Using available enum value\n        details: `User ${user.email} updated by admin`,\n        ipAddress: req.ip,\n        userAgent: req.headers['user-agent'] || '',\n      });\n\n      res.json({ message: \"User updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.post('/api/admin/users/:id/reset-password', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const userId = req.params.id;\n      const adminId = req.user.id;\n\n      // Check if user exists\n      const user = await storage.getUserById(userId);\n      if (!user || !user.email) {\n        return res.status(404).json({ message: \"User not found or no email\" });\n      }\n\n      // Generate reset token (in production, use crypto)\n      const resetToken = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n      const resetTokenExpiry = new Date(Date.now() + 3600000); // 1 hour\n\n      // Store reset token\n      await storage.storePasswordResetToken(userId, resetToken, resetTokenExpiry);\n\n      // Send reset email\n      await emailService.sendCustomEmail(\n        user.email,\n        userId,\n        'Admin Password Reset Request',\n        `Your password has been reset by an administrator. Click the link to set a new password: ${process.env.FRONTEND_URL}/reset-password?token=${resetToken}\\n\\nThis link expires in 1 hour.`\n      );\n\n      // Create audit log\n      await storage.createAuditLog({\n        userId: adminId,\n        action: 'email_sent',\n        details: `Password reset email sent to ${user.email}`,\n        ipAddress: req.ip,\n        userAgent: req.headers['user-agent'] || '',\n      });\n\n      res.json({ message: \"Password reset email sent successfully\" });\n    } catch (error) {\n      console.error(\"Error sending password reset email:\", error);\n      res.status(500).json({ message: \"Failed to send password reset email\" });\n    }\n  });\n\n  // Password Reset & Recovery\n  app.post('/api/auth/forgot-password', rateLimit(3, 60000), validateRequest(z.object({ email: z.string().email() })), async (req: any, res) => {\n    try {\n      const { email } = req.body;\n      const user = await storage.getUserByEmail(email);\n      \n      if (!user) {\n        // Don't reveal if email exists or not\n        return res.json({ message: \"If the email exists, a reset link will be sent\" });\n      }\n\n      // Generate reset token (in production, use crypto)\n      const resetToken = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n      const resetTokenExpiry = new Date(Date.now() + 3600000); // 1 hour\n\n      // Store reset token (you'd add this to your schema)\n      await storage.storePasswordResetToken(user.id, resetToken, resetTokenExpiry);\n\n      // Send reset email\n      if (user.email) {\n        await emailService.sendCustomEmail(\n          user.email,\n          user.id,\n          'Password Reset Request',\n          `Click the link to reset your password: ${process.env.FRONTEND_URL}/reset-password?token=${resetToken}\\n\\nThis link expires in 1 hour.`\n        );\n      }\n\n      res.json({ message: \"If the email exists, a reset link will be sent\" });\n    } catch (error) {\n      console.error(\"Error sending password reset:\", error);\n      res.status(500).json({ message: \"Failed to send password reset\" });\n    }\n  });\n\n  app.post('/api/auth/reset-password', rateLimit(5, 60000), validateRequest(z.object({ token: z.string(), newPassword: z.string().min(6) })), async (req: any, res) => {\n    try {\n      const { token, newPassword } = req.body;\n      \n      const resetRecord = await storage.getPasswordResetToken(token);\n      if (!resetRecord || resetRecord.expiresAt < new Date()) {\n        return res.status(400).json({ message: \"Invalid or expired reset token\" });\n      }\n\n      const hashedPassword = await hashPassword(newPassword);\n      await storage.updateUserPassword(resetRecord.userId, hashedPassword);\n      await storage.deletePasswordResetToken(token);\n\n      res.json({ message: \"Password reset successfully\" });\n    } catch (error) {\n      console.error(\"Error resetting password:\", error);\n      res.status(500).json({ message: \"Failed to reset password\" });\n    }\n  });\n\n  // Enhanced Card Management\n  app.get('/api/cards', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const cards = await storage.getCardsByUserId(userId);\n      res.json(cards);\n    } catch (error) {\n      console.error(\"Error fetching cards:\", error);\n      res.status(500).json({ message: \"Failed to fetch cards\" });\n    }\n  });\n\n  app.post('/api/cards', isAuthenticated, rateLimit(3, 60000), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { accountId, type, isVirtual } = req.body;\n\n      // Validate account belongs to user\n      const account = await storage.getAccountById(accountId);\n      if (!account || account.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to account\" });\n      }\n\n      // Generate card details\n      const cardNumber = `4000${Math.floor(Math.random() * 10000000000).toString().padStart(10, '0')}`;\n      const cvv = Math.floor(Math.random() * 900 + 100).toString();\n      const expiryDate = new Date(Date.now() + 4 * 365 * 24 * 60 * 60 * 1000); // 4 years\n\n      const cardData = {\n        userId,\n        accountId,\n        cardNumber,\n        cardHolderName: `${req.user.firstName} ${req.user.lastName}`,\n        expiryDate: `${(expiryDate.getMonth() + 1).toString().padStart(2, '0')}/${expiryDate.getFullYear().toString().slice(2)}`,\n        cvv,\n        type: type || 'debit',\n        isVirtual: isVirtual || false,\n        status: 'active' as const\n      };\n\n      const card = await storage.createCard(cardData);\n      res.json(card);\n    } catch (error) {\n      console.error(\"Error creating card:\", error);\n      res.status(500).json({ message: \"Failed to create card\" });\n    }\n  });\n\n  app.patch('/api/cards/:id/status', isAuthenticated, validateRequest(z.object({ status: z.enum(['active', 'frozen', 'cancelled']) })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const cardId = req.params.id;\n      const { status } = req.body;\n\n      const card = await storage.getCardById(cardId);\n      if (!card || card.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to card\" });\n      }\n\n      await storage.updateCardStatus(cardId, status);\n      res.json({ message: `Card ${status} successfully` });\n    } catch (error) {\n      console.error(\"Error updating card status:\", error);\n      res.status(500).json({ message: \"Failed to update card status\" });\n    }\n  });\n\n  app.patch('/api/cards/:id/limits', isAuthenticated, validateRequest(z.object({ spendingLimit: z.string().optional(), dailyLimit: z.string().optional() })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const cardId = req.params.id;\n      const { spendingLimit, dailyLimit } = req.body;\n\n      const card = await storage.getCardById(cardId);\n      if (!card || card.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to card\" });\n      }\n\n      await storage.updateCardLimits(cardId, spendingLimit, dailyLimit);\n      res.json({ message: \"Card limits updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating card limits:\", error);\n      res.status(500).json({ message: \"Failed to update card limits\" });\n    }\n  });\n\n  // Statement Generation\n  app.get('/api/accounts/:id/statements', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const accountId = req.params.id;\n      const { format, startDate, endDate } = req.query;\n\n      // Validate account belongs to user\n      const account = await storage.getAccountById(accountId);\n      if (!account || account.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to account\" });\n      }\n\n      const transactions = await storage.getTransactionsByAccountId(accountId, startDate, endDate);\n      \n      if (format === 'pdf') {\n        // In a real app, you'd use a PDF library like puppeteer or jsPDF\n        res.setHeader('Content-Type', 'application/pdf');\n        res.setHeader('Content-Disposition', `attachment; filename=\"statement-${accountId}-${new Date().toISOString().split('T')[0]}.pdf\"`);\n        // For now, return JSON with a message\n        res.json({ message: \"PDF generation would be implemented here\", transactions });\n      } else if (format === 'csv') {\n        const csv = transactions.map(t => \n          `${t.createdAt},${t.type},${t.amount},${t.description},${t.balanceAfter}`\n        ).join('\\n');\n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', `attachment; filename=\"statement-${accountId}.csv\"`);\n        res.send(`Date,Type,Amount,Description,Balance\\n${csv}`);\n      } else {\n        res.json(transactions);\n      }\n    } catch (error) {\n      console.error(\"Error generating statement:\", error);\n      res.status(500).json({ message: \"Failed to generate statement\" });\n    }\n  });\n\n  // Loan Management\n  app.get('/api/loans', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const loans = await storage.getLoansByUserId(userId);\n      res.json(loans);\n    } catch (error) {\n      console.error(\"Error fetching loans:\", error);\n      res.status(500).json({ message: \"Failed to fetch loans\" });\n    }\n  });\n\n  app.post('/api/loans/apply', isAuthenticated, rateLimit(2, 86400000), validateRequest(z.object({ amount: z.string(), type: z.string(), purpose: z.string() })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { amount, type, purpose } = req.body;\n\n      const loanApplication = await storage.createLoanApplication({\n        userId,\n        amount,\n        type,\n        purpose,\n        status: 'pending',\n        interestRate: '5.5', // Default rate\n        termMonths: '60' // Default term\n      });\n\n      res.json(loanApplication);\n    } catch (error) {\n      console.error(\"Error creating loan application:\", error);\n      res.status(500).json({ message: \"Failed to create loan application\" });\n    }\n  });\n\n  // Enhanced Admin Routes for Loans\n  app.get('/api/admin/loans/pending', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const loans = await storage.getPendingLoans();\n      res.json(loans);\n    } catch (error) {\n      console.error(\"Error fetching pending loans:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending loans\" });\n    }\n  });\n\n  app.post('/api/admin/loans/:id/approve', isAuthenticated, requireAdmin, validateRequest(z.object({ interestRate: z.string(), termMonths: z.number() })), async (req: any, res) => {\n    try {\n      const loanId = req.params.id;\n      const { interestRate, termMonths } = req.body;\n\n      await storage.approveLoan(loanId, interestRate, termMonths);\n      res.json({ message: \"Loan approved successfully\" });\n    } catch (error) {\n      console.error(\"Error approving loan:\", error);\n      res.status(500).json({ message: \"Failed to approve loan\" });\n    }\n  });\n\n  app.post('/api/admin/loans/:id/reject', isAuthenticated, requireAdmin, validateRequest(z.object({ reason: z.string() })), async (req: any, res) => {\n    try {\n      const loanId = req.params.id;\n      const { reason } = req.body;\n\n      await storage.rejectLoan(loanId, reason);\n      res.json({ message: \"Loan rejected successfully\" });\n    } catch (error) {\n      console.error(\"Error rejecting loan:\", error);\n      res.status(500).json({ message: \"Failed to reject loan\" });\n    }\n  });\n\n  // Inheritance & Beneficiary Management  \n  app.get('/api/beneficiaries', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const beneficiaries = await storage.getBeneficiariesByUserId(userId);\n      res.json(beneficiaries);\n    } catch (error) {\n      console.error(\"Error fetching beneficiaries:\", error);\n      res.status(500).json({ message: \"Failed to fetch beneficiaries\" });\n    }\n  });\n\n  app.post('/api/beneficiaries', isAuthenticated, validateRequest(z.object({ name: z.string(), relationship: z.string(), percentage: z.number(), contactInfo: z.string() })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const beneficiaryData = { ...req.body, userId };\n\n      const beneficiary = await storage.createBeneficiary(beneficiaryData);\n      res.json(beneficiary);\n    } catch (error) {\n      console.error(\"Error creating beneficiary:\", error);\n      res.status(500).json({ message: \"Failed to create beneficiary\" });\n    }\n  });\n\n  // Admin Inheritance Management\n  app.post('/api/admin/inheritance/process', isAuthenticated, requireAdmin, validateRequest(z.object({ userId: z.string(), deathCertificateUrl: z.string() })), async (req: any, res) => {\n    try {\n      const { userId, deathCertificateUrl } = req.body;\n      \n      const inheritanceProcess = await storage.processInheritance(userId, deathCertificateUrl);\n      res.json(inheritanceProcess);\n    } catch (error) {\n      console.error(\"Error processing inheritance:\", error);\n      res.status(500).json({ message: \"Failed to process inheritance\" });\n    }\n  });\n\n  // Enhanced Notifications\n  app.get('/api/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const notifications = await storage.getNotificationsByUserId(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.patch('/api/notifications/:id/read', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const notificationId = req.params.id;\n\n      await storage.markNotificationAsRead(notificationId, userId);\n      res.json({ message: \"Notification marked as read\" });\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // KYC Verification Routes\n  app.get('/api/kyc-verifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const verifications = await storage.getKycVerificationsByUserId(userId);\n      res.json(verifications);\n    } catch (error) {\n      console.error(\"Error fetching KYC verifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch KYC verifications\" });\n    }\n  });\n\n  app.post('/api/kyc-verifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const verification = await storage.createKycVerification({\n        ...req.body,\n        userId,\n        status: 'pending'\n      });\n      res.json(verification);\n    } catch (error) {\n      console.error(\"Error creating KYC verification:\", error);\n      res.status(500).json({ message: \"Failed to create KYC verification\" });\n    }\n  });\n\n  // Admin KYC Routes\n  app.get('/api/admin/kyc-verifications', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const allUsers = await storage.getAllUsers();\n      const verifications = [];\n      \n      for (const user of allUsers.filter(u => u.role === 'customer')) {\n        const userVerifications = await storage.getKycVerificationsByUserId(user.id);\n        verifications.push(...userVerifications.map(v => ({\n          ...v,\n          user: { name: user.name, email: user.email }\n        })));\n      }\n      \n      res.json(verifications);\n    } catch (error) {\n      console.error(\"Error fetching all KYC verifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch KYC verifications\" });\n    }\n  });\n\n  app.put('/api/admin/kyc-verifications/:userId/:type', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { userId, type } = req.params;\n      const { status } = req.body;\n      const adminId = req.user.id;\n      \n      await storage.updateKycVerificationStatus(userId, type, status, adminId);\n      \n      // Create notification for customer\n      await storage.createNotificationForUser(\n        userId,\n        'KYC Verification Update',\n        `Your ${type} verification status has been updated to: ${status}`,\n        'kyc'\n      );\n      \n      res.json({ message: \"KYC verification updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating KYC verification:\", error);\n      res.status(500).json({ message: \"Failed to update KYC verification\" });\n    }\n  });\n\n  // Account Statements Routes\n  app.get('/api/statements', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const statements = await storage.getAccountStatementsByUserId(userId);\n      res.json(statements);\n    } catch (error) {\n      console.error(\"Error fetching statements:\", error);\n      res.status(500).json({ message: \"Failed to fetch statements\" });\n    }\n  });\n\n  app.post('/api/statements/generate', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { accountId, periodStart, periodEnd, type } = req.body;\n      \n      // Validate account ownership\n      const account = await storage.getAccountById(accountId);\n      if (!account || account.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to account\" });\n      }\n      \n      const statement = await storage.generateAccountStatement(\n        userId,\n        accountId,\n        new Date(periodStart),\n        new Date(periodEnd),\n        type\n      );\n      \n      res.json(statement);\n    } catch (error) {\n      console.error(\"Error generating statement:\", error);\n      res.status(500).json({ message: \"Failed to generate statement\" });\n    }\n  });\n\n  app.get('/api/statements/:id/download/:format', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id, format } = req.params;\n      const userId = req.user.id;\n      \n      // Get user's statements to find the requested one\n      const statements = await storage.getAccountStatementsByUserId(userId);\n      const statement = statements.find(s => s.id === id);\n      if (!statement) {\n        return res.status(404).json({ message: \"Statement not found\" });\n      }\n      \n      // Get account and verify ownership\n      const account = await storage.getAccountById(statement.accountId);\n      if (!account || account.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to statement\" });\n      }\n      \n      // Get transactions for the statement period\n      const transactions = await storage.getTransactionsByAccountIdAndPeriod(\n        statement.accountId, \n        new Date(statement.periodStart), \n        new Date(statement.periodEnd)\n      );\n      \n      const user = req.user;\n      const userName = user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.email;\n      const periodStart = new Date(statement.periodStart).toLocaleDateString();\n      const periodEnd = new Date(statement.periodEnd).toLocaleDateString();\n      \n      if (format === 'pdf') {\n        // Generate PDF using puppeteer\n        const browser = await puppeteer.launch({ \n          headless: true,\n          args: ['--no-sandbox', '--disable-setuid-sandbox']\n        });\n        const page = await browser.newPage();\n        \n        // Create HTML content for PDF\n        const htmlContent = `\n          <!DOCTYPE html>\n          <html>\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Bank Statement</title>\n            <style>\n              body { font-family: Arial, sans-serif; margin: 20px; color: #333; }\n              .header { text-align: center; border-bottom: 2px solid #0066cc; padding-bottom: 20px; margin-bottom: 30px; }\n              .bank-name { font-size: 24px; font-weight: bold; color: #0066cc; margin-bottom: 10px; }\n              .statement-title { font-size: 18px; margin-bottom: 5px; }\n              .account-info { margin: 20px 0; padding: 15px; background-color: #f8f9fa; border-radius: 5px; }\n              .info-row { display: flex; justify-content: space-between; margin: 8px 0; }\n              .info-label { font-weight: bold; }\n              .transactions-section { margin-top: 30px; }\n              .section-title { font-size: 16px; font-weight: bold; color: #0066cc; margin-bottom: 15px; border-bottom: 1px solid #ddd; padding-bottom: 5px; }\n              table { width: 100%; border-collapse: collapse; margin-top: 10px; }\n              th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }\n              th { background-color: #f8f9fa; font-weight: bold; }\n              .amount-credit { color: #28a745; }\n              .amount-debit { color: #dc3545; }\n              .summary { margin-top: 30px; padding: 20px; background-color: #f8f9fa; border-radius: 5px; }\n              .footer { margin-top: 40px; text-align: center; font-size: 12px; color: #666; }\n            </style>\n          </head>\n          <body>\n            <div class=\"header\">\n              <div class=\"bank-name\">Santander Bank</div>\n              <div class=\"statement-title\">Account Statement</div>\n              <div>Statement Period: ${periodStart} - ${periodEnd}</div>\n            </div>\n            \n            <div class=\"account-info\">\n              <div class=\"info-row\">\n                <span class=\"info-label\">Account Holder:</span>\n                <span>${userName}</span>\n              </div>\n              <div class=\"info-row\">\n                <span class=\"info-label\">Account Number:</span>\n                <span>****${account.accountNumber.slice(-4)}</span>\n              </div>\n              <div class=\"info-row\">\n                <span class=\"info-label\">Account Type:</span>\n                <span>${account.accountType.charAt(0).toUpperCase() + account.accountType.slice(1)}</span>\n              </div>\n              <div class=\"info-row\">\n                <span class=\"info-label\">Current Balance:</span>\n                <span>$${parseFloat(account.balance).toLocaleString('en-US', { minimumFractionDigits: 2 })}</span>\n              </div>\n              <div class=\"info-row\">\n                <span class=\"info-label\">Statement Date:</span>\n                <span>${new Date().toLocaleDateString()}</span>\n              </div>\n            </div>\n            \n            <div class=\"transactions-section\">\n              <div class=\"section-title\">Transaction History</div>\n              ${transactions.length > 0 ? `\n                <table>\n                  <thead>\n                    <tr>\n                      <th>Date</th>\n                      <th>Description</th>\n                      <th>Type</th>\n                      <th>Amount</th>\n                      <th>Balance</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    ${transactions.map((transaction: any) => `\n                      <tr>\n                        <td>${new Date(transaction.createdAt).toLocaleDateString()}</td>\n                        <td>${transaction.description}</td>\n                        <td>${transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1)}</td>\n                        <td class=\"${transaction.type === 'credit' ? 'amount-credit' : 'amount-debit'}\">\n                          ${transaction.type === 'credit' ? '+' : '-'}$${parseFloat(transaction.amount).toLocaleString('en-US', { minimumFractionDigits: 2 })}\n                        </td>\n                        <td>$${parseFloat(transaction.balanceAfter).toLocaleString('en-US', { minimumFractionDigits: 2 })}</td>\n                      </tr>\n                    `).join('')}\n                  </tbody>\n                </table>\n              ` : `\n                <p>No transactions found for this period.</p>\n              `}\n            </div>\n            \n            <div class=\"summary\">\n              <div class=\"section-title\">Summary</div>\n              <div class=\"info-row\">\n                <span class=\"info-label\">Total Transactions:</span>\n                <span>${transactions.length}</span>\n              </div>\n              <div class=\"info-row\">\n                <span class=\"info-label\">Total Credits:</span>\n                <span class=\"amount-credit\">+$${transactions.filter((t: any) => t.type === 'credit').reduce((sum: number, t: any) => sum + parseFloat(t.amount), 0).toLocaleString('en-US', { minimumFractionDigits: 2 })}</span>\n              </div>\n              <div class=\"info-row\">\n                <span class=\"info-label\">Total Debits:</span>\n                <span class=\"amount-debit\">-$${transactions.filter((t: any) => t.type === 'debit').reduce((sum: number, t: any) => sum + parseFloat(t.amount), 0).toLocaleString('en-US', { minimumFractionDigits: 2 })}</span>\n              </div>\n            </div>\n            \n            <div class=\"footer\">\n              <p>This statement was generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</p>\n              <p>For questions regarding this statement, please contact customer service.</p>\n            </div>\n          </body>\n          </html>\n        `;\n        \n        await page.setContent(htmlContent);\n        const pdfBuffer = await page.pdf({ \n          format: 'A4', \n          printBackground: true,\n          margin: { top: '20px', bottom: '20px', left: '20px', right: '20px' }\n        });\n        \n        await browser.close();\n        \n        res.setHeader('Content-Type', 'application/pdf');\n        res.setHeader('Content-Disposition', `attachment; filename=\"statement_${account.accountNumber}_${periodStart.replace(/\\//g, '-')}_to_${periodEnd.replace(/\\//g, '-')}.pdf\"`);\n        res.send(pdfBuffer);\n        \n      } else if (format === 'excel') {\n        // Generate Excel file using ExcelJS\n        const workbook = new ExcelJS.Workbook();\n        const worksheet = workbook.addWorksheet('Account Statement');\n        \n        // Set column widths\n        worksheet.columns = [\n          { header: 'Date', key: 'date', width: 15 },\n          { header: 'Description', key: 'description', width: 30 },\n          { header: 'Type', key: 'type', width: 15 },\n          { header: 'Amount', key: 'amount', width: 15 },\n          { header: 'Balance', key: 'balance', width: 15 }\n        ];\n        \n        // Add title and account info\n        worksheet.mergeCells('A1:E1');\n        worksheet.getCell('A1').value = 'SANTANDER BANK - ACCOUNT STATEMENT';\n        worksheet.getCell('A1').font = { size: 16, bold: true };\n        worksheet.getCell('A1').alignment = { horizontal: 'center' };\n        \n        worksheet.mergeCells('A3:E3');\n        worksheet.getCell('A3').value = `Account Holder: ${userName}`;\n        worksheet.getCell('A3').font = { bold: true };\n        \n        worksheet.mergeCells('A4:E4');\n        worksheet.getCell('A4').value = `Account Number: ****${account.accountNumber.slice(-4)}`;\n        \n        worksheet.mergeCells('A5:E5');\n        worksheet.getCell('A5').value = `Statement Period: ${periodStart} - ${periodEnd}`;\n        \n        worksheet.mergeCells('A6:E6');\n        worksheet.getCell('A6').value = `Current Balance: $${parseFloat(account.balance).toLocaleString('en-US', { minimumFractionDigits: 2 })}`;\n        worksheet.getCell('A6').font = { bold: true };\n        \n        // Add header row for transactions\n        const headerRow = worksheet.getRow(8);\n        headerRow.values = ['Date', 'Description', 'Type', 'Amount', 'Balance'];\n        headerRow.font = { bold: true };\n        headerRow.fill = {\n          type: 'pattern',\n          pattern: 'solid',\n          fgColor: { argb: 'FFE6F3FF' }\n        };\n        \n        // Add transaction data\n        transactions.forEach((transaction: any, index: number) => {\n          const row = worksheet.getRow(9 + index);\n          row.values = [\n            new Date(transaction.createdAt).toLocaleDateString(),\n            transaction.description,\n            transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1),\n            `${transaction.type === 'credit' ? '+' : '-'}$${parseFloat(transaction.amount).toLocaleString('en-US', { minimumFractionDigits: 2 })}`,\n            `$${parseFloat(transaction.balanceAfter).toLocaleString('en-US', { minimumFractionDigits: 2 })}`\n          ];\n          \n          // Color code amounts\n          if (transaction.type === 'credit') {\n            row.getCell(4).font = { color: { argb: 'FF00AA00' } };\n          } else {\n            row.getCell(4).font = { color: { argb: 'FFAA0000' } };\n          }\n        });\n        \n        // Add summary section\n        const summaryStartRow = 10 + transactions.length;\n        worksheet.mergeCells(`A${summaryStartRow}:E${summaryStartRow}`);\n        worksheet.getCell(`A${summaryStartRow}`).value = 'SUMMARY';\n        worksheet.getCell(`A${summaryStartRow}`).font = { size: 14, bold: true };\n        worksheet.getCell(`A${summaryStartRow}`).alignment = { horizontal: 'center' };\n        \n        worksheet.getCell(`A${summaryStartRow + 2}`).value = 'Total Transactions:';\n        worksheet.getCell(`B${summaryStartRow + 2}`).value = transactions.length;\n        \n        worksheet.getCell(`A${summaryStartRow + 3}`).value = 'Total Credits:';\n        worksheet.getCell(`B${summaryStartRow + 3}`).value = `+$${transactions.filter((t: any) => t.type === 'credit').reduce((sum: number, t: any) => sum + parseFloat(t.amount), 0).toLocaleString('en-US', { minimumFractionDigits: 2 })}`;\n        worksheet.getCell(`B${summaryStartRow + 3}`).font = { color: { argb: 'FF00AA00' } };\n        \n        worksheet.getCell(`A${summaryStartRow + 4}`).value = 'Total Debits:';\n        worksheet.getCell(`B${summaryStartRow + 4}`).value = `-$${transactions.filter((t: any) => t.type === 'debit').reduce((sum: number, t: any) => sum + parseFloat(t.amount), 0).toLocaleString('en-US', { minimumFractionDigits: 2 })}`;\n        worksheet.getCell(`B${summaryStartRow + 4}`).font = { color: { argb: 'FFAA0000' } };\n        \n        // Generate Excel buffer\n        const excelBuffer = await workbook.xlsx.writeBuffer();\n        \n        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n        res.setHeader('Content-Disposition', `attachment; filename=\"statement_${account.accountNumber}_${periodStart.replace(/\\//g, '-')}_to_${periodEnd.replace(/\\//g, '-')}.xlsx\"`);\n        res.send(Buffer.from(excelBuffer));\n        \n      } else {\n        return res.status(400).json({ message: \"Invalid format. Use 'pdf' or 'excel'\" });\n      }\n      \n    } catch (error) {\n      console.error(\"Error downloading statement:\", error);\n      res.status(500).json({ message: \"Failed to download statement\" });\n    }\n  });\n\n  // Enhanced Real-time Chat Routes\n  app.post('/api/chat/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { ticketId, content } = req.body;\n      \n      // Verify ticket ownership or admin access\n      const ticket = await storage.getSupportTicketById(ticketId);\n      if (!ticket || (ticket.userId !== userId && req.user.role !== 'admin')) {\n        return res.status(403).json({ message: \"Access denied to ticket\" });\n      }\n      \n      const message = await storage.createRealTimeChatMessage({\n        ticketId,\n        senderId: userId,\n        content,\n        isFromAdmin: req.user.role === 'admin'\n      });\n      \n      // If admin replied, notify customer immediately\n      if (req.user.role === 'admin' && ticket.userId !== userId) {\n        await storage.notifyCustomerOfAdminResponse(ticketId, ticket.userId, content);\n      }\n      \n      res.json(message);\n    } catch (error) {\n      console.error(\"Error creating chat message:\", error);\n      res.status(500).json({ message: \"Failed to create chat message\" });\n    }\n  });\n\n  app.get('/api/chat/messages/:ticketId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { ticketId } = req.params;\n      const userId = req.user.id;\n      \n      // Verify ticket access\n      const ticket = await storage.getSupportTicketById(ticketId);\n      if (!ticket || (ticket.userId !== userId && req.user.role !== 'admin')) {\n        return res.status(403).json({ message: \"Access denied to ticket\" });\n      }\n      \n      const messages = await storage.getRealTimeChatMessagesByTicketId(ticketId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching chat messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat messages\" });\n    }\n  });\n\n  // Admin Email Templates Routes\n  app.get('/api/admin/email-templates', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const templates = await storage.getEmailTemplates();\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error fetching email templates:\", error);\n      res.status(500).json({ message: \"Failed to fetch email templates\" });\n    }\n  });\n\n  app.post('/api/admin/email-templates', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const template = await storage.createEmailTemplate({\n        ...req.body,\n        createdBy: req.user.id\n      });\n      res.json(template);\n    } catch (error) {\n      console.error(\"Error creating email template:\", error);\n      res.status(500).json({ message: \"Failed to create email template\" });\n    }\n  });\n\n  app.put('/api/admin/email-templates/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const template = await storage.updateEmailTemplate(id, req.body);\n      res.json(template);\n    } catch (error) {\n      console.error(\"Error updating email template:\", error);\n      res.status(500).json({ message: \"Failed to update email template\" });\n    }\n  });\n\n  app.delete('/api/admin/email-templates/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteEmailTemplate(id);\n      res.json({ message: \"Email template deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting email template:\", error);\n      res.status(500).json({ message: \"Failed to delete email template\" });\n    }\n  });\n\n  // Admin Email Configuration Routes\n  app.get('/api/admin/email-configuration', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const configurations = await storage.getEmailConfigurations();\n      res.json(configurations);\n    } catch (error) {\n      console.error(\"Error fetching email configurations:\", error);\n      res.status(500).json({ message: \"Failed to fetch email configurations\" });\n    }\n  });\n\n  app.post('/api/admin/email-configuration', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      // Deactivate other configurations if this one is being set as active\n      if (req.body.isActive) {\n        const existingConfigs = await storage.getEmailConfigurations();\n        for (const config of existingConfigs) {\n          if (config.isActive) {\n            await storage.updateEmailConfiguration(config.id, { isActive: false });\n          }\n        }\n      }\n\n      const configuration = await storage.createEmailConfiguration({\n        ...req.body,\n        createdBy: req.user.id\n      });\n      res.json(configuration);\n    } catch (error) {\n      console.error(\"Error creating email configuration:\", error);\n      res.status(500).json({ message: \"Failed to create email configuration\" });\n    }\n  });\n\n  app.put('/api/admin/email-configuration/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Deactivate other configurations if this one is being set as active\n      if (req.body.isActive) {\n        const existingConfigs = await storage.getEmailConfigurations();\n        for (const config of existingConfigs) {\n          if (config.isActive && config.id !== id) {\n            await storage.updateEmailConfiguration(config.id, { isActive: false });\n          }\n        }\n      }\n\n      const configuration = await storage.updateEmailConfiguration(id, req.body);\n      res.json(configuration);\n    } catch (error) {\n      console.error(\"Error updating email configuration:\", error);\n      res.status(500).json({ message: \"Failed to update email configuration\" });\n    }\n  });\n\n  app.delete('/api/admin/email-configuration/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteEmailConfiguration(id);\n      res.json({ message: \"Email configuration deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting email configuration:\", error);\n      res.status(500).json({ message: \"Failed to delete email configuration\" });\n    }\n  });\n\n  app.post('/api/admin/email-configuration/test', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { configId, testEmail } = req.body;\n      \n      if (!testEmail || !testEmail.includes('@')) {\n        return res.status(400).json({ message: \"Valid test email address is required\" });\n      }\n\n      // Get the configuration\n      const config = await storage.getEmailConfigurations();\n      const targetConfig = config.find(c => c.id === configId);\n      \n      if (!targetConfig) {\n        return res.status(404).json({ message: \"Email configuration not found\" });\n      }\n\n      // Send test email using direct Resend API with the specific configuration\n      const { Resend } = await import('resend');\n      const testResend = new Resend(targetConfig.resendApiKey);\n      \n      try {\n        const result = await testResend.emails.send({\n          from: `${targetConfig.senderName} <${targetConfig.senderEmail}>`,\n          to: [testEmail],\n          subject: 'Test Email from Banking System',\n          html: `\n            <div style=\"font-family: Inter, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n              <div style=\"background-color: #EC0000; color: white; padding: 20px; border-radius: 8px 8px 0 0;\">\n                <h1 style=\"margin: 0; font-size: 24px;\">Banking System Test Email</h1>\n              </div>\n              \n              <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 0 0 8px 8px;\">\n                <h2 style=\"color: #111827; margin: 0 0 20px 0;\">Email Configuration Test</h2>\n                \n                <p style=\"color: #374151; margin: 0 0 15px 0;\">\n                  This is a test email to verify your email configuration is working correctly.\n                </p>\n                \n                <div style=\"background-color: white; padding: 15px; border-radius: 6px; margin: 20px 0;\">\n                  <p style=\"margin: 0; color: #6b7280;\"><strong>Configuration:</strong> ${targetConfig.configName}</p>\n                  <p style=\"margin: 5px 0 0 0; color: #6b7280;\"><strong>Sender:</strong> ${targetConfig.senderName} &lt;${targetConfig.senderEmail}&gt;</p>\n                  <p style=\"margin: 5px 0 0 0; color: #6b7280;\"><strong>Test Time:</strong> ${new Date().toLocaleString()}</p>\n                </div>\n                \n                <p style=\"color: #374151; margin: 20px 0 0 0;\">\n                  If you received this email, your configuration is working properly!\n                </p>\n              </div>\n            </div>\n          `,\n        });\n\n        if (result.error) {\n          throw new Error(`Resend API error: ${result.error.message || JSON.stringify(result.error)}`);\n        }\n        \n        res.json({ message: \"Test email sent successfully\" });\n      } catch (testError) {\n        console.error(\"Test email error:\", testError);\n        res.status(500).json({ message: `Failed to send test email: ${testError.message}` });\n      }\n    } catch (error) {\n      console.error(\"Error sending test email:\", error);\n      res.status(500).json({ message: \"Failed to send test email\" });\n    }\n  });\n\n  // Enhanced Admin Inheritance Management\n  // Enhanced Inheritance Management Routes\n  app.get('/api/admin/inheritance', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const processes = await storage.getInheritanceProcesses();\n      res.json(processes);\n    } catch (error) {\n      console.error(\"Error fetching inheritance processes:\", error);\n      res.status(500).json({ message: \"Failed to fetch inheritance processes\" });\n    }\n  });\n\n  app.put('/api/admin/inheritance/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { status, notes } = req.body;\n      const adminId = req.user.id;\n      \n      // Get the process details first to send notification\n      const processes = await storage.getInheritanceProcesses();\n      const process = processes.find(p => p.id === id);\n      \n      await storage.updateInheritanceProcessStatus(id, status, adminId, notes);\n      \n      if (process && process.deceasedUserId) {\n        // Send notification about inheritance process update\n        let notificationTitle = '';\n        let notificationMessage = '';\n        \n        switch (status) {\n          case 'approved':\n            notificationTitle = 'Inheritance Process Approved';\n            notificationMessage = `Your inheritance process has been approved. The inheritance transfer process will begin shortly. ${notes ? 'Notes: ' + notes : ''}`;\n            break;\n          case 'rejected':\n            notificationTitle = 'Inheritance Process Requires Attention';\n            notificationMessage = `Your inheritance process requires additional documentation or action. Please contact our support team. ${notes ? 'Notes: ' + notes : ''}`;\n            break;\n          case 'completed':\n            notificationTitle = 'Inheritance Process Completed';\n            notificationMessage = `Your inheritance process has been successfully completed. All assets have been transferred according to the inheritance plan. ${notes ? 'Notes: ' + notes : ''}`;\n            break;\n          case 'document_review':\n            notificationTitle = 'Documents Under Review';\n            notificationMessage = `Your inheritance documentation is currently under review by our legal team. We will update you once the review is complete. ${notes ? 'Notes: ' + notes : ''}`;\n            break;\n          default:\n            notificationTitle = 'Inheritance Process Update';\n            notificationMessage = `Your inheritance process status has been updated to: ${status}. ${notes ? 'Notes: ' + notes : ''}`;\n        }\n        \n        // Get all beneficiaries to notify them as well\n        const beneficiaries = await storage.getBeneficiariesByUserId(process.deceasedUserId);\n        const beneficiaryIds = beneficiaries.map(b => b.userId).filter(Boolean);\n        \n        // Send notification to all relevant parties\n        const notificationUserIds = [process.deceasedUserId, ...beneficiaryIds].filter(Boolean);\n        \n        if (notificationUserIds.length > 0) {\n          await storage.sendNotificationToMultipleUsers(\n            notificationUserIds,\n            notificationTitle,\n            notificationMessage,\n            'admin_response',\n            {\n              inheritanceProcessId: id,\n              status,\n              notes,\n              processedBy: adminId\n            }\n          );\n        }\n      }\n      \n      // If approved, process automatic inheritance\n      if (status === 'completed') {\n        console.log(`Inheritance process ${id} completed by admin ${adminId}`);\n      }\n      \n      res.json({ message: \"Inheritance process updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating inheritance process:\", error);\n      res.status(500).json({ message: \"Failed to update inheritance process\" });\n    }\n  });\n\n  // Inheritance Disputes Routes\n  app.get('/api/admin/inheritance/disputes', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { processId } = req.query;\n      const disputes = await storage.getInheritanceDisputes(processId as string);\n      res.json(disputes);\n    } catch (error) {\n      console.error(\"Error fetching inheritance disputes:\", error);\n      res.status(500).json({ message: \"Failed to fetch inheritance disputes\" });\n    }\n  });\n\n  app.post('/api/admin/inheritance/disputes', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { inheritanceProcessId, disputantUserId, disputeType, description, supportingDocumentsUrls } = req.body;\n      \n      const dispute = await storage.createInheritanceDispute({\n        inheritanceProcessId,\n        disputantUserId,\n        disputeType,\n        description,\n        supportingDocumentsUrls\n      });\n      \n      res.json(dispute);\n    } catch (error) {\n      console.error(\"Error creating inheritance dispute:\", error);\n      res.status(500).json({ message: \"Failed to create inheritance dispute\" });\n    }\n  });\n\n  app.put('/api/admin/inheritance/disputes/:id/resolve', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { resolution } = req.body;\n      const adminId = req.user.id;\n      \n      await storage.resolveInheritanceDispute(id, resolution, adminId);\n      res.json({ message: \"Dispute resolved successfully\" });\n    } catch (error) {\n      console.error(\"Error resolving inheritance dispute:\", error);\n      res.status(500).json({ message: \"Failed to resolve inheritance dispute\" });\n    }\n  });\n\n  // Ownership Transfer Routes\n  app.get('/api/admin/ownership-transfers', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const requests = await storage.getOwnershipTransferRequests();\n      res.json(requests);\n    } catch (error) {\n      console.error(\"Error fetching ownership transfer requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch ownership transfer requests\" });\n    }\n  });\n\n  app.post('/api/admin/ownership-transfers', isAuthenticated, async (req: any, res) => {\n    try {\n      const { accountId, targetUserEmail, requestType, reason, ownershipPercentage, supportingDocumentsUrls } = req.body;\n      const requesterId = req.user.id;\n      \n      const request = await storage.createOwnershipTransferRequest({\n        accountId,\n        requesterId,\n        targetUserEmail,\n        requestType,\n        reason,\n        ownershipPercentage,\n        supportingDocumentsUrls\n      });\n      \n      res.json(request);\n    } catch (error) {\n      console.error(\"Error creating ownership transfer request:\", error);\n      res.status(500).json({ message: \"Failed to create ownership transfer request\" });\n    }\n  });\n\n  app.put('/api/admin/ownership-transfers/:id/review', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { decision, notes } = req.body;\n      const adminId = req.user.id;\n      \n      await storage.reviewOwnershipTransferRequest(id, decision, adminId, notes);\n      res.json({ message: \"Ownership transfer request reviewed successfully\" });\n    } catch (error) {\n      console.error(\"Error reviewing ownership transfer request:\", error);\n      res.status(500).json({ message: \"Failed to review ownership transfer request\" });\n    }\n  });\n\n  // Document Verification Routes\n  app.get('/api/admin/document-verifications', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { relatedEntityId } = req.query;\n      const verifications = await storage.getDocumentVerifications(relatedEntityId as string);\n      res.json(verifications);\n    } catch (error) {\n      console.error(\"Error fetching document verifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch document verifications\" });\n    }\n  });\n\n  app.post('/api/admin/document-verifications', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { relatedEntityId, relatedEntityType, documentType, documentUrl, verificationStatus, verificationNotes, rejectionReason } = req.body;\n      const verifiedBy = req.user.id;\n      \n      const verification = await storage.verifyDocument({\n        relatedEntityId,\n        relatedEntityType,\n        documentType,\n        documentUrl,\n        verificationStatus,\n        verifiedBy,\n        verificationNotes,\n        rejectionReason\n      });\n      \n      res.json(verification);\n    } catch (error) {\n      console.error(\"Error verifying document:\", error);\n      res.status(500).json({ message: \"Failed to verify document\" });\n    }\n  });\n\n  // Enhanced Notification System Routes\n  \n  // Customer notification routes\n  app.get('/api/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const notifications = await storage.getNotificationsByUserId(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.get('/api/notifications/unread-count', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const count = await storage.getUnreadNotificationCount(userId);\n      res.json({ count });\n    } catch (error) {\n      console.error(\"Error fetching unread count:\", error);\n      res.status(500).json({ message: \"Failed to fetch unread count\" });\n    }\n  });\n\n  app.get('/api/notifications/recent-admin-responses', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const limit = parseInt(req.query.limit as string) || 5;\n      const recentResponses = await storage.getRecentAdminResponses(userId, limit);\n      res.json(recentResponses);\n    } catch (error) {\n      console.error(\"Error fetching recent admin responses:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent admin responses\" });\n    }\n  });\n\n  app.put('/api/notifications/:id/read', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.id;\n      await storage.markNotificationAsRead(id, userId);\n      res.json({ message: \"Notification marked as read\" });\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.put('/api/notifications/mark-all-read', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      await storage.markAllNotificationsAsRead(userId);\n      res.json({ message: \"All notifications marked as read\" });\n    } catch (error) {\n      console.error(\"Error marking all notifications as read:\", error);\n      res.status(500).json({ message: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n  app.delete('/api/notifications/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.id;\n      await storage.deleteNotification(id, userId);\n      res.json({ message: \"Notification deleted\" });\n    } catch (error) {\n      console.error(\"Error deleting notification:\", error);\n      res.status(500).json({ message: \"Failed to delete notification\" });\n    }\n  });\n\n  // Admin notification management routes\n  app.post('/api/admin/notifications/send', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { userId, title, message, type, metadata } = req.body;\n      \n      if (!userId || !title || !message) {\n        return res.status(400).json({ message: \"userId, title, and message are required\" });\n      }\n      \n      const notification = await storage.createAdminNotificationForUser(userId, title, message, type, metadata);\n      res.json(notification);\n    } catch (error) {\n      console.error(\"Error sending notification:\", error);\n      res.status(500).json({ message: \"Failed to send notification\" });\n    }\n  });\n\n  app.post('/api/admin/notifications/send-bulk', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { userIds, title, message, type, metadata } = req.body;\n      \n      if (!userIds || !Array.isArray(userIds) || userIds.length === 0 || !title || !message) {\n        return res.status(400).json({ message: \"userIds (array), title, and message are required\" });\n      }\n      \n      const notifications = await storage.sendNotificationToMultipleUsers(userIds, title, message, type, metadata);\n      res.json({ message: `Sent ${notifications.length} notifications`, notifications });\n    } catch (error) {\n      console.error(\"Error sending bulk notifications:\", error);\n      res.status(500).json({ message: \"Failed to send bulk notifications\" });\n    }\n  });\n\n  app.post('/api/admin/notifications/send-to-all', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const { title, message, type, metadata } = req.body;\n      \n      if (!title || !message) {\n        return res.status(400).json({ message: \"title and message are required\" });\n      }\n      \n      // Get all customer user IDs (non-admin users)\n      const customers = await storage.getAllCustomers();\n      const customerIds = customers.map(customer => customer.id);\n      \n      if (customerIds.length === 0) {\n        return res.json({ message: \"No customers found to send notifications to\" });\n      }\n      \n      const notifications = await storage.sendNotificationToMultipleUsers(customerIds, title, message, type || 'admin_announcement', metadata);\n      res.json({ message: `Sent ${notifications.length} notifications to all customers`, notifications });\n    } catch (error) {\n      console.error(\"Error sending notifications to all customers:\", error);\n      res.status(500).json({ message: \"Failed to send notifications to all customers\" });\n    }\n  });\n\n  // Joint Accounts Management Routes\n  app.get('/api/accounts/joint', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const jointAccounts = await storage.getJointAccountsByUserId(userId);\n      res.json(jointAccounts);\n    } catch (error) {\n      console.error(\"Error fetching joint accounts:\", error);\n      res.status(500).json({ message: \"Failed to fetch joint accounts\" });\n    }\n  });\n\n  app.post('/api/accounts/joint/add-owner', isAuthenticated, async (req: any, res) => {\n    try {\n      const requesterId = req.user.id;\n      const { accountId, targetUserEmail, ownershipPercentage, permissions, notes } = req.body;\n      \n      // Create ownership request\n      const request = await storage.createOwnershipRequest({\n        accountId,\n        requesterId,\n        targetUserEmail,\n        requestType: 'add_joint_owner',\n        ownershipPercentage,\n        permissions,\n        notes\n      });\n      \n      res.json(request);\n    } catch (error) {\n      console.error(\"Error creating joint owner request:\", error);\n      res.status(500).json({ message: \"Failed to create joint owner request\" });\n    }\n  });\n\n  app.post('/api/accounts/transfer-ownership', isAuthenticated, async (req: any, res) => {\n    try {\n      const requesterId = req.user.id;\n      const { accountId, newOwnerEmail, notes } = req.body;\n      \n      // Create ownership transfer request\n      const request = await storage.createOwnershipRequest({\n        accountId,\n        requesterId,\n        targetUserEmail: newOwnerEmail,\n        requestType: 'transfer_ownership',\n        notes\n      });\n      \n      res.json(request);\n    } catch (error) {\n      console.error(\"Error creating ownership transfer request:\", error);\n      res.status(500).json({ message: \"Failed to create ownership transfer request\" });\n    }\n  });\n\n  // Ownership Requests Routes\n  app.get('/api/ownership/requests', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const requests = await storage.getOwnershipRequestsByUserId(userId);\n      res.json(requests);\n    } catch (error) {\n      console.error(\"Error fetching ownership requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch ownership requests\" });\n    }\n  });\n\n  app.put('/api/ownership/requests/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { action, notes } = req.body;\n      const userId = req.user.id;\n      \n      if (!['approve', 'reject'].includes(action)) {\n        return res.status(400).json({ message: \"Invalid action\" });\n      }\n      \n      const request = await storage.respondToOwnershipRequest(id, action, userId, notes);\n      \n      // If approved, process the request\n      if (action === 'approve') {\n        if (request.requestType === 'add_joint_owner') {\n          await storage.addJointAccountOwner(request.accountId, request.targetUserId, request.ownershipPercentage, request.permissions);\n        } else if (request.requestType === 'transfer_ownership') {\n          await storage.transferAccountOwnership(request.accountId, request.targetUserId);\n        }\n      }\n      \n      res.json({ message: `Request ${action}d successfully` });\n    } catch (error) {\n      console.error(\"Error responding to ownership request:\", error);\n      res.status(500).json({ message: \"Failed to respond to ownership request\" });\n    }\n  });\n\n  // Enhanced Inheritance Routes\n  app.get('/api/inheritance/processes', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const processes = await storage.getInheritanceProcessesByUser(userId);\n      res.json(processes);\n    } catch (error) {\n      console.error(\"Error fetching inheritance processes:\", error);\n      res.status(500).json({ message: \"Failed to fetch inheritance processes\" });\n    }\n  });\n\n  app.post('/api/inheritance/initiate', isAuthenticated, async (req: any, res) => {\n    try {\n      const initiatorId = req.user.id;\n      const { deceasedEmail, relationship, deathDate, notes } = req.body;\n      \n      // Find deceased user\n      const deceasedUser = await storage.getUserByEmail(deceasedEmail);\n      if (!deceasedUser) {\n        return res.status(404).json({ message: \"Deceased user not found\" });\n      }\n      \n      const process = await storage.createInheritanceProcess({\n        deceasedUserId: deceasedUser.id,\n        initiatorId,\n        relationship,\n        deathDate,\n        notes\n      });\n      \n      res.json(process);\n    } catch (error) {\n      console.error(\"Error initiating inheritance process:\", error);\n      res.status(500).json({ message: \"Failed to initiate inheritance process\" });\n    }\n  });\n\n  app.post('/api/inheritance/documents', isAuthenticated, async (req: any, res) => {\n    try {\n      // This would handle file uploads - in a real app you'd use multer or similar\n      const { processId } = req.body;\n      const userId = req.user.id;\n      \n      // Verify user has access to this process\n      const process = await storage.getInheritanceProcessById(processId);\n      if (!process || (process.initiatorId !== userId && !process.beneficiaries.some(b => b.beneficiaryId === userId))) {\n        return res.status(403).json({ message: \"Access denied to inheritance process\" });\n      }\n      \n      // For now, we'll simulate document upload\n      const document = {\n        inheritanceId: processId,\n        documentType: 'death_certificate',\n        fileName: 'death_certificate.pdf',\n        fileUrl: '/uploads/death_certificate.pdf',\n        status: 'pending'\n      };\n      \n      const savedDocument = await storage.createInheritanceDocument(document);\n      res.json(savedDocument);\n    } catch (error) {\n      console.error(\"Error uploading inheritance documents:\", error);\n      res.status(500).json({ message: \"Failed to upload documents\" });\n    }\n  });\n\n  app.post('/api/inheritance/respond/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { accept } = req.body;\n      const userId = req.user.id;\n      \n      await storage.respondToInheritanceClaim(id, userId, accept);\n      \n      res.json({ message: accept ? \"Inheritance accepted\" : \"Inheritance declined\" });\n    } catch (error) {\n      console.error(\"Error responding to inheritance:\", error);\n      res.status(500).json({ message: \"Failed to respond to inheritance\" });\n    }\n  });\n\n  return server;\n}\n","size_bytes":112934},"server/seed.ts":{"content":"import { db } from './db';\nimport { users, accounts, transfers, transactions, auditLogs, emailNotifications } from '@shared/schema';\nimport { hashPassword } from './auth';\nimport { storage } from './storage';\nimport { eq } from 'drizzle-orm';\n\nexport async function seedDatabase() {\n  console.log('🌱 Starting database seed...');\n\n  try {\n    // Get existing admin user data before clearing\n    const existingAdmins = await db.select().from(users).where(eq(users.role, 'admin'));\n    \n    // Clear existing data completely\n    await db.delete(emailNotifications);\n    await db.delete(auditLogs);\n    await db.delete(transactions);\n    await db.delete(transfers);\n    await db.delete(accounts);\n    await db.delete(users);\n    \n    // Recreate admin user\n    let adminUserId: string;\n    if (existingAdmins.length > 0) {\n      // Recreate the existing admin\n      const [admin] = await db.insert(users).values(existingAdmins[0]).returning();\n      adminUserId = admin.id;\n      console.log('✅ Recreated existing admin user');\n    } else {\n      // Create new admin user\n      const hashedPassword = await hashPassword('admin123');\n      const [newAdmin] = await db.insert(users).values({\n        email: 'admin@admin.com',\n        password: hashedPassword,\n        firstName: 'Admin',\n        lastName: 'User',\n        role: 'admin',\n      }).returning();\n      adminUserId = newAdmin.id;\n      console.log('✅ Created new admin user');\n    }\n\n    // Create realistic customer data\n    const customerData = [\n      {\n        email: 'john.doe@email.com',\n        password: await hashPassword('password123'),\n        firstName: 'John',\n        lastName: 'Doe',\n        role: 'customer' as const,\n      },\n      {\n        email: 'jane.smith@email.com',\n        password: await hashPassword('password123'),\n        firstName: 'Jane',\n        lastName: 'Smith',\n        role: 'customer' as const,\n      },\n      {\n        email: 'michael.johnson@email.com',\n        password: await hashPassword('password123'),\n        firstName: 'Michael',\n        lastName: 'Johnson',\n        role: 'customer' as const,\n      },\n      {\n        email: 'sarah.williams@email.com',\n        password: await hashPassword('password123'),\n        firstName: 'Sarah',\n        lastName: 'Williams',\n        role: 'customer' as const,\n      },\n      {\n        email: 'david.brown@email.com',\n        password: await hashPassword('password123'),\n        firstName: 'David',\n        lastName: 'Brown',\n        role: 'customer' as const,\n      }\n    ];\n\n    // Insert customers and capture their IDs\n    const createdCustomers = [];\n    for (const customer of customerData) {\n      const [newCustomer] = await db.insert(users).values(customer).returning();\n      createdCustomers.push(newCustomer);\n    }\n    console.log('✅ Created customer users');\n\n    // Create bank accounts with realistic balances using actual customer IDs\n    const accountData = [\n      {\n        userId: createdCustomers[0].id, // John Doe\n        accountNumber: '1234567890',\n        accountType: 'checking',\n        balance: '15420.75',\n        status: 'active' as const,\n      },\n      {\n        userId: createdCustomers[0].id, // John Doe\n        accountNumber: '1234567891',\n        accountType: 'savings',\n        balance: '45230.25',\n        status: 'active' as const,\n      },\n      {\n        userId: createdCustomers[1].id, // Jane Smith\n        accountNumber: '2345678901',\n        accountType: 'checking',\n        balance: '8750.50',\n        status: 'active' as const,\n      },\n      {\n        userId: createdCustomers[1].id, // Jane Smith\n        accountNumber: '2345678902',\n        accountType: 'savings',\n        balance: '23100.00',\n        status: 'frozen' as const,\n      },\n      {\n        userId: createdCustomers[2].id, // Michael Johnson\n        accountNumber: '3456789012',\n        accountType: 'checking',\n        balance: '2890.35',\n        status: 'active' as const,\n      },\n      {\n        userId: createdCustomers[3].id, // Sarah Williams\n        accountNumber: '4567890123',\n        accountType: 'checking',\n        balance: '67890.80',\n        status: 'active' as const,\n      },\n      {\n        userId: createdCustomers[3].id, // Sarah Williams\n        accountNumber: '4567890124',\n        accountType: 'savings',\n        balance: '125000.00',\n        status: 'active' as const,\n      },\n      {\n        userId: createdCustomers[4].id, // David Brown\n        accountNumber: '5678901234',\n        accountType: 'checking',\n        balance: '0.00',\n        status: 'closed' as const,\n      },\n    ];\n\n    const createdAccounts = [];\n    for (const account of accountData) {\n      const [newAccount] = await db.insert(accounts).values(account).returning();\n      createdAccounts.push(newAccount);\n    }\n    console.log('✅ Created bank accounts');\n\n    // Create realistic transaction history\n    const transactionData = [];\n    \n    // Transactions for John Doe (customer-001)\n    const johnCheckingAccount = createdAccounts.find(a => a.accountNumber === '1234567890');\n    const johnSavingsAccount = createdAccounts.find(a => a.accountNumber === '1234567891');\n    \n    if (johnCheckingAccount) {\n      transactionData.push(\n        {\n          accountId: johnCheckingAccount.id,\n          type: 'credit',\n          amount: '2500.00',\n          description: 'Salary Deposit',\n          balanceAfter: '15420.75',\n          createdAt: new Date('2024-08-20T10:00:00Z'),\n        },\n        {\n          accountId: johnCheckingAccount.id,\n          type: 'debit',\n          amount: '1200.00',\n          description: 'Rent Payment',\n          balanceAfter: '14220.75',\n          createdAt: new Date('2024-08-19T14:30:00Z'),\n        },\n        {\n          accountId: johnCheckingAccount.id,\n          type: 'debit',\n          amount: '85.50',\n          description: 'Grocery Store',\n          balanceAfter: '15306.25',\n          createdAt: new Date('2024-08-18T18:45:00Z'),\n        },\n        {\n          accountId: johnCheckingAccount.id,\n          type: 'debit',\n          amount: '45.00',\n          description: 'Gas Station',\n          balanceAfter: '15351.25',\n          createdAt: new Date('2024-08-17T12:15:00Z'),\n        }\n      );\n    }\n\n    if (johnSavingsAccount) {\n      transactionData.push(\n        {\n          accountId: johnSavingsAccount.id,\n          type: 'credit',\n          amount: '5000.00',\n          description: 'Investment Dividend',\n          balanceAfter: '45230.25',\n          createdAt: new Date('2024-08-15T09:00:00Z'),\n        }\n      );\n    }\n\n    // Transactions for Jane Smith (customer-002)\n    const janeCheckingAccount = createdAccounts.find(a => a.accountNumber === '2345678901');\n    if (janeCheckingAccount) {\n      transactionData.push(\n        {\n          accountId: janeCheckingAccount.id,\n          type: 'credit',\n          amount: '3200.00',\n          description: 'Salary Deposit',\n          balanceAfter: '8750.50',\n          createdAt: new Date('2024-08-21T08:00:00Z'),\n        },\n        {\n          accountId: janeCheckingAccount.id,\n          type: 'debit',\n          amount: '950.00',\n          description: 'Credit Card Payment',\n          balanceAfter: '7800.50',\n          createdAt: new Date('2024-08-20T16:20:00Z'),\n        }\n      );\n    }\n\n    // Transactions for Michael Johnson (customer-003)\n    const michaelAccount = createdAccounts.find(a => a.accountNumber === '3456789012');\n    if (michaelAccount) {\n      transactionData.push(\n        {\n          accountId: michaelAccount.id,\n          type: 'credit',\n          amount: '1800.00',\n          description: 'Freelance Payment',\n          balanceAfter: '2890.35',\n          createdAt: new Date('2024-08-22T11:30:00Z'),\n        },\n        {\n          accountId: michaelAccount.id,\n          type: 'debit',\n          amount: '125.75',\n          description: 'Utility Bill',\n          balanceAfter: '2764.60',\n          createdAt: new Date('2024-08-21T13:45:00Z'),\n        }\n      );\n    }\n\n    // Insert transactions\n    for (const transaction of transactionData) {\n      await db.insert(transactions).values(transaction);\n    }\n    console.log('✅ Created transaction history');\n\n    // Create sample transfers with different statuses\n    const transferData = [\n      {\n        fromAccountId: johnCheckingAccount?.id || '',\n        toAccountNumber: '9876543210',\n        toRoutingNumber: '011075150',\n        toBankName: 'Chase Bank',\n        toAccountHolderName: 'Alice Wilson',\n        amount: '500.00',\n        fee: '2.50',\n        tax: '5.00',\n        description: 'Birthday gift',\n        status: 'verification_required' as const,\n        createdAt: new Date('2024-08-23T14:20:00Z'),\n      },\n      {\n        fromAccountId: janeCheckingAccount?.id || '',\n        toAccountNumber: '1111222233',\n        toRoutingNumber: '021000021',\n        toBankName: 'Bank of America',\n        toAccountHolderName: 'Robert Taylor',\n        amount: '1500.00',\n        fee: '7.50',\n        tax: '15.00',\n        description: 'Loan repayment',\n        status: 'completed' as const,\n        approvedBy: adminUserId,\n        approvedAt: new Date('2024-08-22T10:00:00Z'),\n        completedAt: new Date('2024-08-22T10:05:00Z'),\n        createdAt: new Date('2024-08-22T09:45:00Z'),\n      },\n      {\n        fromAccountId: michaelAccount?.id || '',\n        toAccountNumber: '5555666677',\n        toRoutingNumber: '031000503',\n        toBankName: 'Wells Fargo',\n        toAccountHolderName: 'Emma Davis',\n        amount: '2000.00',\n        fee: '10.00',\n        tax: '20.00',\n        description: 'Contract payment',\n        status: 'rejected' as const,\n        rejectionReason: 'Insufficient documentation provided',\n        approvedBy: adminUserId,\n        approvedAt: new Date('2024-08-21T15:30:00Z'),\n        createdAt: new Date('2024-08-21T14:00:00Z'),\n      }\n    ];\n\n    for (const transfer of transferData) {\n      if (transfer.fromAccountId) {\n        await db.insert(transfers).values(transfer);\n      }\n    }\n    console.log('✅ Created sample transfers');\n\n    // Create audit logs using actual customer IDs\n    const auditData = [\n      {\n        adminId: adminUserId,\n        targetUserId: createdCustomers[1].id, // Jane Smith\n        action: 'account_frozen' as const,\n        details: {\n          accountId: createdAccounts.find(a => a.accountNumber === '2345678902')?.id,\n          reason: 'Suspicious activity detected',\n        },\n        createdAt: new Date('2024-08-21T16:45:00Z'),\n      },\n      {\n        adminId: adminUserId,\n        targetUserId: createdCustomers[4].id, // David Brown\n        action: 'account_closed' as const,\n        details: {\n          accountId: createdAccounts.find(a => a.accountNumber === '5678901234')?.id,\n          reason: 'Account closed at customer request',\n        },\n        createdAt: new Date('2024-08-20T11:20:00Z'),\n      },\n      {\n        adminId: adminUserId,\n        targetUserId: createdCustomers[0].id, // John Doe\n        action: 'balance_credited' as const,\n        details: {\n          accountId: johnSavingsAccount?.id,\n          amount: '5000.00',\n          description: 'Investment Dividend',\n          newBalance: '45230.25',\n        },\n        createdAt: new Date('2024-08-15T09:05:00Z'),\n      }\n    ];\n\n    for (const audit of auditData) {\n      await db.insert(auditLogs).values(audit);\n    }\n    console.log('✅ Created audit logs');\n\n    // Create email notifications using actual customer IDs\n    const emailData = [\n      {\n        userId: createdCustomers[0].id, // John Doe\n        subject: 'Welcome to Santander Bank',\n        body: 'Your new checking account has been created successfully.\\n\\nAccount Number: 1234567890\\nRouting Number: 011075150\\n\\nThank you for choosing Santander Bank.',\n        status: 'sent',\n        sentAt: new Date('2024-08-01T12:00:00Z'),\n      },\n      {\n        userId: createdCustomers[1].id, // Jane Smith\n        subject: 'Account Status Update',\n        body: 'Your savings account (2345678902) has been temporarily frozen due to suspicious activity. Please contact customer service.',\n        status: 'sent',\n        sentAt: new Date('2024-08-21T16:50:00Z'),\n      },\n      {\n        userId: createdCustomers[2].id, // Michael Johnson\n        subject: 'Transfer Rejected',\n        body: 'Your transfer of $2000.00 to Emma Davis has been rejected. Reason: Insufficient documentation provided.',\n        status: 'sent',\n        sentAt: new Date('2024-08-21T15:35:00Z'),\n      }\n    ];\n\n    for (const email of emailData) {\n      await db.insert(emailNotifications).values(email);\n    }\n    console.log('✅ Created email notifications');\n\n    console.log('🎉 Database seeded successfully!');\n    console.log('\\n📊 Seed Data Summary:');\n    console.log('- 1 Admin user (admin@admin.com / admin123)');\n    console.log('- 5 Customer users (password123 for all)');\n    console.log('- 8 Bank accounts with realistic balances');\n    console.log('- 7 Transaction records with history');\n    console.log('- 3 Sample transfers (pending, completed, rejected)');\n    console.log('- 3 Audit log entries');\n    console.log('- 3 Email notifications');\n    console.log('\\n🔐 Test Accounts:');\n    console.log('- john.doe@email.com (2 accounts: checking $15,420.75, savings $45,230.25)');\n    console.log('- jane.smith@email.com (2 accounts: checking $8,750.50, savings $23,100.00 - FROZEN)');\n    console.log('- michael.johnson@email.com (1 account: checking $2,890.35)');\n    console.log('- sarah.williams@email.com (2 accounts: checking $67,890.80, savings $125,000.00)');\n    console.log('- david.brown@email.com (1 account: checking $0.00 - CLOSED)');\n\n  } catch (error) {\n    console.error('❌ Error seeding database:', error);\n    throw error;\n  }\n}\n\n// Run seed if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedDatabase()\n    .then(() => {\n      console.log('✅ Seed completed');\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error('❌ Seed failed:', error);\n      process.exit(1);\n    });\n}","size_bytes":14051},"server/storage.ts":{"content":"import {\n  users,\n  accounts,\n  transfers,\n  transactions,\n  auditLogs,\n  emailNotifications,\n  emailTemplates,\n  emailConfigurations,\n  smtpConfigurations,\n  cards,\n  notifications,\n  billPayments,\n  investments,\n  savingsGoals,\n  supportTickets,\n  chatMessages,\n  standingOrders,\n  customerProfiles,\n  passwordResetTokens,\n  loans,\n  beneficiaries,\n  inheritanceProcesses,\n  inheritanceDocuments,\n  inheritanceBeneficiaries,\n  inheritanceAccounts,\n  inheritanceDisputes,\n  ownershipTransferRequests,\n  documentVerifications,\n  type User,\n  type UpsertUser,\n  type Account,\n  type InsertAccount,\n  type Transfer,\n  type InsertTransfer,\n  type Transaction,\n  type InsertTransaction,\n  type AuditLog,\n  type InsertAuditLog,\n  type EmailNotification,\n  type InsertEmailNotification,\n  type EmailTemplate,\n  type InsertEmailTemplate,\n  type EmailConfiguration,\n  type InsertEmailConfiguration,\n  type SmtpConfiguration,\n  type InsertSmtpConfiguration,\n  type Card,\n  type InsertCard,\n  type Notification,\n  type InsertNotification,\n  type BillPayment,\n  type InsertBillPayment,\n  type Investment,\n  type InsertInvestment,\n  type SavingsGoal,\n  type InsertSavingsGoal,\n  type SupportTicket,\n  type InsertSupportTicket,\n  type ChatMessage,\n  type InsertChatMessage,\n  type StandingOrder,\n  type InsertStandingOrder,\n  type CustomerProfile,\n  type InsertCustomerProfile,\n  type PasswordResetToken,\n  type InsertPasswordResetToken,\n  type Loan,\n  type InsertLoan,\n  type Beneficiary,\n  type InsertBeneficiary,\n  type InheritanceProcess,\n  type InsertInheritanceProcess,\n  type InheritanceDocument,\n  type InsertInheritanceDocument,\n  type InheritanceBeneficiary,\n  type InsertInheritanceBeneficiary,\n  type InheritanceAccount,\n  type InsertInheritanceAccount,\n  type UserRole,\n  type AccountStatus,\n  type TransferStatus,\n  type CardStatus,\n  type LoanStatus,\n  type AuditAction,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, sql } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  createUserWithId(id: string, user: UpsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<UpsertUser>): Promise<User>;\n  \n  // Account operations\n  createAccount(account: InsertAccount): Promise<Account>;\n  getAccountsByUserId(userId: string): Promise<Account[]>;\n  getAccountById(id: string): Promise<Account | undefined>;\n  getAccountByNumber(accountNumber: string): Promise<Account | undefined>;\n  updateAccountBalance(accountId: string, newBalance: string): Promise<Account>;\n  updateAccountStatus(accountId: string, status: AccountStatus): Promise<Account>;\n  \n  // Transfer operations\n  createTransfer(transfer: InsertTransfer): Promise<Transfer>;\n  getTransferById(id: string): Promise<Transfer | undefined>;\n  getTransfersByAccountId(accountId: string): Promise<Transfer[]>;\n  getPendingTransfers(): Promise<Transfer[]>;\n  updateTransferStatus(id: string, status: TransferStatus, rejectionReason?: string, approvedBy?: string): Promise<Transfer>;\n  \n  // Transaction operations\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  getTransactionsByAccountId(accountId: string): Promise<Transaction[]>;\n  \n  // Audit log operations\n  createAuditLog(auditLog: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(): Promise<AuditLog[]>;\n  \n  // Email notification operations\n  createEmailNotification(notification: InsertEmailNotification): Promise<EmailNotification>;\n  getEmailNotificationsByUserId(userId: string): Promise<EmailNotification[]>;\n  \n  // Email configuration operations\n  createEmailConfiguration(config: InsertEmailConfiguration): Promise<EmailConfiguration>;\n  getEmailConfigurations(): Promise<EmailConfiguration[]>;\n  getActiveEmailConfiguration(): Promise<EmailConfiguration | undefined>;\n  updateEmailConfiguration(id: string, config: Partial<InsertEmailConfiguration>): Promise<EmailConfiguration>;\n  deleteEmailConfiguration(id: string): Promise<void>;\n  \n  // Email template operations\n  createEmailTemplate(template: InsertEmailTemplate): Promise<EmailTemplate>;\n  getEmailTemplates(): Promise<EmailTemplate[]>;\n  getEmailTemplateById(id: string): Promise<EmailTemplate | undefined>;\n  updateEmailTemplate(id: string, template: Partial<InsertEmailTemplate>): Promise<EmailTemplate>;\n  deleteEmailTemplate(id: string): Promise<void>;\n  \n  // Admin operations\n  getAllUsers(): Promise<User[]>;\n  getAllAccounts(): Promise<Account[]>;\n  creditAccount(accountId: string, amount: string, description: string, adminId: string): Promise<void>;\n  debitAccount(accountId: string, amount: string, description: string, adminId: string): Promise<void>;\n  getSystemStats(): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.email,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async createUserWithId(id: string, userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        id,\n        ...userData,\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<UpsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        ...userData,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  // Account operations\n  async createAccount(accountData: InsertAccount): Promise<Account> {\n    const [account] = await db\n      .insert(accounts)\n      .values(accountData)\n      .returning();\n    return account;\n  }\n\n  async getAccountsByUserId(userId: string): Promise<Account[]> {\n    return await db\n      .select()\n      .from(accounts)\n      .where(eq(accounts.userId, userId))\n      .orderBy(desc(accounts.createdAt));\n  }\n\n  async getAccountById(id: string): Promise<Account | undefined> {\n    const [account] = await db\n      .select()\n      .from(accounts)\n      .where(eq(accounts.id, id));\n    return account;\n  }\n\n  async getAccountByNumber(accountNumber: string): Promise<Account | undefined> {\n    const [account] = await db\n      .select()\n      .from(accounts)\n      .where(eq(accounts.accountNumber, accountNumber));\n    return account;\n  }\n\n  async updateAccountBalance(accountId: string, newBalance: string): Promise<Account> {\n    const [account] = await db\n      .update(accounts)\n      .set({ \n        balance: newBalance,\n        updatedAt: new Date()\n      })\n      .where(eq(accounts.id, accountId))\n      .returning();\n    return account;\n  }\n\n  async updateAccountStatus(accountId: string, status: AccountStatus): Promise<Account> {\n    const [account] = await db\n      .update(accounts)\n      .set({ \n        status,\n        updatedAt: new Date()\n      })\n      .where(eq(accounts.id, accountId))\n      .returning();\n    return account;\n  }\n\n  // Transfer operations\n  async createTransfer(transferData: InsertTransfer): Promise<Transfer> {\n    const [transfer] = await db\n      .insert(transfers)\n      .values(transferData)\n      .returning();\n    return transfer;\n  }\n\n  async getTransferById(id: string): Promise<Transfer | undefined> {\n    const [transfer] = await db\n      .select()\n      .from(transfers)\n      .where(eq(transfers.id, id));\n    return transfer;\n  }\n\n  async getTransfersByAccountId(accountId: string): Promise<Transfer[]> {\n    return await db\n      .select()\n      .from(transfers)\n      .where(or(\n        eq(transfers.fromAccountId, accountId),\n        eq(transfers.toAccountId, accountId)\n      ))\n      .orderBy(desc(transfers.createdAt));\n  }\n\n  async getPendingTransfers(): Promise<Transfer[]> {\n    return await db\n      .select()\n      .from(transfers)\n      .where(eq(transfers.status, 'verification_required'))\n      .orderBy(desc(transfers.createdAt));\n  }\n\n  async updateTransferStatus(\n    id: string, \n    status: TransferStatus, \n    rejectionReason?: string, \n    approvedBy?: string\n  ): Promise<Transfer> {\n    const updateData: any = { \n      status,\n      updatedAt: new Date()\n    };\n    \n    if (rejectionReason) {\n      updateData.rejectionReason = rejectionReason;\n    }\n    \n    if (approvedBy) {\n      updateData.approvedBy = approvedBy;\n      updateData.approvedAt = new Date();\n    }\n    \n    if (status === 'completed') {\n      updateData.completedAt = new Date();\n    }\n\n    const [transfer] = await db\n      .update(transfers)\n      .set(updateData)\n      .where(eq(transfers.id, id))\n      .returning();\n    return transfer;\n  }\n\n  // Transaction operations\n  async createTransaction(transactionData: InsertTransaction): Promise<Transaction> {\n    const [transaction] = await db\n      .insert(transactions)\n      .values(transactionData)\n      .returning();\n    return transaction;\n  }\n\n\n  // Audit log operations\n  async createAuditLog(auditLogData: InsertAuditLog): Promise<AuditLog> {\n    const [auditLog] = await db\n      .insert(auditLogs)\n      .values(auditLogData)\n      .returning();\n    return auditLog;\n  }\n\n  async getAuditLogs(): Promise<AuditLog[]> {\n    return await db\n      .select()\n      .from(auditLogs)\n      .orderBy(desc(auditLogs.createdAt))\n      .limit(1000); // Limit to latest 1000 entries\n  }\n\n  // Email notification operations\n  async createEmailNotification(notificationData: InsertEmailNotification): Promise<EmailNotification> {\n    const [notification] = await db\n      .insert(emailNotifications)\n      .values(notificationData)\n      .returning();\n    return notification;\n  }\n\n  async getEmailNotificationsByUserId(userId: string): Promise<EmailNotification[]> {\n    return await db\n      .select()\n      .from(emailNotifications)\n      .where(eq(emailNotifications.userId, userId))\n      .orderBy(desc(emailNotifications.sentAt));\n  }\n\n  // Email configuration operations\n  async createEmailConfiguration(configData: InsertEmailConfiguration): Promise<EmailConfiguration> {\n    const [config] = await db\n      .insert(emailConfigurations)\n      .values(configData)\n      .returning();\n    return config;\n  }\n\n  async getEmailConfigurations(): Promise<EmailConfiguration[]> {\n    return await db\n      .select()\n      .from(emailConfigurations)\n      .orderBy(desc(emailConfigurations.createdAt));\n  }\n\n  async getActiveEmailConfiguration(): Promise<EmailConfiguration | undefined> {\n    const [config] = await db\n      .select()\n      .from(emailConfigurations)\n      .where(eq(emailConfigurations.isActive, true))\n      .limit(1);\n    return config;\n  }\n\n  async updateEmailConfiguration(id: string, configData: Partial<InsertEmailConfiguration>): Promise<EmailConfiguration> {\n    const [config] = await db\n      .update(emailConfigurations)\n      .set({ ...configData, updatedAt: new Date() })\n      .where(eq(emailConfigurations.id, id))\n      .returning();\n    return config;\n  }\n\n  async deleteEmailConfiguration(id: string): Promise<void> {\n    await db\n      .delete(emailConfigurations)\n      .where(eq(emailConfigurations.id, id));\n  }\n\n  // Email template operations\n  async createEmailTemplate(templateData: InsertEmailTemplate): Promise<EmailTemplate> {\n    const [template] = await db\n      .insert(emailTemplates)\n      .values(templateData)\n      .returning();\n    return template;\n  }\n\n  async getEmailTemplates(): Promise<EmailTemplate[]> {\n    return await db\n      .select()\n      .from(emailTemplates)\n      .orderBy(desc(emailTemplates.createdAt));\n  }\n\n  async getEmailTemplateById(id: string): Promise<EmailTemplate | undefined> {\n    const [template] = await db\n      .select()\n      .from(emailTemplates)\n      .where(eq(emailTemplates.id, id))\n      .limit(1);\n    return template;\n  }\n\n  async updateEmailTemplate(id: string, templateData: Partial<InsertEmailTemplate>): Promise<EmailTemplate> {\n    const [template] = await db\n      .update(emailTemplates)\n      .set({ ...templateData, updatedAt: new Date() })\n      .where(eq(emailTemplates.id, id))\n      .returning();\n    return template;\n  }\n\n  async deleteEmailTemplate(id: string): Promise<void> {\n    await db\n      .delete(emailTemplates)\n      .where(eq(emailTemplates.id, id));\n  }\n\n  // Admin operations\n  async getAllUsers(): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .orderBy(desc(users.createdAt));\n  }\n\n  async getAllCustomers(): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(eq(users.role, 'customer'))\n      .orderBy(desc(users.createdAt));\n  }\n\n  async getAllAccounts(): Promise<Account[]> {\n    return await db\n      .select()\n      .from(accounts)\n      .orderBy(desc(accounts.createdAt));\n  }\n\n  async creditAccount(accountId: string, amount: string, description: string, adminId: string): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Get current account\n      const [account] = await tx\n        .select()\n        .from(accounts)\n        .where(eq(accounts.id, accountId));\n      \n      if (!account) {\n        throw new Error(\"Account not found\");\n      }\n\n      // Calculate new balance\n      const currentBalance = parseFloat(account.balance);\n      const creditAmount = parseFloat(amount);\n      const newBalance = (currentBalance + creditAmount).toFixed(2);\n\n      // Update account balance\n      await tx\n        .update(accounts)\n        .set({ \n          balance: newBalance,\n          updatedAt: new Date()\n        })\n        .where(eq(accounts.id, accountId));\n\n      // Create transaction record\n      await tx\n        .insert(transactions)\n        .values({\n          accountId,\n          type: 'credit',\n          amount,\n          description,\n          balanceAfter: newBalance,\n        });\n\n      // Create audit log\n      await tx\n        .insert(auditLogs)\n        .values({\n          adminId,\n          targetUserId: account.userId,\n          action: 'balance_credited',\n          details: {\n            accountId,\n            amount,\n            description,\n            newBalance,\n          },\n        });\n    });\n  }\n\n  async debitAccount(accountId: string, amount: string, description: string, adminId: string): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Get current account\n      const [account] = await tx\n        .select()\n        .from(accounts)\n        .where(eq(accounts.id, accountId));\n      \n      if (!account) {\n        throw new Error(\"Account not found\");\n      }\n\n      // Calculate new balance\n      const currentBalance = parseFloat(account.balance);\n      const debitAmount = parseFloat(amount);\n      const newBalance = (currentBalance - debitAmount).toFixed(2);\n\n      // Check for sufficient funds\n      if (parseFloat(newBalance) < 0) {\n        throw new Error(\"Insufficient funds\");\n      }\n\n      // Update account balance\n      await tx\n        .update(accounts)\n        .set({ \n          balance: newBalance,\n          updatedAt: new Date()\n        })\n        .where(eq(accounts.id, accountId));\n\n      // Create transaction record\n      await tx\n        .insert(transactions)\n        .values({\n          accountId,\n          type: 'debit',\n          amount,\n          description,\n          balanceAfter: newBalance,\n        });\n\n      // Create audit log\n      await tx\n        .insert(auditLogs)\n        .values({\n          adminId,\n          targetUserId: account.userId,\n          action: 'balance_debited',\n          details: {\n            accountId,\n            amount,\n            description,\n            newBalance,\n          },\n        });\n    });\n  }\n\n  async getSystemStats(): Promise<any> {\n    try {\n      // Get user statistics\n      const totalUsersResult = await db.select({ count: sql`count(*)` }).from(users);\n      const adminUsersResult = await db.select({ count: sql`count(*)` }).from(users).where(eq(users.role, 'admin'));\n      const customerUsersResult = await db.select({ count: sql`count(*)` }).from(users).where(eq(users.role, 'customer'));\n      const newUsersResult = await db.select({ count: sql`count(*)` }).from(users).where(sql`created_at >= NOW() - INTERVAL '24 hours'`);\n      \n      // Get account statistics\n      const totalAccountsResult = await db.select({ count: sql`count(*)` }).from(accounts);\n      const activeAccountsResult = await db.select({ count: sql`count(*)` }).from(accounts).where(eq(accounts.status, 'active'));\n      const frozenAccountsResult = await db.select({ count: sql`count(*)` }).from(accounts).where(eq(accounts.status, 'frozen'));\n      const closedAccountsResult = await db.select({ count: sql`count(*)` }).from(accounts).where(eq(accounts.status, 'closed'));\n      \n      // Get total balance across all accounts\n      const totalBalanceResult = await db.select({ \n        total: sql`COALESCE(SUM(CAST(balance AS DECIMAL)), 0)` \n      }).from(accounts).where(eq(accounts.status, 'active'));\n      \n      // Get transfer statistics\n      const pendingTransfersResult = await db.select({ count: sql`count(*)` }).from(transfers).where(eq(transfers.status, 'verification_required'));\n      const completedTransfersResult = await db.select({ count: sql`count(*)` }).from(transfers).where(eq(transfers.status, 'completed'));\n      const rejectedTransfersResult = await db.select({ count: sql`count(*)` }).from(transfers).where(eq(transfers.status, 'rejected'));\n      \n      // Get recent transaction count (last 24 hours)\n      const recentTransactionsResult = await db.select({ count: sql`count(*)` }).from(transactions).where(sql`created_at >= NOW() - INTERVAL '24 hours'`);\n      \n      // Get total transaction volume (last 30 days)\n      const transactionVolumeResult = await db.select({ \n        volume: sql`COALESCE(SUM(CAST(amount AS DECIMAL)), 0)` \n      }).from(transactions).where(sql`created_at >= NOW() - INTERVAL '30 days' AND type = 'debit'`);\n      \n      return {\n        users: {\n          total: parseInt(totalUsersResult[0]?.count as string) || 0,\n          admins: parseInt(adminUsersResult[0]?.count as string) || 0,\n          customers: parseInt(customerUsersResult[0]?.count as string) || 0,\n          newToday: parseInt(newUsersResult[0]?.count as string) || 0,\n          activeNow: Math.floor(Math.random() * 50) + 10 // Simulated active users\n        },\n        accounts: {\n          total: parseInt(totalAccountsResult[0]?.count as string) || 0,\n          active: parseInt(activeAccountsResult[0]?.count as string) || 0,\n          frozen: parseInt(frozenAccountsResult[0]?.count as string) || 0,\n          closed: parseInt(closedAccountsResult[0]?.count as string) || 0,\n          totalBalance: parseFloat(totalBalanceResult[0]?.total as string) || 0\n        },\n        transfers: {\n          pending: parseInt(pendingTransfersResult[0]?.count as string) || 0,\n          completed: parseInt(completedTransfersResult[0]?.count as string) || 0,\n          rejected: parseInt(rejectedTransfersResult[0]?.count as string) || 0\n        },\n        transactions: {\n          recentCount: parseInt(recentTransactionsResult[0]?.count as string) || 0,\n          monthlyVolume: parseFloat(transactionVolumeResult[0]?.volume as string) || 0\n        },\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error getting system stats:', error);\n      throw error;\n    }\n  }\n\n  // Cards methods\n  async getCardsByUserId(userId: string): Promise<Card[]> {\n    return await db.select().from(cards).where(eq(cards.userId, userId));\n  }\n\n  async createCard(cardData: InsertCard): Promise<Card> {\n    const [result] = await db.insert(cards).values(cardData).returning();\n    return result;\n  }\n\n  async getCardById(cardId: string): Promise<Card | undefined> {\n    const [result] = await db.select().from(cards).where(eq(cards.id, cardId));\n    return result;\n  }\n\n  async updateCardStatus(cardId: string, status: CardStatus): Promise<void> {\n    await db.update(cards).set({ status }).where(eq(cards.id, cardId));\n  }\n\n  async updateCardLimits(cardId: string, spendingLimit?: string, dailyLimit?: string): Promise<void> {\n    const updateData: any = {};\n    if (spendingLimit) updateData.spendingLimit = spendingLimit;\n    if (dailyLimit) updateData.dailyLimit = dailyLimit;\n    await db.update(cards).set(updateData).where(eq(cards.id, cardId));\n  }\n\n  // Enhanced Notifications methods\n  async getNotificationsByUserId(userId: string): Promise<Notification[]> {\n    return await db.select().from(notifications).where(eq(notifications.userId, userId)).orderBy(desc(notifications.createdAt));\n  }\n\n  async markNotificationAsRead(notificationId: string, userId: string): Promise<void> {\n    await db.update(notifications).set({ status: 'read' }).where(and(eq(notifications.id, notificationId), eq(notifications.userId, userId)));\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    await db.update(notifications).set({ status: 'read' }).where(and(eq(notifications.userId, userId), eq(notifications.status, 'unread')));\n  }\n\n  async createAdminNotificationForUser(userId: string, title: string, message: string, type: string = 'admin_response', metadata?: any): Promise<Notification> {\n    const [notification] = await db.insert(notifications).values({\n      userId,\n      type: type as any,\n      title,\n      message,\n      status: 'unread',\n      metadata: metadata || {},\n    }).returning();\n    return notification;\n  }\n\n  async sendNotificationToMultipleUsers(userIds: string[], title: string, message: string, type: string = 'admin_announcement', metadata?: any): Promise<Notification[]> {\n    const notificationData = userIds.map(userId => ({\n      userId,\n      type: type as any,\n      title,\n      message,\n      status: 'unread' as const,\n      metadata: metadata || {},\n    }));\n    \n    const results = await db.insert(notifications).values(notificationData).returning();\n    return results;\n  }\n\n  async getUnreadNotificationCount(userId: string): Promise<number> {\n    const result = await db.select({ count: sql<number>`count(*)` }).from(notifications)\n      .where(and(eq(notifications.userId, userId), eq(notifications.status, 'unread')));\n    return result[0]?.count || 0;\n  }\n\n  async deleteNotification(notificationId: string, userId: string): Promise<void> {\n    await db.delete(notifications).where(and(eq(notifications.id, notificationId), eq(notifications.userId, userId)));\n  }\n\n  async getRecentAdminResponses(userId: string, limit: number = 5): Promise<Notification[]> {\n    return await db.select().from(notifications)\n      .where(and(\n        eq(notifications.userId, userId),\n        sql`${notifications.type} IN ('admin_response', 'admin_announcement', 'account_update', 'support_response')`\n      ))\n      .orderBy(desc(notifications.createdAt))\n      .limit(limit);\n  }\n\n  // Bill payments methods\n  async getBillPaymentsByUserId(userId: string): Promise<BillPayment[]> {\n    return await db.select().from(billPayments).where(eq(billPayments.userId, userId)).orderBy(desc(billPayments.createdAt));\n  }\n\n  async createBillPayment(billData: InsertBillPayment): Promise<BillPayment> {\n    const [result] = await db.insert(billPayments).values(billData).returning();\n    return result;\n  }\n\n  async getBillPaymentById(billId: string): Promise<BillPayment | undefined> {\n    const [result] = await db.select().from(billPayments).where(eq(billPayments.id, billId));\n    return result;\n  }\n\n  async cancelBillPayment(billId: string): Promise<void> {\n    await db.update(billPayments).set({ status: 'cancelled' }).where(eq(billPayments.id, billId));\n  }\n\n  // Investments methods\n  async getInvestmentsByUserId(userId: string): Promise<Investment[]> {\n    return await db.select().from(investments).where(eq(investments.userId, userId)).orderBy(desc(investments.createdAt));\n  }\n\n  async createInvestment(investmentData: InsertInvestment): Promise<Investment> {\n    const [result] = await db.insert(investments).values(investmentData).returning();\n    return result;\n  }\n\n  // Savings goals methods\n  async getSavingsGoalsByUserId(userId: string): Promise<SavingsGoal[]> {\n    return await db.select().from(savingsGoals).where(eq(savingsGoals.userId, userId)).orderBy(desc(savingsGoals.createdAt));\n  }\n\n  async createSavingsGoal(goalData: InsertSavingsGoal): Promise<SavingsGoal> {\n    const [result] = await db.insert(savingsGoals).values(goalData).returning();\n    return result;\n  }\n\n  // Standing orders methods\n  async getStandingOrdersByUserId(userId: string): Promise<StandingOrder[]> {\n    return await db.select().from(standingOrders).where(eq(standingOrders.userId, userId)).orderBy(desc(standingOrders.createdAt));\n  }\n\n  async createStandingOrder(orderData: InsertStandingOrder): Promise<StandingOrder> {\n    const [result] = await db.insert(standingOrders).values(orderData).returning();\n    return result;\n  }\n\n  async getStandingOrderById(orderId: string): Promise<StandingOrder | undefined> {\n    const [result] = await db.select().from(standingOrders).where(eq(standingOrders.id, orderId));\n    return result;\n  }\n\n  async cancelStandingOrder(orderId: string): Promise<void> {\n    await db.update(standingOrders).set({ isActive: false }).where(eq(standingOrders.id, orderId));\n  }\n\n  // Customer profile methods\n  async getCustomerProfile(userId: string): Promise<CustomerProfile | undefined> {\n    const [result] = await db.select().from(customerProfiles).where(eq(customerProfiles.userId, userId));\n    return result;\n  }\n\n  async updateCustomerProfile(userId: string, profileData: Partial<InsertCustomerProfile>): Promise<CustomerProfile> {\n    const [result] = await db.update(customerProfiles)\n      .set({ ...profileData, updatedAt: new Date() })\n      .where(eq(customerProfiles.userId, userId))\n      .returning();\n    \n    if (!result) {\n      // Create if doesn't exist\n      const [newProfile] = await db.insert(customerProfiles)\n        .values({ userId, ...profileData })\n        .returning();\n      return newProfile;\n    }\n    return result;\n  }\n\n  // Support tickets methods\n  async getSupportTicketsByUserId(userId: string): Promise<SupportTicket[]> {\n    return await db.select().from(supportTickets).where(eq(supportTickets.userId, userId)).orderBy(desc(supportTickets.createdAt));\n  }\n\n  async createSupportTicket(ticketData: InsertSupportTicket): Promise<SupportTicket> {\n    const [result] = await db.insert(supportTickets).values(ticketData).returning();\n    return result;\n  }\n\n  async getSupportTicketById(ticketId: string): Promise<SupportTicket | undefined> {\n    const [result] = await db.select().from(supportTickets).where(eq(supportTickets.id, ticketId));\n    return result;\n  }\n\n  async getChatMessagesByTicketId(ticketId: string): Promise<ChatMessage[]> {\n    return await db.select().from(chatMessages).where(eq(chatMessages.ticketId, ticketId)).orderBy(chatMessages.createdAt);\n  }\n\n  async createChatMessage(messageData: InsertChatMessage): Promise<ChatMessage> {\n    const [result] = await db.insert(chatMessages).values(messageData).returning();\n    return result;\n  }\n\n  async getAllSupportTickets(): Promise<SupportTicket[]> {\n    return await db.select().from(supportTickets).orderBy(desc(supportTickets.createdAt));\n  }\n\n  async updateSupportTicketStatus(ticketId: string, status: string, assignedTo?: string): Promise<void> {\n    const updateData: any = { status, updatedAt: new Date() };\n    if (assignedTo) {\n      updateData.assignedTo = assignedTo;\n    }\n    await db.update(supportTickets).set(updateData).where(eq(supportTickets.id, ticketId));\n  }\n\n  async updateSupportTicket(ticketId: string, updateData: any): Promise<void> {\n    await db.update(supportTickets).set(updateData).where(eq(supportTickets.id, ticketId));\n  }\n\n  // User management methods\n  async deleteUser(userId: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, userId));\n  }\n\n  async updateUser(userId: string, updateData: any): Promise<void> {\n    await db.update(users).set(updateData).where(eq(users.id, userId));\n  }\n\n  // Password reset methods\n  async storePasswordResetToken(userId: string, token: string, expiresAt: Date): Promise<void> {\n    await db.insert(passwordResetTokens).values({\n      userId,\n      token,\n      expiresAt,\n    });\n  }\n\n  async getPasswordResetToken(token: string): Promise<{userId: string, expiresAt: Date} | undefined> {\n    const [result] = await db.select({\n      userId: passwordResetTokens.userId,\n      expiresAt: passwordResetTokens.expiresAt,\n    }).from(passwordResetTokens).where(eq(passwordResetTokens.token, token));\n    return result;\n  }\n\n  async updateUserPassword(userId: string, hashedPassword: string): Promise<void> {\n    await db.update(users).set({ password: hashedPassword }).where(eq(users.id, userId));\n  }\n\n  async deletePasswordResetToken(token: string): Promise<void> {\n    await db.delete(passwordResetTokens).where(eq(passwordResetTokens.token, token));\n  }\n\n  // Enhanced transaction method with date filtering\n  async getTransactionsByAccountId(accountId: string, startDate?: string, endDate?: string): Promise<Transaction[]> {\n    if (startDate && endDate) {\n      return await db.select()\n        .from(transactions)\n        .where(\n          and(\n            eq(transactions.accountId, accountId),\n            sql`${transactions.createdAt} >= ${startDate}`,\n            sql`${transactions.createdAt} <= ${endDate}`\n          )\n        )\n        .orderBy(desc(transactions.createdAt));\n    }\n    \n    return await db.select()\n      .from(transactions)\n      .where(eq(transactions.accountId, accountId))\n      .orderBy(desc(transactions.createdAt));\n  }\n\n  // Loan management methods\n  async getLoansByUserId(userId: string): Promise<Loan[]> {\n    return await db.select().from(loans).where(eq(loans.userId, userId)).orderBy(desc(loans.createdAt));\n  }\n\n  async createLoanApplication(loanData: InsertLoan): Promise<Loan> {\n    const [result] = await db.insert(loans).values(loanData).returning();\n    return result;\n  }\n\n  async getPendingLoans(): Promise<Loan[]> {\n    return await db.select().from(loans).where(eq(loans.status, 'pending')).orderBy(desc(loans.createdAt));\n  }\n\n  async approveLoan(loanId: string, interestRate: string, termMonths: number): Promise<void> {\n    const monthlyPayment = this.calculateMonthlyPayment(loanId, interestRate, termMonths);\n    await db.update(loans).set({\n      status: 'approved',\n      interestRate,\n      termMonths: termMonths.toString(),\n      monthlyPayment: monthlyPayment.toString(),\n      approvedAt: new Date(),\n      updatedAt: new Date(),\n    }).where(eq(loans.id, loanId));\n  }\n\n  async rejectLoan(loanId: string, reason: string): Promise<void> {\n    await db.update(loans).set({\n      status: 'rejected',\n      rejectionReason: reason,\n      updatedAt: new Date(),\n    }).where(eq(loans.id, loanId));\n  }\n\n  private calculateMonthlyPayment(loanId: string, interestRate: string, termMonths: number): number {\n    // This is a simplified calculation - in reality you'd get the loan amount from DB\n    const rate = parseFloat(interestRate) / 100 / 12;\n    const principal = 50000; // Default for demo - should be fetched from loan\n    return (principal * rate * Math.pow(1 + rate, termMonths)) / (Math.pow(1 + rate, termMonths) - 1);\n  }\n\n  // Beneficiary management methods\n  async getBeneficiariesByUserId(userId: string): Promise<Beneficiary[]> {\n    return await db.select().from(beneficiaries).where(eq(beneficiaries.userId, userId)).orderBy(desc(beneficiaries.createdAt));\n  }\n\n  async createBeneficiary(beneficiaryData: InsertBeneficiary): Promise<Beneficiary> {\n    const [result] = await db.insert(beneficiaries).values(beneficiaryData).returning();\n    return result;\n  }\n\n  // Enhanced Inheritance Management Methods\n  async processInheritance(userId: string, deathCertificateUrl: string): Promise<InheritanceProcess> {\n    const [result] = await db.insert(inheritanceProcesses).values({\n      deceasedUserId: userId,\n      deathCertificateUrl,\n      status: 'pending',\n    }).returning();\n    return result;\n  }\n\n  async getInheritanceProcesses(): Promise<any[]> {\n    const processes = await db\n      .select({\n        id: inheritanceProcesses.id,\n        deceasedUserId: inheritanceProcesses.deceasedUserId,\n        deathCertificateUrl: inheritanceProcesses.deathCertificateUrl,\n        status: inheritanceProcesses.status,\n        processedBy: inheritanceProcesses.processedBy,\n        processedAt: inheritanceProcesses.processedAt,\n        notes: inheritanceProcesses.notes,\n        createdAt: inheritanceProcesses.createdAt,\n        updatedAt: inheritanceProcesses.updatedAt,\n        deceasedUserEmail: users.email,\n        deceasedUserName: sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`,\n        processorName: sql<string>`CONCAT(processor.first_name, ' ', processor.last_name)`,\n      })\n      .from(inheritanceProcesses)\n      .leftJoin(users, eq(inheritanceProcesses.deceasedUserId, users.id))\n      .leftJoin(sql`users as processor`, sql`${inheritanceProcesses.processedBy} = processor.id`)\n      .orderBy(desc(inheritanceProcesses.createdAt));\n    \n    return processes;\n  }\n\n  async updateInheritanceProcessStatus(processId: string, status: string, adminId: string, notes?: string): Promise<void> {\n    await db.update(inheritanceProcesses).set({\n      status,\n      notes,\n      processedBy: adminId,\n      processedAt: new Date(),\n      updatedAt: new Date(),\n    }).where(eq(inheritanceProcesses.id, processId));\n\n    // Create audit log\n    await this.createAuditLog({\n      adminId,\n      targetUserId: null,\n      action: 'inheritance_reviewed' as any,\n      details: {\n        processId,\n        newStatus: status,\n        notes,\n      },\n    });\n  }\n\n  async createInheritanceDispute(disputeData: {\n    inheritanceProcessId: string;\n    disputantUserId: string;\n    disputeType: string;\n    description: string;\n    supportingDocumentsUrls?: string[];\n  }): Promise<any> {\n    // Since we're working with existing schema, store disputes as enhanced audit logs for now\n    const dispute = {\n      id: `dispute_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      ...disputeData,\n      status: 'open',\n      createdAt: new Date(),\n    };\n\n    // Create audit log to track dispute\n    await this.createAuditLog({\n      adminId: disputeData.disputantUserId,\n      targetUserId: disputeData.disputantUserId,\n      action: 'inheritance_disputed' as any,\n      details: dispute,\n    });\n\n    return dispute;\n  }\n\n  async getInheritanceDisputes(processId?: string): Promise<any[]> {\n    // Get disputes from audit logs for now\n    const disputes = await db\n      .select()\n      .from(auditLogs)\n      .where(\n        and(\n          eq(auditLogs.action, 'inheritance_disputed' as any),\n          processId ? sql`details->>'inheritanceProcessId' = ${processId}` : undefined\n        )\n      )\n      .orderBy(desc(auditLogs.createdAt));\n\n    return disputes.map(log => ({\n      id: log.id,\n      inheritanceProcessId: (log.details as any)?.inheritanceProcessId,\n      disputantUserId: log.adminId,\n      disputeType: (log.details as any)?.disputeType,\n      description: (log.details as any)?.description,\n      status: (log.details as any)?.status || 'open',\n      createdAt: log.createdAt,\n      details: log.details,\n    }));\n  }\n\n  async resolveInheritanceDispute(disputeId: string, resolution: string, adminId: string): Promise<void> {\n    // Update via audit log\n    await this.createAuditLog({\n      adminId,\n      targetUserId: null,\n      action: 'dispute_resolved' as any,\n      details: {\n        disputeId,\n        resolution,\n        resolvedAt: new Date(),\n      },\n    });\n  }\n\n  async createOwnershipTransferRequest(requestData: {\n    accountId: string;\n    requesterId: string;\n    targetUserEmail: string;\n    requestType: string;\n    reason: string;\n    ownershipPercentage?: string;\n    supportingDocumentsUrls?: string[];\n  }): Promise<any> {\n    // Store as enhanced audit log for now to work with existing schema\n    const transferRequest = {\n      id: `transfer_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      ...requestData,\n      status: 'pending',\n      createdAt: new Date(),\n    };\n\n    await this.createAuditLog({\n      adminId: requestData.requesterId,\n      targetUserId: requestData.requesterId,\n      action: 'ownership_transfer_requested' as any,\n      details: transferRequest,\n    });\n\n    return transferRequest;\n  }\n\n  async getOwnershipTransferRequests(): Promise<any[]> {\n    const requests = await db\n      .select()\n      .from(auditLogs)\n      .where(eq(auditLogs.action, 'ownership_transfer_requested' as any))\n      .orderBy(desc(auditLogs.createdAt));\n\n    return requests.map(log => ({\n      id: log.id,\n      ...(log.details as any),\n      requesterId: log.adminId,\n      createdAt: log.createdAt,\n    }));\n  }\n\n  async reviewOwnershipTransferRequest(requestId: string, decision: string, adminId: string, notes: string): Promise<void> {\n    await this.createAuditLog({\n      adminId,\n      targetUserId: null,\n      action: 'ownership_transfer_reviewed' as any,\n      details: {\n        requestId,\n        decision,\n        notes,\n        reviewedAt: new Date(),\n      },\n    });\n\n    // If approved, handle the actual transfer logic here\n    if (decision === 'approved') {\n      // Implementation would depend on the specific transfer type\n      console.log(`Ownership transfer ${requestId} approved by admin ${adminId}`);\n    }\n  }\n\n  async verifyDocument(verificationData: {\n    relatedEntityId: string;\n    relatedEntityType: string;\n    documentType: string;\n    documentUrl: string;\n    verificationStatus: string;\n    verifiedBy: string;\n    verificationNotes?: string;\n    rejectionReason?: string;\n  }): Promise<any> {\n    // Store document verification as audit log\n    const verification = {\n      id: `doc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      ...verificationData,\n      verifiedAt: new Date(),\n      createdAt: new Date(),\n    };\n\n    await this.createAuditLog({\n      adminId: verificationData.verifiedBy,\n      targetUserId: null,\n      action: 'document_verified' as any,\n      details: verification,\n    });\n\n    return verification;\n  }\n\n  async getDocumentVerifications(relatedEntityId?: string): Promise<any[]> {\n    const verifications = await db\n      .select()\n      .from(auditLogs)\n      .where(\n        and(\n          eq(auditLogs.action, 'document_verified' as any),\n          relatedEntityId ? sql`details->>'relatedEntityId' = ${relatedEntityId}` : undefined\n        )\n      )\n      .orderBy(desc(auditLogs.createdAt));\n\n    return verifications.map(log => ({\n      id: log.id,\n      ...(log.details as any),\n      verifiedBy: log.adminId,\n      createdAt: log.createdAt,\n    }));\n  }\n\n  // KYC Verification Methods\n  async createKycVerification(kycData: any): Promise<any> {\n    // Update customer profile KYC status for now\n    await db.update(customerProfiles)\n      .set({ \n        kycStatus: kycData.status || 'pending',\n        idVerificationStatus: kycData.verificationType === 'id' ? (kycData.status || 'pending') : undefined,\n        updatedAt: new Date()\n      })\n      .where(eq(customerProfiles.userId, kycData.userId));\n    return { id: Date.now().toString(), ...kycData, createdAt: new Date() };\n  }\n\n  async getKycVerificationsByUserId(userId: string): Promise<any[]> {\n    const profile = await db.select().from(customerProfiles).where(eq(customerProfiles.userId, userId));\n    if (profile.length > 0) {\n      const p = profile[0];\n      return [\n        {\n          id: p.id,\n          userId: p.userId,\n          verificationType: 'kyc_status',\n          status: p.kycStatus || 'pending',\n          createdAt: p.createdAt\n        },\n        {\n          id: p.id + '_id',\n          userId: p.userId,\n          verificationType: 'id_verification',\n          status: p.idVerificationStatus || 'pending',\n          createdAt: p.createdAt\n        }\n      ];\n    }\n    return [];\n  }\n\n  async updateKycVerificationStatus(userId: string, verificationType: string, status: string, verifiedBy: string): Promise<void> {\n    const updates: any = { updatedAt: new Date() };\n    if (verificationType === 'kyc_status') {\n      updates.kycStatus = status;\n    } else if (verificationType === 'id_verification') {\n      updates.idVerificationStatus = status;\n    }\n    \n    await db.update(customerProfiles)\n      .set(updates)\n      .where(eq(customerProfiles.userId, userId));\n  }\n\n  // Real-time Chat Methods (Enhanced)\n  async createRealTimeChatMessage(messageData: any): Promise<any> {\n    return await this.createChatMessage({\n      ticketId: messageData.ticketId,\n      senderId: messageData.senderId,\n      message: messageData.content,\n      isFromAdmin: messageData.isFromAdmin || false\n    });\n  }\n\n  async getRealTimeChatMessagesByTicketId(ticketId: string): Promise<any[]> {\n    return await db.select().from(chatMessages)\n      .where(eq(chatMessages.ticketId, ticketId))\n      .orderBy(desc(chatMessages.createdAt));\n  }\n\n  // Account Statements Methods\n  async generateAccountStatement(userId: string, accountId: string, periodStart: Date, periodEnd: Date, type: string): Promise<any> {\n    // Get account transactions for the period\n    const transactions = await db.select()\n      .from(transactions)\n      .where(\n        and(\n          eq(transactions.accountId, accountId),\n          sql`${transactions.createdAt} >= ${periodStart.toISOString()}`,\n          sql`${transactions.createdAt} <= ${periodEnd.toISOString()}`\n        )\n      )\n      .orderBy(desc(transactions.createdAt));\n\n    const account = await this.getAccountById(accountId);\n    \n    return {\n      id: Date.now().toString(),\n      accountId,\n      userId,\n      statementType: type,\n      periodStart,\n      periodEnd,\n      account,\n      transactions,\n      status: 'ready',\n      createdAt: new Date()\n    };\n  }\n\n  async getAccountStatementsByUserId(userId: string): Promise<any[]> {\n    const accounts = await this.getAccountsByUserId(userId);\n    const statements = [];\n    \n    for (const account of accounts) {\n      const endDate = new Date();\n      const startDate = new Date(endDate.getFullYear(), endDate.getMonth() - 1, 1);\n      \n      statements.push({\n        id: `${account.id}_monthly_${endDate.getTime()}`,\n        accountId: account.id,\n        userId,\n        statementType: 'monthly',\n        periodStart: startDate,\n        periodEnd: endDate,\n        status: 'ready',\n        createdAt: new Date()\n      });\n    }\n    \n    return statements;\n  }\n\n  async getAccountStatementById(statementId: string): Promise<any | undefined> {\n    // For now, generate a mock statement since we don't have a statements table\n    // In a real implementation, this would query the statements table\n    const startDate = new Date();\n    startDate.setMonth(startDate.getMonth() - 1);\n    const endDate = new Date();\n    \n    return {\n      id: statementId,\n      accountId: 'mock-account-id', // This would be looked up from actual statement\n      userId: 'mock-user-id',\n      statementType: 'monthly',\n      periodStart: startDate,\n      periodEnd: endDate,\n      status: 'ready',\n      createdAt: new Date()\n    };\n  }\n\n  async getTransactionsByAccountIdAndPeriod(accountId: string, startDate: Date, endDate: Date): Promise<Transaction[]> {\n    return await db.select()\n      .from(transactions)\n      .where(\n        and(\n          eq(transactions.accountId, accountId),\n          sql`${transactions.createdAt} >= ${startDate.toISOString()}`,\n          sql`${transactions.createdAt} <= ${endDate.toISOString()}`\n        )\n      )\n      .orderBy(desc(transactions.createdAt));\n  }\n\n  // Email Templates Methods\n  async getEmailTemplates(): Promise<any[]> {\n    return [\n      {\n        id: '1',\n        name: 'Welcome Email',\n        subject: 'Welcome to Your Bank Account!',\n        templateType: 'welcome',\n        htmlContent: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h1 style=\"color: #2563eb;\">Welcome {{customerName}}!</h1>\n            <p>Your account {{accountNumber}} is now active and ready to use.</p>\n            <p>Thank you for choosing our banking services.</p>\n            <div style=\"background: #f3f4f6; padding: 20px; border-radius: 8px; margin-top: 20px;\">\n              <h3>Next Steps:</h3>\n              <ul>\n                <li>Complete your profile verification</li>\n                <li>Set up your beneficiaries</li>\n                <li>Explore our services</li>\n              </ul>\n            </div>\n          </div>\n        `,\n        variables: ['customerName', 'accountNumber'],\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: '2',\n        name: 'Transfer Confirmation',\n        subject: 'Transfer Confirmation - ${{amount}}',\n        templateType: 'transfer_confirmation',\n        htmlContent: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h1 style=\"color: #059669;\">Transfer Confirmed</h1>\n            <p>Your transfer of <strong>${{amount}}</strong> to {{recipientName}} has been successfully processed.</p>\n            <div style=\"background: #ecfdf5; padding: 15px; border-radius: 8px; margin: 20px 0;\">\n              <p><strong>Transaction ID:</strong> {{transactionId}}</p>\n              <p><strong>Date:</strong> {{transactionDate}}</p>\n            </div>\n          </div>\n        `,\n        variables: ['amount', 'recipientName', 'transactionId', 'transactionDate'],\n        isActive: true,\n        createdAt: new Date()\n      },\n      {\n        id: '4',\n        name: 'Ticket Response',\n        subject: 'Response to Your Support Ticket #{{ticketId}}',\n        templateType: 'ticket_response',\n        htmlContent: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h1 style=\"color: #2563eb;\">Support Team Response</h1>\n            <p>Hello {{customerName}},</p>\n            <p>We have responded to your support ticket <strong>#{{ticketId}}</strong>.</p>\n            <div style=\"background: #f9fafb; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n              <h3>Response:</h3>\n              <p>{{responseMessage}}</p>\n            </div>\n            <p>You can continue the conversation by logging into your account and visiting the support section.</p>\n          </div>\n        `,\n        variables: ['customerName', 'ticketId', 'responseMessage'],\n        isActive: true,\n        createdAt: new Date()\n      }\n    ];\n  }\n\n  // Enhanced Inheritance Process Methods\n  async processAutomaticInheritance(deceasedUserId: string, beneficiaryId: string): Promise<void> {\n    const deceasedAccounts = await this.getAccountsByUserId(deceasedUserId);\n    \n    for (const account of deceasedAccounts) {\n      await db.update(accounts)\n        .set({ userId: beneficiaryId, updatedAt: new Date() })\n        .where(eq(accounts.id, account.id));\n      \n      await this.createAuditLog({\n        adminId: 'system',\n        action: 'inheritance_transfer' as AuditAction,\n        targetUserId: beneficiaryId,\n        details: `Account ${account.accountNumber} inherited from deceased user ${deceasedUserId}`,\n        ipAddress: '127.0.0.1',\n        userAgent: 'system'\n      });\n    }\n  }\n\n  async getInheritanceProcesses(): Promise<InheritanceProcess[]> {\n    return await db.select().from(inheritanceProcesses).orderBy(desc(inheritanceProcesses.createdAt));\n  }\n\n  async updateInheritanceProcessStatus(processId: string, status: string, processedBy?: string): Promise<void> {\n    await db.update(inheritanceProcesses)\n      .set({ \n        status, \n        processedBy, \n        processedAt: new Date(),\n        updatedAt: new Date() \n      })\n      .where(eq(inheritanceProcesses.id, processId));\n  }\n\n  // Notification Methods (Enhanced)\n  async createNotificationForUser(userId: string, title: string, message: string, type: string): Promise<void> {\n    await db.insert(notifications).values({\n      userId,\n      title,\n      message,\n      type: type as NotificationType,\n      status: 'unread' as NotificationStatus\n    });\n  }\n\n  async notifyCustomerOfAdminResponse(ticketId: string, customerId: string, responseMessage: string): Promise<void> {\n    // Create notification\n    await this.createNotificationForUser(\n      customerId, \n      'New Support Response', \n      `You have received a response to your support ticket: ${responseMessage.substring(0, 100)}...`,\n      'support'\n    );\n\n    console.log(`Email notification would be sent to customer ${customerId} about ticket ${ticketId}`);\n  }\n\n  // Joint Accounts Management\n  async getJointAccountsByUserId(userId: string) {\n    // This would need to join with a joint_accounts table - for now return mock data\n    return [\n      {\n        id: '1',\n        accountNumber: '123456789',\n        accountType: 'checking',\n        balance: '25000.00',\n        primaryOwnerId: userId,\n        jointOwners: [\n          {\n            id: '1',\n            userId,\n            accountId: '1',\n            ownershipPercentage: 100,\n            permissions: ['view_balance', 'view_transactions', 'make_transfers'],\n            status: 'active',\n            addedAt: new Date().toISOString(),\n            user: {\n              name: 'John Doe',\n              email: 'john@example.com'\n            }\n          }\n        ],\n        ownershipType: 'joint_tenancy',\n        createdAt: new Date().toISOString(),\n        status: 'active'\n      }\n    ];\n  }\n\n  async createOwnershipRequest(data: any) {\n    // This would create a record in ownership_requests table - for now return mock data\n    return {\n      id: Math.random().toString(36).substr(2, 9),\n      accountId: data.accountId,\n      requesterId: data.requesterId,\n      targetUserId: 'target_user_id', // Would lookup by email\n      requestType: data.requestType,\n      ownershipPercentage: data.ownershipPercentage,\n      permissions: data.permissions,\n      status: 'pending',\n      notes: data.notes,\n      createdAt: new Date().toISOString(),\n      requester: {\n        name: 'John Doe',\n        email: 'john@example.com'\n      },\n      targetUser: {\n        name: 'Jane Smith',\n        email: data.targetUserEmail\n      }\n    };\n  }\n\n  async getOwnershipRequestsByUserId(userId: string) {\n    // This would fetch from ownership_requests table - for now return mock data\n    return [\n      {\n        id: '1',\n        accountId: '123456789',\n        requesterId: 'requester_id',\n        targetUserId: userId,\n        requestType: 'add_joint_owner',\n        ownershipPercentage: 50,\n        permissions: ['view_balance', 'view_transactions'],\n        status: 'pending',\n        notes: 'Adding spouse as joint owner',\n        createdAt: new Date().toISOString(),\n        requester: {\n          name: 'John Doe',\n          email: 'john@example.com'\n        },\n        targetUser: {\n          name: 'Jane Smith',\n          email: 'jane@example.com'\n        }\n      }\n    ];\n  }\n\n  async respondToOwnershipRequest(requestId: string, action: string, userId: string, notes?: string) {\n    // This would update the ownership_requests table - for now return mock data\n    return {\n      id: requestId,\n      requestType: 'add_joint_owner',\n      accountId: '123456789',\n      targetUserId: userId,\n      ownershipPercentage: 50,\n      permissions: ['view_balance', 'view_transactions'],\n      status: action === 'approve' ? 'approved' : 'rejected'\n    };\n  }\n\n  async addJointAccountOwner(accountId: string, userId: string, percentage: number, permissions: string[]) {\n    // This would add a record to joint_account_owners table\n    console.log(`Adding joint owner ${userId} to account ${accountId} with ${percentage}% ownership`);\n    return true;\n  }\n\n  async transferAccountOwnership(accountId: string, newOwnerId: string) {\n    // This would update the account's primary owner\n    console.log(`Transferring ownership of account ${accountId} to user ${newOwnerId}`);\n    return true;\n  }\n\n  // Enhanced Inheritance Management - Real Database Implementation\n  async getInheritanceProcessesByUser(userId: string) {\n    const processes = await db\n      .select({\n        id: inheritanceProcesses.id,\n        deceasedUserId: inheritanceProcesses.deceasedUserId,\n        status: inheritanceProcesses.status,\n        notes: inheritanceProcesses.notes,\n        estimatedValue: inheritanceProcesses.estimatedValue,\n        createdAt: inheritanceProcesses.createdAt,\n        updatedAt: inheritanceProcesses.updatedAt,\n        deathCertificateUrl: inheritanceProcesses.deathCertificateUrl,\n        willDocumentUrl: inheritanceProcesses.willDocumentUrl,\n        deceasedName: sql`COALESCE(deceased_user.first_name || ' ' || deceased_user.last_name, 'Unknown User')`,\n        deceasedEmail: sql`deceased_user.email`,\n      })\n      .from(inheritanceProcesses)\n      .leftJoin(sql`users as deceased_user`, sql`${inheritanceProcesses.deceasedUserId} = deceased_user.id`)\n      .where(sql`${inheritanceProcesses.deceasedUserId} = ${userId} OR ${inheritanceProcesses.processedBy} = ${userId}`)\n      .orderBy(desc(inheritanceProcesses.createdAt));\n\n    // Get user's accounts for inheritance accounts\n    const userAccounts = await this.getAccountsByUserId(userId);\n\n    // Transform to match expected format\n    return processes.map(process => ({\n      id: process.id,\n      deceasedUserId: process.deceasedUserId,\n      initiatorId: userId,\n      status: process.status,\n      totalValue: process.estimatedValue || '0',\n      processingNotes: process.notes,\n      createdAt: process.createdAt?.toISOString() || new Date().toISOString(),\n      updatedAt: process.updatedAt?.toISOString() || new Date().toISOString(),\n      deceased: {\n        name: process.deceasedName || 'Unknown User',\n        email: process.deceasedEmail || ''\n      },\n      initiator: {\n        name: 'Current User',\n        email: 'user@example.com'\n      },\n      documents: process.deathCertificateUrl ? [{\n        id: `doc_${process.id}`,\n        inheritanceId: process.id,\n        documentType: 'death_certificate',\n        fileName: 'death_certificate.pdf',\n        fileUrl: process.deathCertificateUrl,\n        status: 'pending',\n        uploadedAt: process.createdAt?.toISOString() || new Date().toISOString()\n      }] : [],\n      beneficiaries: [{\n        id: `ben_${process.id}`,\n        inheritanceId: process.id,\n        beneficiaryId: userId,\n        percentage: 100,\n        accountIds: userAccounts.map(acc => acc.id),\n        status: 'pending',\n        beneficiary: {\n          name: 'Current User',\n          email: 'user@example.com'\n        }\n      }],\n      accounts: userAccounts.map(acc => ({\n        id: acc.id,\n        accountNumber: acc.accountNumber,\n        accountType: acc.accountType,\n        balance: acc.balance,\n        distributionStatus: 'pending'\n      }))\n    }));\n  }\n\n  async getUserByEmail(email: string) {\n    const user = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return user[0] || null;\n  }\n\n  async createInheritanceProcess(data: any) {\n    const [process] = await db.insert(inheritanceProcesses).values({\n      deceasedUserId: data.deceasedUserId,\n      status: 'pending',\n      notes: data.notes,\n      estimatedValue: '0',\n    }).returning();\n    \n    // Log the creation\n    await this.createAuditLog({\n      action: 'inheritance_reviewed' as AuditAction,\n      adminId: data.initiatorId || data.deceasedUserId,\n      details: {\n        processId: process.id,\n        deceasedUserId: data.deceasedUserId,\n        relationship: data.relationship,\n        deathDate: data.deathDate\n      }\n    });\n    \n    return process;\n  }\n\n  async getInheritanceProcessById(processId: string) {\n    // This would fetch from inheritance_processes table\n    return {\n      id: processId,\n      initiatorId: 'initiator_id',\n      beneficiaries: [\n        {\n          beneficiaryId: 'beneficiary_id'\n        }\n      ]\n    };\n  }\n\n  async createInheritanceDocument(document: any) {\n    // Update the main inheritance process with document URL\n    const documentField = document.documentType === 'death_certificate' ? 'deathCertificateUrl' :\n                         document.documentType === 'will' ? 'willDocumentUrl' :\n                         document.documentType === 'identification' ? 'identificationDocumentUrl' :\n                         'deathCertificateUrl'; // default\n    \n    await db.update(inheritanceProcesses)\n      .set({ [documentField]: document.fileUrl })\n      .where(eq(inheritanceProcesses.id, document.inheritanceId));\n    \n    return {\n      id: `doc_${Date.now()}`,\n      inheritanceId: document.inheritanceId,\n      documentType: document.documentType,\n      fileName: document.fileName,\n      fileUrl: document.fileUrl,\n      status: 'pending',\n      uploadedAt: new Date().toISOString()\n    };\n  }\n\n  async respondToInheritanceClaim(processId: string, userId: string, accept: boolean) {\n    // Update the inheritance process status based on response\n    const newStatus = accept ? 'document_review' : 'rejected';\n    \n    await db.update(inheritanceProcesses)\n      .set({ \n        status: newStatus as any,\n        processedBy: userId,\n        processedAt: new Date(),\n        notes: accept ? 'Inheritance claim accepted by beneficiary' : 'Inheritance claim declined by beneficiary'\n      })\n      .where(eq(inheritanceProcesses.id, processId));\n      \n    // Log the response\n    await this.createAuditLog({\n      action: 'inheritance_reviewed' as AuditAction,\n      adminId: userId,\n      details: {\n        processId,\n        action: accept ? 'accepted' : 'declined'\n      }\n    });\n    return true;\n  }\n\n  // Email Templates\n  async getEmailTemplates() {\n    try {\n      return await db.select().from(emailTemplates);\n    } catch (error) {\n      console.error(\"Error fetching email templates:\", error);\n      return [];\n    }\n  }\n\n  async createEmailTemplate(template: any) {\n    try {\n      const [created] = await db.insert(emailTemplates).values(template).returning();\n      return created;\n    } catch (error) {\n      console.error(\"Error creating email template:\", error);\n      throw error;\n    }\n  }\n\n  async getEmailTemplateById(id: string) {\n    try {\n      const templates = await db.select().from(emailTemplates).where(eq(emailTemplates.id, id));\n      return templates[0] || null;\n    } catch (error) {\n      console.error(\"Error fetching email template by ID:\", error);\n      return null;\n    }\n  }\n\n  async updateEmailTemplate(id: string, template: any) {\n    try {\n      const [updated] = await db.update(emailTemplates).set(template).where(eq(emailTemplates.id, id)).returning();\n      return updated;\n    } catch (error) {\n      console.error(\"Error updating email template:\", error);\n      throw error;\n    }\n  }\n\n  async deleteEmailTemplate(id: string) {\n    try {\n      return await db.delete(emailTemplates).where(eq(emailTemplates.id, id));\n    } catch (error) {\n      console.error(\"Error deleting email template:\", error);\n      throw error;\n    }\n  }\n\n  // Email Configuration\n  async getEmailConfigurations() {\n    try {\n      return await db.select().from(emailConfigurations);\n    } catch (error) {\n      console.error(\"Error fetching email configurations:\", error);\n      return [];\n    }\n  }\n\n  async getActiveEmailConfiguration() {\n    try {\n      const configs = await db.select().from(emailConfigurations).where(eq(emailConfigurations.isActive, true));\n      return configs[0] || null;\n    } catch (error) {\n      console.error(\"Error fetching active email configuration:\", error);\n      return null;\n    }\n  }\n\n  async createEmailConfiguration(config: any) {\n    try {\n      const [created] = await db.insert(emailConfigurations).values(config).returning();\n      return created;\n    } catch (error) {\n      console.error(\"Error creating email configuration:\", error);\n      throw error;\n    }\n  }\n\n  async updateEmailConfiguration(id: string, config: any) {\n    try {\n      const [updated] = await db.update(emailConfigurations).set(config).where(eq(emailConfigurations.id, id)).returning();\n      return updated;\n    } catch (error) {\n      console.error(\"Error updating email configuration:\", error);\n      throw error;\n    }\n  }\n\n  async deleteEmailConfiguration(id: string) {\n    try {\n      return await db.delete(emailConfigurations).where(eq(emailConfigurations.id, id));\n    } catch (error) {\n      console.error(\"Error deleting email configuration:\", error);\n      throw error;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":61085},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  json,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  pgEnum,\n  boolean,\n  uuid,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table - mandatory for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User roles\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'customer']);\n\n// Account status\nexport const accountStatusEnum = pgEnum('account_status', ['active', 'frozen', 'closed']);\n\n// Transfer status\nexport const transferStatusEnum = pgEnum('transfer_status', [\n  'pending',\n  'processing', \n  'verification_required',\n  'approved',\n  'completed',\n  'rejected',\n  'failed'\n]);\n\n// Audit action types\nexport const auditActionEnum = pgEnum('audit_action', [\n  'account_created',\n  'account_frozen',\n  'account_unfrozen', \n  'account_closed',\n  'balance_credited',\n  'balance_debited',\n  'transfer_approved',\n  'transfer_rejected',\n  'email_sent',\n  'inheritance_reviewed',\n  'inheritance_disputed'\n]);\n\n// User storage table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\"), // For local authentication\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").default('customer').notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Bank accounts\nexport const accounts = pgTable(\"accounts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  accountNumber: varchar(\"account_number\").unique().notNull(),\n  routingNumber: varchar(\"routing_number\").notNull().default('011075150'), // Santander routing number\n  accountType: varchar(\"account_type\").notNull().default('checking'),\n  balance: decimal(\"balance\", { precision: 15, scale: 2 }).notNull().default('0.00'),\n  status: accountStatusEnum(\"status\").default('active').notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Transfers\nexport const transfers = pgTable(\"transfers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fromAccountId: uuid(\"from_account_id\").references(() => accounts.id).notNull(),\n  toAccountId: uuid(\"to_account_id\").references(() => accounts.id),\n  toAccountNumber: varchar(\"to_account_number\"),\n  toRoutingNumber: varchar(\"to_routing_number\"),\n  toBankName: varchar(\"to_bank_name\"),\n  toAccountHolderName: varchar(\"to_account_holder_name\").notNull(),\n  recipientEmail: varchar(\"recipient_email\"),\n  recipientPhone: varchar(\"recipient_phone\"),\n  recipientSSN: varchar(\"recipient_ssn\"),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  fee: decimal(\"fee\", { precision: 15, scale: 2 }).notNull().default('0.00'),\n  tax: decimal(\"tax\", { precision: 15, scale: 2 }).notNull().default('0.00'),\n  description: text(\"description\"),\n  status: transferStatusEnum(\"status\").default('pending').notNull(),\n  rejectionReason: text(\"rejection_reason\"),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Transactions\nexport const transactions = pgTable(\"transactions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  accountId: uuid(\"account_id\").references(() => accounts.id).notNull(),\n  transferId: uuid(\"transfer_id\").references(() => transfers.id),\n  type: varchar(\"type\").notNull(), // credit, debit, fee, tax\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  description: text(\"description\").notNull(),\n  balanceAfter: decimal(\"balance_after\", { precision: 15, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Audit logs\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  adminId: varchar(\"admin_id\").references(() => users.id).notNull(),\n  targetUserId: varchar(\"target_user_id\").references(() => users.id),\n  action: auditActionEnum(\"action\").notNull(),\n  details: jsonb(\"details\"),\n  ipAddress: varchar(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Email notifications\nexport const emailNotifications = pgTable(\"email_notifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  subject: varchar(\"subject\").notNull(),\n  body: text(\"body\").notNull(),\n  status: varchar(\"status\").notNull().default('sent'), // sent, failed\n  sentAt: timestamp(\"sent_at\").defaultNow(),\n});\n\n// Card status\nexport const cardStatusEnum = pgEnum('card_status', ['active', 'frozen', 'cancelled']);\n\n// Card types\nexport const cardTypeEnum = pgEnum('card_type', ['debit', 'credit', 'virtual']);\n\n// Notification types\nexport const notificationTypeEnum = pgEnum('notification_type', [\n  'transaction', 'security', 'account_update', 'transfer', 'bill_payment', \n  'investment', 'fraud_alert', 'marketing', 'system', 'admin_response'\n]);\n\n// Notification status\nexport const notificationStatusEnum = pgEnum('notification_status', ['unread', 'read', 'archived']);\n\n// Bill payment status\nexport const billStatusEnum = pgEnum('bill_status', ['pending', 'paid', 'failed', 'cancelled']);\n\n// Investment types\nexport const investmentTypeEnum = pgEnum('investment_type', ['stocks', 'mutual_funds', 'savings_plan', 'forex']);\n\n// Support ticket status\nexport const ticketStatusEnum = pgEnum('ticket_status', ['open', 'in_progress', 'resolved', 'closed']);\n\n// Support ticket priority\nexport const ticketPriorityEnum = pgEnum('ticket_priority', ['low', 'medium', 'high', 'urgent']);\n\n// Cards table\nexport const cards = pgTable(\"cards\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  accountId: uuid(\"account_id\").references(() => accounts.id).notNull(),\n  cardNumber: varchar(\"card_number\").unique().notNull(),\n  cardHolderName: varchar(\"card_holder_name\").notNull(),\n  expiryDate: varchar(\"expiry_date\").notNull(),\n  cvv: varchar(\"cvv\").notNull(),\n  type: cardTypeEnum(\"type\").default('debit').notNull(),\n  status: cardStatusEnum(\"status\").default('active').notNull(),\n  spendingLimit: decimal(\"spending_limit\", { precision: 15, scale: 2 }).default('5000.00'),\n  dailyLimit: decimal(\"daily_limit\", { precision: 15, scale: 2 }).default('1000.00'),\n  isVirtual: boolean(\"is_virtual\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  type: notificationTypeEnum(\"type\").notNull(),\n  title: varchar(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  status: notificationStatusEnum(\"status\").default('unread').notNull(),\n  metadata: jsonb(\"metadata\"), // Additional data like transaction ID, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Bill payments table\nexport const billPayments = pgTable(\"bill_payments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  accountId: uuid(\"account_id\").references(() => accounts.id).notNull(),\n  billType: varchar(\"bill_type\").notNull(), // utilities, tv, internet, school, etc.\n  billerName: varchar(\"biller_name\").notNull(),\n  billerAccountNumber: varchar(\"biller_account_number\").notNull(),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  dueDate: timestamp(\"due_date\"),\n  isRecurring: boolean(\"is_recurring\").default(false),\n  recurringFrequency: varchar(\"recurring_frequency\"), // monthly, weekly, etc.\n  status: billStatusEnum(\"status\").default('pending').notNull(),\n  reference: varchar(\"reference\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Investments table\nexport const investments = pgTable(\"investments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  accountId: uuid(\"account_id\").references(() => accounts.id).notNull(),\n  type: investmentTypeEnum(\"type\").notNull(),\n  instrumentName: varchar(\"instrument_name\").notNull(), // stock symbol, fund name, etc.\n  quantity: decimal(\"quantity\", { precision: 15, scale: 6 }).notNull(),\n  purchasePrice: decimal(\"purchase_price\", { precision: 15, scale: 4 }).notNull(),\n  currentPrice: decimal(\"current_price\", { precision: 15, scale: 4 }).notNull(),\n  totalValue: decimal(\"total_value\", { precision: 15, scale: 2 }).notNull(),\n  profitLoss: decimal(\"profit_loss\", { precision: 15, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Savings goals table\nexport const savingsGoals = pgTable(\"savings_goals\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  accountId: uuid(\"account_id\").references(() => accounts.id).notNull(),\n  name: varchar(\"name\").notNull(),\n  targetAmount: decimal(\"target_amount\", { precision: 15, scale: 2 }).notNull(),\n  currentAmount: decimal(\"current_amount\", { precision: 15, scale: 2 }).default('0.00'),\n  targetDate: timestamp(\"target_date\"),\n  autoDeposit: boolean(\"auto_deposit\").default(false),\n  depositAmount: decimal(\"deposit_amount\", { precision: 15, scale: 2 }),\n  depositFrequency: varchar(\"deposit_frequency\"), // weekly, monthly\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Support tickets table\nexport const supportTickets = pgTable(\"support_tickets\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  subject: varchar(\"subject\").notNull(),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\").notNull(), // account, transfer, card, investment, etc.\n  priority: ticketPriorityEnum(\"priority\").default('medium').notNull(),\n  status: ticketStatusEnum(\"status\").default('open').notNull(),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id),\n  resolution: text(\"resolution\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Chat messages for live support\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketId: uuid(\"ticket_id\").references(() => supportTickets.id).notNull(),\n  senderId: varchar(\"sender_id\").references(() => users.id).notNull(),\n  message: text(\"message\").notNull(),\n  isFromAdmin: boolean(\"is_from_admin\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Standing orders / scheduled payments\nexport const standingOrders = pgTable(\"standing_orders\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  fromAccountId: uuid(\"from_account_id\").references(() => accounts.id).notNull(),\n  toAccountNumber: varchar(\"to_account_number\").notNull(),\n  toAccountHolderName: varchar(\"to_account_holder_name\").notNull(),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  frequency: varchar(\"frequency\").notNull(), // weekly, monthly, quarterly\n  nextPaymentDate: timestamp(\"next_payment_date\").notNull(),\n  endDate: timestamp(\"end_date\"),\n  description: varchar(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Customer profile KYC data\nexport const customerProfiles = pgTable(\"customer_profiles\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).unique().notNull(),\n  dateOfBirth: timestamp(\"date_of_birth\"),\n  phoneNumber: varchar(\"phone_number\"),\n  address: text(\"address\"),\n  city: varchar(\"city\"),\n  state: varchar(\"state\"),\n  zipCode: varchar(\"zip_code\"),\n  country: varchar(\"country\").default('United States'),\n  ssn: varchar(\"ssn\"),\n  employmentStatus: varchar(\"employment_status\"),\n  annualIncome: decimal(\"annual_income\", { precision: 15, scale: 2 }),\n  idVerificationStatus: varchar(\"id_verification_status\").default('pending'), // pending, verified, rejected\n  kycStatus: varchar(\"kyc_status\").default('pending'), // pending, completed, rejected\n  idDocumentUrl: varchar(\"id_document_url\"),\n  proofOfAddressUrl: varchar(\"proof_of_address_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  accounts: many(accounts),\n  auditLogs: many(auditLogs),\n  emailNotifications: many(emailNotifications),\n  cards: many(cards),\n  notifications: many(notifications),\n  billPayments: many(billPayments),\n  investments: many(investments),\n  savingsGoals: many(savingsGoals),\n  supportTickets: many(supportTickets),\n  chatMessages: many(chatMessages),\n  standingOrders: many(standingOrders),\n  customerProfile: one(customerProfiles),\n}));\n\nexport const accountsRelations = relations(accounts, ({ one, many }) => ({\n  user: one(users, { fields: [accounts.userId], references: [users.id] }),\n  transfersFrom: many(transfers, { relationName: \"fromAccount\" }),\n  transfersTo: many(transfers, { relationName: \"toAccount\" }),\n  transactions: many(transactions),\n  cards: many(cards),\n  billPayments: many(billPayments),\n  investments: many(investments),\n  savingsGoals: many(savingsGoals),\n  standingOrders: many(standingOrders),\n}));\n\nexport const transfersRelations = relations(transfers, ({ one, many }) => ({\n  fromAccount: one(accounts, { \n    fields: [transfers.fromAccountId], \n    references: [accounts.id],\n    relationName: \"fromAccount\"\n  }),\n  toAccount: one(accounts, { \n    fields: [transfers.toAccountId], \n    references: [accounts.id],\n    relationName: \"toAccount\"\n  }),\n  approver: one(users, { fields: [transfers.approvedBy], references: [users.id] }),\n  transactions: many(transactions),\n}));\n\nexport const transactionsRelations = relations(transactions, ({ one }) => ({\n  account: one(accounts, { fields: [transactions.accountId], references: [accounts.id] }),\n  transfer: one(transfers, { fields: [transactions.transferId], references: [transfers.id] }),\n}));\n\nexport const auditLogsRelations = relations(auditLogs, ({ one }) => ({\n  admin: one(users, { fields: [auditLogs.adminId], references: [users.id] }),\n  targetUser: one(users, { fields: [auditLogs.targetUserId], references: [users.id] }),\n}));\n\nexport const emailNotificationsRelations = relations(emailNotifications, ({ one }) => ({\n  user: one(users, { fields: [emailNotifications.userId], references: [users.id] }),\n}));\n\n// New relations for extended tables\nexport const cardsRelations = relations(cards, ({ one }) => ({\n  user: one(users, { fields: [cards.userId], references: [users.id] }),\n  account: one(accounts, { fields: [cards.accountId], references: [accounts.id] }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, { fields: [notifications.userId], references: [users.id] }),\n}));\n\nexport const billPaymentsRelations = relations(billPayments, ({ one }) => ({\n  user: one(users, { fields: [billPayments.userId], references: [users.id] }),\n  account: one(accounts, { fields: [billPayments.accountId], references: [accounts.id] }),\n}));\n\nexport const investmentsRelations = relations(investments, ({ one }) => ({\n  user: one(users, { fields: [investments.userId], references: [users.id] }),\n  account: one(accounts, { fields: [investments.accountId], references: [accounts.id] }),\n}));\n\nexport const savingsGoalsRelations = relations(savingsGoals, ({ one }) => ({\n  user: one(users, { fields: [savingsGoals.userId], references: [users.id] }),\n  account: one(accounts, { fields: [savingsGoals.accountId], references: [accounts.id] }),\n}));\n\nexport const supportTicketsRelations = relations(supportTickets, ({ one, many }) => ({\n  user: one(users, { fields: [supportTickets.userId], references: [users.id] }),\n  assignedAdmin: one(users, { fields: [supportTickets.assignedTo], references: [users.id] }),\n  chatMessages: many(chatMessages),\n}));\n\nexport const chatMessagesRelations = relations(chatMessages, ({ one }) => ({\n  ticket: one(supportTickets, { fields: [chatMessages.ticketId], references: [supportTickets.id] }),\n  sender: one(users, { fields: [chatMessages.senderId], references: [users.id] }),\n}));\n\nexport const standingOrdersRelations = relations(standingOrders, ({ one }) => ({\n  user: one(users, { fields: [standingOrders.userId], references: [users.id] }),\n  account: one(accounts, { fields: [standingOrders.fromAccountId], references: [accounts.id] }),\n}));\n\nexport const customerProfilesRelations = relations(customerProfiles, ({ one }) => ({\n  user: one(users, { fields: [customerProfiles.userId], references: [users.id] }),\n}));\n\n// Zod schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Valid email required\"),\n  password: z.string().min(1, \"Password required\"),\n});\n\nexport const insertAccountSchema = createInsertSchema(accounts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTransferSchema = createInsertSchema(transfers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  approvedBy: true,\n  approvedAt: true,\n  completedAt: true,\n}).extend({\n  amount: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, \"Invalid amount format\"),\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEmailNotificationSchema = createInsertSchema(emailNotifications).omit({\n  id: true,\n  sentAt: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Account = typeof accounts.$inferSelect;\nexport type InsertAccount = z.infer<typeof insertAccountSchema>;\nexport type Transfer = typeof transfers.$inferSelect;\nexport type InsertTransfer = z.infer<typeof insertTransferSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type EmailNotification = typeof emailNotifications.$inferSelect;\nexport type InsertEmailNotification = z.infer<typeof insertEmailNotificationSchema>;\n\n// New types for extended tables\nexport type Card = typeof cards.$inferSelect;\nexport type InsertCard = typeof cards.$inferInsert;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = typeof notifications.$inferInsert;\nexport type BillPayment = typeof billPayments.$inferSelect;\nexport type InsertBillPayment = typeof billPayments.$inferInsert;\nexport type Investment = typeof investments.$inferSelect;\nexport type InsertInvestment = typeof investments.$inferInsert;\nexport type SavingsGoal = typeof savingsGoals.$inferSelect;\nexport type InsertSavingsGoal = typeof savingsGoals.$inferInsert;\nexport type SupportTicket = typeof supportTickets.$inferSelect;\nexport type InsertSupportTicket = typeof supportTickets.$inferInsert;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = typeof chatMessages.$inferInsert;\nexport type StandingOrder = typeof standingOrders.$inferSelect;\nexport type InsertStandingOrder = typeof standingOrders.$inferInsert;\nexport type CustomerProfile = typeof customerProfiles.$inferSelect;\nexport type InsertCustomerProfile = typeof customerProfiles.$inferInsert;\n\n// Enhanced inheritance management types\nexport type InheritanceProcess = typeof inheritanceProcesses.$inferSelect;\nexport type InsertInheritanceProcess = typeof inheritanceProcesses.$inferInsert;\nexport type InheritanceDispute = typeof inheritanceDisputes.$inferSelect;\nexport type InsertInheritanceDispute = typeof inheritanceDisputes.$inferInsert;\nexport type OwnershipTransferRequest = typeof ownershipTransferRequests.$inferSelect;\nexport type InsertOwnershipTransferRequest = typeof ownershipTransferRequests.$inferInsert;\nexport type DocumentVerification = typeof documentVerifications.$inferSelect;\nexport type InsertDocumentVerification = typeof documentVerifications.$inferInsert;\n\n// Password reset tokens\nexport const passwordResetTokens = pgTable(\"password_reset_tokens\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  token: varchar(\"token\").unique().notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Loan status\nexport const loanStatusEnum = pgEnum('loan_status', ['pending', 'approved', 'rejected', 'active', 'completed', 'defaulted']);\n\n// Loans table\nexport const loans = pgTable(\"loans\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  type: varchar(\"type\").notNull(), // personal, mortgage, auto, etc.\n  purpose: text(\"purpose\"),\n  interestRate: decimal(\"interest_rate\", { precision: 5, scale: 2 }).notNull(),\n  termMonths: varchar(\"term_months\").notNull(),\n  status: loanStatusEnum(\"status\").default('pending').notNull(),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  monthlyPayment: decimal(\"monthly_payment\", { precision: 15, scale: 2 }),\n  remainingBalance: decimal(\"remaining_balance\", { precision: 15, scale: 2 }),\n  nextPaymentDate: timestamp(\"next_payment_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Beneficiaries table\nexport const beneficiaries = pgTable(\"beneficiaries\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  name: varchar(\"name\").notNull(),\n  relationship: varchar(\"relationship\").notNull(), // spouse, child, parent, etc.\n  percentage: decimal(\"percentage\", { precision: 5, scale: 2 }).notNull(),\n  contactInfo: text(\"contact_info\").notNull(),\n  dateOfBirth: timestamp(\"date_of_birth\"),\n  address: text(\"address\"),\n  ssn: varchar(\"ssn\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Inheritance process status\nexport const inheritanceStatusEnum = pgEnum('inheritance_status', [\n  'pending', 'document_review', 'legal_review', 'disputed', 'approved', 'rejected', 'completed'\n]);\n\n// Inheritance processes table (keep existing structure)\nexport const inheritanceProcesses = pgTable(\"inheritance_processes\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  deceasedUserId: varchar(\"deceased_user_id\").references(() => users.id).notNull(),\n  deathCertificateUrl: varchar(\"death_certificate_url\"),\n  willDocumentUrl: varchar(\"will_document_url\"),\n  identificationDocumentUrl: varchar(\"identification_document_url\"),\n  probateCourtOrderUrl: varchar(\"probate_court_order_url\"),\n  status: inheritanceStatusEnum(\"status\").default('pending').notNull(),\n  documentVerificationStatus: varchar(\"document_verification_status\").default('pending'),\n  legalReviewStatus: varchar(\"legal_review_status\").default('pending'),\n  processedBy: varchar(\"processed_by\").references(() => users.id),\n  processedAt: timestamp(\"processed_at\"),\n  notes: text(\"notes\"),\n  rejectionReason: text(\"rejection_reason\"),\n  estimatedValue: decimal(\"estimated_value\", { precision: 15, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Inheritance documents table\nexport const inheritanceDocuments = pgTable(\"inheritance_documents\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  inheritanceId: uuid(\"inheritance_id\").references(() => inheritanceProcesses.id).notNull(),\n  documentType: varchar(\"document_type\").notNull(), // death_certificate, will, trust, court_order, power_of_attorney, other\n  fileName: varchar(\"file_name\").notNull(),\n  fileUrl: varchar(\"file_url\").notNull(),\n  status: varchar(\"status\").default('pending').notNull(), // pending, verified, rejected\n  verifiedAt: timestamp(\"verified_at\"),\n  verifiedBy: varchar(\"verified_by\").references(() => users.id),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Inheritance beneficiaries table\nexport const inheritanceBeneficiaries = pgTable(\"inheritance_beneficiaries\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  inheritanceId: uuid(\"inheritance_id\").references(() => inheritanceProcesses.id).notNull(),\n  beneficiaryId: varchar(\"beneficiary_id\").references(() => users.id).notNull(),\n  percentage: decimal(\"percentage\", { precision: 5, scale: 2 }).notNull(),\n  accountIds: json(\"account_ids\").notNull(), // Array of account IDs\n  status: varchar(\"status\").default('pending').notNull(), // pending, notified, accepted, rejected\n  notifiedAt: timestamp(\"notified_at\"),\n  respondedAt: timestamp(\"responded_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Inheritance accounts table\nexport const inheritanceAccounts = pgTable(\"inheritance_accounts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  inheritanceId: uuid(\"inheritance_id\").references(() => inheritanceProcesses.id).notNull(),\n  accountId: uuid(\"account_id\").references(() => accounts.id).notNull(),\n  distributionStatus: varchar(\"distribution_status\").default('pending').notNull(), // pending, in_progress, completed\n  distributedAmount: decimal(\"distributed_amount\", { precision: 15, scale: 2 }),\n  distributedAt: timestamp(\"distributed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Inheritance disputes table\nexport const inheritanceDisputes = pgTable(\"inheritance_disputes\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  inheritanceProcessId: uuid(\"inheritance_process_id\").references(() => inheritanceProcesses.id).notNull(),\n  disputantUserId: varchar(\"disputant_user_id\").references(() => users.id).notNull(),\n  disputeType: varchar(\"dispute_type\").notNull(), // beneficiary_challenge, document_validity, ownership_claim\n  description: text(\"description\").notNull(),\n  supportingDocumentsUrls: json(\"supporting_documents_urls\"), // Array of document URLs\n  status: varchar(\"status\").default('open').notNull(), // open, under_investigation, resolved, dismissed\n  resolutionNotes: text(\"resolution_notes\"),\n  resolvedBy: varchar(\"resolved_by\").references(() => users.id),\n  resolvedAt: timestamp(\"resolved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Ownership transfer requests table\nexport const ownershipTransferRequests = pgTable(\"ownership_transfer_requests\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  accountId: uuid(\"account_id\").references(() => accounts.id).notNull(),\n  requesterId: varchar(\"requester_id\").references(() => users.id).notNull(),\n  targetUserEmail: varchar(\"target_user_email\").notNull(),\n  targetUserId: varchar(\"target_user_id\").references(() => users.id),\n  requestType: varchar(\"request_type\").notNull(), // full_transfer, add_joint_owner, remove_owner\n  ownershipPercentage: decimal(\"ownership_percentage\", { precision: 5, scale: 2 }),\n  permissions: json(\"permissions\"), // read, write, transfer permissions for joint accounts\n  reason: text(\"reason\").notNull(),\n  supportingDocumentsUrls: json(\"supporting_documents_urls\"),\n  status: varchar(\"status\").default('pending').notNull(), // pending, approved, rejected, completed\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  reviewNotes: text(\"review_notes\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Document verification table\nexport const documentVerifications = pgTable(\"document_verifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  relatedEntityId: uuid(\"related_entity_id\").notNull(), // Can reference inheritance process, transfer request, etc.\n  relatedEntityType: varchar(\"related_entity_type\").notNull(), // inheritance_process, transfer_request, kyc\n  documentType: varchar(\"document_type\").notNull(), // death_certificate, will, id, probate_order\n  documentUrl: varchar(\"document_url\").notNull(),\n  verificationStatus: varchar(\"verification_status\").default('pending').notNull(), // pending, verified, rejected, requires_resubmission\n  verifiedBy: varchar(\"verified_by\").references(() => users.id),\n  verifiedAt: timestamp(\"verified_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  verificationNotes: text(\"verification_notes\"),\n  expiresAt: timestamp(\"expires_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations for new tables\nexport const passwordResetTokensRelations = relations(passwordResetTokens, ({ one }) => ({\n  user: one(users, { fields: [passwordResetTokens.userId], references: [users.id] }),\n}));\n\nexport const loansRelations = relations(loans, ({ one }) => ({\n  user: one(users, { fields: [loans.userId], references: [users.id] }),\n  approver: one(users, { fields: [loans.approvedBy], references: [users.id] }),\n}));\n\nexport const beneficiariesRelations = relations(beneficiaries, ({ one }) => ({\n  user: one(users, { fields: [beneficiaries.userId], references: [users.id] }),\n}));\n\nexport const inheritanceProcessesRelations = relations(inheritanceProcesses, ({ one, many }) => ({\n  deceasedUser: one(users, { fields: [inheritanceProcesses.deceasedUserId], references: [users.id] }),\n  processor: one(users, { fields: [inheritanceProcesses.processedBy], references: [users.id] }),\n  documents: many(inheritanceDocuments),\n  beneficiaries: many(inheritanceBeneficiaries),\n  accounts: many(inheritanceAccounts),\n  disputes: many(inheritanceDisputes),\n  documentVerifications: many(documentVerifications),\n}));\n\nexport const inheritanceDocumentsRelations = relations(inheritanceDocuments, ({ one }) => ({\n  inheritance: one(inheritanceProcesses, { fields: [inheritanceDocuments.inheritanceId], references: [inheritanceProcesses.id] }),\n  verifier: one(users, { fields: [inheritanceDocuments.verifiedBy], references: [users.id] }),\n}));\n\nexport const inheritanceBeneficiariesRelations = relations(inheritanceBeneficiaries, ({ one }) => ({\n  inheritance: one(inheritanceProcesses, { fields: [inheritanceBeneficiaries.inheritanceId], references: [inheritanceProcesses.id] }),\n  beneficiary: one(users, { fields: [inheritanceBeneficiaries.beneficiaryId], references: [users.id] }),\n}));\n\nexport const inheritanceAccountsRelations = relations(inheritanceAccounts, ({ one }) => ({\n  inheritance: one(inheritanceProcesses, { fields: [inheritanceAccounts.inheritanceId], references: [inheritanceProcesses.id] }),\n  account: one(accounts, { fields: [inheritanceAccounts.accountId], references: [accounts.id] }),\n}));\n\nexport const inheritanceDisputesRelations = relations(inheritanceDisputes, ({ one }) => ({\n  inheritanceProcess: one(inheritanceProcesses, { fields: [inheritanceDisputes.inheritanceProcessId], references: [inheritanceProcesses.id] }),\n  disputant: one(users, { fields: [inheritanceDisputes.disputantUserId], references: [users.id] }),\n  resolver: one(users, { fields: [inheritanceDisputes.resolvedBy], references: [users.id] }),\n}));\n\nexport const ownershipTransferRequestsRelations = relations(ownershipTransferRequests, ({ one, many }) => ({\n  account: one(accounts, { fields: [ownershipTransferRequests.accountId], references: [accounts.id] }),\n  requester: one(users, { fields: [ownershipTransferRequests.requesterId], references: [users.id] }),\n  targetUser: one(users, { fields: [ownershipTransferRequests.targetUserId], references: [users.id] }),\n  reviewer: one(users, { fields: [ownershipTransferRequests.reviewedBy], references: [users.id] }),\n  documentVerifications: many(documentVerifications),\n}));\n\nexport const documentVerificationsRelations = relations(documentVerifications, ({ one }) => ({\n  verifier: one(users, { fields: [documentVerifications.verifiedBy], references: [users.id] }),\n}));\n\n// KYC Verification System\nexport const kycVerifications = pgTable(\"kyc_verifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  verificationType: varchar(\"verification_type\").notNull(), // id, ssn, email, phone\n  status: varchar(\"status\").default('pending').notNull(), // pending, verified, rejected\n  documentUrl: varchar(\"document_url\"),\n  verificationData: json(\"verification_data\"), // Store verification details\n  verifiedBy: varchar(\"verified_by\").references(() => users.id),\n  verifiedAt: timestamp(\"verified_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  expiresAt: timestamp(\"expires_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Email Templates for Admin\nexport const emailTemplates = pgTable(\"email_templates\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull().unique(),\n  subject: varchar(\"subject\").notNull(),\n  htmlContent: text(\"html_content\").notNull(),\n  textContent: text(\"text_content\"),\n  templateType: varchar(\"template_type\").notNull(), // welcome, transfer_confirmation, fraud_alert, etc\n  variables: json(\"variables\"), // Available template variables\n  isActive: boolean(\"is_active\").default(true),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Email Configuration for Admin\nexport const emailConfigurations = pgTable(\"email_configurations\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  configName: varchar(\"config_name\").notNull().unique().default('default'),\n  resendApiKey: text(\"resend_api_key\").notNull(),\n  senderEmail: varchar(\"sender_email\").notNull(),\n  senderName: varchar(\"sender_name\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// SMTP Configuration (alternative to Resend)\nexport const smtpConfigurations = pgTable(\"smtp_configurations\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  configName: varchar(\"config_name\").notNull().unique(),\n  host: varchar(\"host\").notNull(),\n  port: varchar(\"port\").notNull(),\n  username: varchar(\"username\").notNull(),\n  password: text(\"password\").notNull(),\n  secure: boolean(\"secure\").default(true),\n  senderEmail: varchar(\"sender_email\").notNull(),\n  senderName: varchar(\"sender_name\").notNull(),\n  isActive: boolean(\"is_active\").default(false),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Admin Notifications Configuration\nexport const adminNotificationSettings = pgTable(\"admin_notification_settings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventType: varchar(\"event_type\").notNull(), // transfer_created, kyc_submitted, etc\n  emailEnabled: boolean(\"email_enabled\").default(true),\n  smsEnabled: boolean(\"sms_enabled\").default(false),\n  pushEnabled: boolean(\"push_enabled\").default(true),\n  emailTemplate: uuid(\"email_template\").references(() => emailTemplates.id),\n  recipientRoles: json(\"recipient_roles\"), // ['admin', 'manager']\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Real-time Chat Messages (enhanced)\nexport const realTimeChatMessages = pgTable(\"realtime_chat_messages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ticketId: uuid(\"ticket_id\").references(() => supportTickets.id).notNull(),\n  senderId: varchar(\"sender_id\").references(() => users.id).notNull(),\n  messageType: varchar(\"message_type\").default('text'), // text, file, image\n  content: text(\"content\").notNull(),\n  fileUrl: varchar(\"file_url\"),\n  isRead: boolean(\"is_read\").default(false),\n  readAt: timestamp(\"read_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Account Statements\nexport const accountStatements = pgTable(\"account_statements\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  accountId: uuid(\"account_id\").references(() => accounts.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  statementType: varchar(\"statement_type\").notNull(), // monthly, quarterly, annual\n  periodStart: timestamp(\"period_start\").notNull(),\n  periodEnd: timestamp(\"period_end\").notNull(),\n  pdfUrl: varchar(\"pdf_url\"),\n  excelUrl: varchar(\"excel_url\"),\n  status: varchar(\"status\").default('generating'), // generating, ready, error\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Joint Account Ownership\nexport const jointAccounts = pgTable(\"joint_accounts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  accountId: uuid(\"account_id\").references(() => accounts.id).notNull(),\n  primaryOwnerId: varchar(\"primary_owner_id\").references(() => users.id).notNull(),\n  jointOwnerId: varchar(\"joint_owner_id\").references(() => users.id).notNull(),\n  ownershipType: varchar(\"ownership_type\").default('joint'), // joint, survivor\n  permissions: json(\"permissions\"), // read, write, transfer permissions\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n\n// Relations for new tables\nexport const kycVerificationsRelations = relations(kycVerifications, ({ one }) => ({\n  user: one(users, { fields: [kycVerifications.userId], references: [users.id] }),\n  verifier: one(users, { fields: [kycVerifications.verifiedBy], references: [users.id] }),\n}));\n\nexport const emailTemplatesRelations = relations(emailTemplates, ({ one }) => ({\n  creator: one(users, { fields: [emailTemplates.createdBy], references: [users.id] }),\n}));\n\nexport const emailConfigurationsRelations = relations(emailConfigurations, ({ one }) => ({\n  creator: one(users, { fields: [emailConfigurations.createdBy], references: [users.id] }),\n}));\n\nexport const smtpConfigurationsRelations = relations(smtpConfigurations, ({ one }) => ({\n  creator: one(users, { fields: [smtpConfigurations.createdBy], references: [users.id] }),\n}));\n\nexport const realTimeChatMessagesRelations = relations(realTimeChatMessages, ({ one }) => ({\n  ticket: one(supportTickets, { fields: [realTimeChatMessages.ticketId], references: [supportTickets.id] }),\n  sender: one(users, { fields: [realTimeChatMessages.senderId], references: [users.id] }),\n}));\n\nexport const accountStatementsRelations = relations(accountStatements, ({ one }) => ({\n  account: one(accounts, { fields: [accountStatements.accountId], references: [accounts.id] }),\n  user: one(users, { fields: [accountStatements.userId], references: [users.id] }),\n}));\n\nexport const jointAccountsRelations = relations(jointAccounts, ({ one }) => ({\n  account: one(accounts, { fields: [jointAccounts.accountId], references: [accounts.id] }),\n  primaryOwner: one(users, { fields: [jointAccounts.primaryOwnerId], references: [users.id] }),\n  jointOwner: one(users, { fields: [jointAccounts.jointOwnerId], references: [users.id] }),\n}));\n\n// Additional types for new tables\nexport type PasswordResetToken = typeof passwordResetTokens.$inferSelect;\nexport type InsertPasswordResetToken = typeof passwordResetTokens.$inferInsert;\nexport type Loan = typeof loans.$inferSelect;\nexport type InsertLoan = typeof loans.$inferInsert;\nexport type Beneficiary = typeof beneficiaries.$inferSelect;\nexport type InsertBeneficiary = typeof beneficiaries.$inferInsert;\nexport type InheritanceProcess = typeof inheritanceProcesses.$inferSelect;\nexport type InsertInheritanceProcess = typeof inheritanceProcesses.$inferInsert;\nexport type KycVerification = typeof kycVerifications.$inferSelect;\nexport type InsertKycVerification = typeof kycVerifications.$inferInsert;\nexport type InheritanceDocument = typeof inheritanceDocuments.$inferSelect;\nexport type InsertInheritanceDocument = typeof inheritanceDocuments.$inferInsert;\nexport type InheritanceBeneficiary = typeof inheritanceBeneficiaries.$inferSelect;\nexport type InsertInheritanceBeneficiary = typeof inheritanceBeneficiaries.$inferInsert;\nexport type InheritanceAccount = typeof inheritanceAccounts.$inferSelect;\nexport type InsertInheritanceAccount = typeof inheritanceAccounts.$inferInsert;\nexport type EmailTemplate = typeof emailTemplates.$inferSelect;\nexport type InsertEmailTemplate = typeof emailTemplates.$inferInsert;\nexport type EmailConfiguration = typeof emailConfigurations.$inferSelect;\nexport type InsertEmailConfiguration = typeof emailConfigurations.$inferInsert;\nexport type SmtpConfiguration = typeof smtpConfigurations.$inferSelect;\nexport type InsertSmtpConfiguration = typeof smtpConfigurations.$inferInsert;\nexport type AdminNotificationSetting = typeof adminNotificationSettings.$inferSelect;\nexport type InsertAdminNotificationSetting = typeof adminNotificationSettings.$inferInsert;\nexport type RealTimeChatMessage = typeof realTimeChatMessages.$inferSelect;\nexport type InsertRealTimeChatMessage = typeof realTimeChatMessages.$inferInsert;\nexport type AccountStatement = typeof accountStatements.$inferSelect;\nexport type InsertAccountStatement = typeof accountStatements.$inferInsert;\nexport type JointAccount = typeof jointAccounts.$inferSelect;\nexport type InsertJointAccount = typeof jointAccounts.$inferInsert;\n\n// Enums for TypeScript\nexport type UserRole = 'admin' | 'customer';\nexport type AccountStatus = 'active' | 'frozen' | 'closed';\nexport type TransferStatus = 'pending' | 'processing' | 'verification_required' | 'approved' | 'completed' | 'rejected' | 'failed';\nexport type AuditAction = 'account_created' | 'account_frozen' | 'account_unfrozen' | 'account_closed' | 'balance_credited' | 'balance_debited' | 'transfer_approved' | 'transfer_rejected' | 'email_sent' | 'inheritance_reviewed' | 'inheritance_disputed';\nexport type CardType = 'debit' | 'credit' | 'virtual';\nexport type CardStatus = 'active' | 'frozen' | 'cancelled';\nexport type NotificationType = 'transaction' | 'security' | 'account_update' | 'transfer' | 'bill_payment' | 'investment' | 'fraud_alert' | 'marketing' | 'system';\nexport type NotificationStatus = 'unread' | 'read' | 'archived';\nexport type BillStatus = 'pending' | 'paid' | 'failed' | 'cancelled';\nexport type InvestmentType = 'stocks' | 'mutual_funds' | 'savings_plan' | 'forex';\nexport type TicketStatus = 'open' | 'in_progress' | 'resolved' | 'closed';\nexport type TicketPriority = 'low' | 'medium' | 'high' | 'urgent';\nexport type LoanStatus = 'pending' | 'approved' | 'rejected' | 'active' | 'completed' | 'defaulted';\n","size_bytes":44586},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\nimport Home from \"@/pages/home\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport CustomerDashboard from \"@/pages/customer-dashboard\";\nimport Transfer from \"@/pages/transfer\";\nimport UserManagement from \"@/pages/user-management\";\nimport FindBranch from \"@/pages/find-branch\";\nimport Personal from \"@/pages/personal\";\nimport Business from \"@/pages/business\";\nimport Commercial from \"@/pages/commercial\";\nimport PrivateClient from \"@/pages/private-client\";\nimport Investing from \"@/pages/investing\";\nimport Products from \"@/pages/products\";\nimport Promotions from \"@/pages/promotions\";\nimport Services from \"@/pages/services\";\nimport Help from \"@/pages/help\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route path=\"/admin/users\" component={UserManagement} />\n      <Route path=\"/dashboard\" component={CustomerDashboard} />\n      <Route path=\"/transfer\" component={Transfer} />\n      <Route path=\"/find-branch\" component={FindBranch} />\n      <Route path=\"/personal\" component={Personal} />\n      <Route path=\"/business\" component={Business} />\n      <Route path=\"/commercial\" component={Commercial} />\n      <Route path=\"/private-client\" component={PrivateClient} />\n      <Route path=\"/investing\" component={Investing} />\n      <Route path=\"/products\" component={Products} />\n      <Route path=\"/promotions\" component={Promotions} />\n      <Route path=\"/services\" component={Services} />\n      <Route path=\"/help\" component={Help} />\n      <Route path=\"/home\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2346},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(224, 71%, 4%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(224, 71%, 4%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(224, 71%, 4%);\n  --primary: hsl(0, 100%, 93%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(0, 100%, 47%);\n  --radius: 0.5rem;\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n\n  /* Finora Colors */\n  --finora-primary: hsl(220, 70%, 50%);\n  --finora-secondary: hsl(174, 100%, 29%);\n  --finora-accent: hsl(199, 89%, 48%);\n  --finora-light: hsl(214, 100%, 97%);\n  --finora-dark: hsl(215, 28%, 17%);\n  \n  /* Font families */\n  --font-sans: 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n  --font-serif: ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif;\n  --font-mono: ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace;\n}\n\n.dark {\n  --background: hsl(224, 71%, 4%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(224, 71%, 4%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(224, 71%, 4%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(0, 100%, 93%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(215, 28%, 17%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(215, 28%, 17%);\n  --muted-foreground: hsl(218, 11%, 65%);\n  --accent: hsl(215, 28%, 17%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(0, 85%, 97%);\n  --border: hsl(215, 28%, 17%);\n  --input: hsl(215, 28%, 17%);\n  --ring: hsl(0, 100%, 47%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground font-sans;\n  }\n}\n\n@layer components {\n  .santander-red {\n    color: var(--santander-red);\n  }\n  \n  .bg-santander-red {\n    background-color: var(--santander-red);\n  }\n  \n  .bg-santander-dark {\n    background-color: var(--santander-dark);\n  }\n  \n  .border-santander-red {\n    border-color: var(--santander-red);\n  }\n  \n  .text-santander-red {\n    color: var(--santander-red);\n  }\n  \n  .text-santander-dark {\n    color: var(--santander-dark);\n  }\n  \n  .hover\\:bg-santander-red:hover {\n    background-color: var(--santander-red);\n  }\n  \n  .hover\\:bg-santander-dark:hover {\n    background-color: var(--santander-dark);\n  }\n  \n  .hover\\:text-santander-red:hover {\n    color: var(--santander-red);\n  }\n}\n\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--border));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--santander-red));\n}\n\n/* Animation utilities */\n.animate-fade-in {\n  animation: fadeIn 0.5s ease-in-out;\n}\n\n.animate-slide-up {\n  animation: slideUp 0.3s ease-out;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(10px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n/* Banking specific styles */\n.account-card {\n  @apply bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow duration-200;\n}\n\n.balance-text {\n  @apply font-mono text-2xl font-bold text-gray-900;\n}\n\n.transaction-item {\n  @apply flex items-center justify-between p-4 border-b border-gray-100 last:border-b-0 hover:bg-gray-50 transition-colors duration-150;\n}\n\n.status-badge {\n  @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;\n}\n\n.status-active {\n  @apply bg-green-100 text-green-800;\n}\n\n.status-frozen {\n  @apply bg-orange-100 text-orange-800;\n}\n\n.status-closed {\n  @apply bg-red-100 text-red-800;\n}\n\n/* Form enhancements */\n.form-input {\n  @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-finora-primary focus:ring-finora-primary sm:text-sm;\n}\n\n.form-label {\n  @apply block text-sm font-medium text-gray-700 mb-1;\n}\n\n/* Button variants */\n.btn-primary {\n  @apply bg-finora-primary text-white hover:bg-finora-dark focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 transition-colors duration-200;\n}\n\n.btn-secondary {\n  @apply bg-white text-finora-primary border border-finora-primary hover:bg-finora-primary hover:text-white focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 transition-colors duration-200;\n}\n\n/* Loading states */\n.loading-spinner {\n  @apply animate-spin rounded-full border-2 border-gray-300 border-t-finora-primary;\n}\n\n/* Responsive utilities */\n@media (max-width: 640px) {\n  .mobile-stack {\n    @apply flex-col space-y-2 space-x-0;\n  }\n  \n  .mobile-full {\n    @apply w-full;\n  }\n  \n  /* Fix text wrapping on mobile */\n  .mobile-text-wrap {\n    word-wrap: break-word;\n    overflow-wrap: break-word;\n  }\n  \n  /* Prevent horizontal scroll */\n  .mobile-no-overflow {\n    overflow-x: hidden;\n  }\n  \n  /* Better button spacing on mobile */\n  .mobile-button-spacing {\n    @apply space-y-2 space-x-0;\n  }\n}\n\n/* Extra small screens */\n@media (max-width: 375px) {\n  .xs-text-sm {\n    font-size: 0.75rem;\n    line-height: 1rem;\n  }\n  \n  .xs-p-2 {\n    padding: 0.5rem;\n  }\n  \n  .xs-gap-2 {\n    gap: 0.5rem;\n  }\n}\n\n/* Tab navigation improvements for mobile */\n@media (max-width: 768px) {\n  [role=\"tablist\"] button {\n    font-size: 0.75rem !important;\n    padding: 0.375rem 0.5rem !important;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n}\n\n/* Hide scrollbar for mobile tabs */\n.scrollbar-hide {\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n}\n\n.scrollbar-hide::-webkit-scrollbar {\n  display: none;\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n  \n  .print-break {\n    page-break-before: always;\n  }\n}\n\n/* Accessibility improvements */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n/* Focus states */\n.focus-visible:focus {\n  @apply outline-2 outline-offset-2 outline-finora-primary;\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  .bg-finora-primary {\n    background-color: #1E3A8A;\n  }\n  \n  .text-finora-primary {\n    color: #1E3A8A;\n  }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n","size_bytes":7566},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<User | null>({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: (failureCount, error: any) => {\n      // Don't retry on 401 errors\n      if (error?.message?.includes('401')) {\n        return false;\n      }\n      // Retry up to 2 times for other errors\n      return failureCount < 2;\n    },\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchInterval: false,\n    staleTime: 30 * 60 * 1000, // 30 minutes\n    gcTime: 60 * 60 * 1000, // 1 hour\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":813},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...data ? {} : {}\n    },\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1406},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminNavbar from \"@/components/ui/admin-navbar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport AccountManagement from \"@/components/admin/account-management\";\nimport TransferApproval from \"@/components/admin/transfer-approval\";\nimport AdminSupportTickets from \"@/components/admin/admin-support-tickets\";\nimport AuditLog from \"@/components/admin/audit-log\";\nimport InheritanceManagement from \"@/components/admin/inheritance-management\";\nimport NotificationManagement from \"@/components/admin/notification-management\";\nimport EmailConfiguration from \"@/components/admin/email-configuration\";\nimport UserManagement from \"@/pages/user-management\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Users, DollarSign, Activity, TrendingUp, AlertTriangle, CheckCircle, Clock } from \"lucide-react\";\n\nexport default function AdminDashboard() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  // Fetch real-time system statistics\n  const { data: stats, isLoading: statsLoading } = useQuery<any>({\n    queryKey: [\"/api/admin/stats\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n    retry: false,\n  });\n\n  // Fetch forex rates for additional dashboard info\n  const { data: forexRates } = useQuery<any>({\n    queryKey: [\"/api/forex-rates\"],\n    refetchInterval: 60000, // Refresh every minute\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n      return;\n    }\n    \n    if (!isLoading && user && user.role !== 'admin') {\n      toast({\n        title: \"Access Denied\",\n        description: \"You don't have admin privileges.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/dashboard\";\n      }, 2000);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finora-primary mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user || user.role !== 'admin') {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <AdminNavbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-admin-title\">Admin Dashboard</h1>\n          <p className=\"text-gray-600\">\n            Welcome back, {user.firstName} {user.lastName}\n          </p>\n        </div>\n\n        {/* Real-time Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-blue-700\">Total Users</CardTitle>\n              <Users className=\"h-4 w-4 text-blue-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-900\" data-testid=\"text-total-users\">\n                {statsLoading ? \"Loading...\" : stats?.users?.total || \"0\"}\n              </div>\n              <p className=\"text-xs text-blue-600 mt-1\">\n                {stats?.users?.newToday || 0} new today • {stats?.users?.activeNow || 0} online\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gradient-to-br from-green-50 to-green-100 border-green-200\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-green-700\">Active Accounts</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-900\" data-testid=\"text-active-accounts\">\n                {statsLoading ? \"Loading...\" : stats?.accounts?.active || \"0\"}\n              </div>\n              <p className=\"text-xs text-green-600 mt-1\">\n                {stats?.accounts?.frozen || 0} frozen • {stats?.accounts?.closed || 0} closed\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gradient-to-br from-red-50 to-red-100 border-red-200\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-red-700\">Pending Transfers</CardTitle>\n              <Clock className=\"h-4 w-4 text-red-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-900\" data-testid=\"text-pending-transfers\">\n                {statsLoading ? \"Loading...\" : stats?.transfers?.pending || \"0\"}\n              </div>\n              <p className=\"text-xs text-red-600 mt-1\">\n                {stats?.transfers?.completed || 0} completed • {stats?.transfers?.rejected || 0} rejected\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-purple-700\">Total Balance</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-purple-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-900\" data-testid=\"text-total-balance\">\n                {statsLoading ? \"Loading...\" : `$${(stats?.accounts?.totalBalance || 0).toLocaleString()}`}\n              </div>\n              <p className=\"text-xs text-purple-600 mt-1\">\n                Monthly Volume: ${(stats?.transactions?.monthlyVolume || 0).toLocaleString()}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Forex Rates Display */}\n        {forexRates && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                Live Exchange Rates (USD Base)\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                {forexRates.rates?.slice(0, 10).map((rate: any) => (\n                  <div key={rate.currency} className=\"text-center p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"font-semibold text-gray-900\">{rate.currency}</div>\n                    <div className=\"text-lg font-bold\">{rate.rate}</div>\n                    <div className={`text-sm ${\n                      parseFloat(rate.changePercent) >= 0 ? 'text-green-600' : 'text-red-600'\n                    }`}>\n                      {parseFloat(rate.changePercent) >= 0 ? '+' : ''}{rate.changePercent}%\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        <Tabs defaultValue=\"accounts\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-8\">\n            <TabsTrigger value=\"accounts\" data-testid=\"tab-accounts\">Account Management</TabsTrigger>\n            <TabsTrigger value=\"transfers\" data-testid=\"tab-transfers\">Transfer Approval</TabsTrigger>\n            <TabsTrigger value=\"inheritance\" data-testid=\"tab-inheritance\">Inheritance Management</TabsTrigger>\n            <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\">Notifications</TabsTrigger>\n            <TabsTrigger value=\"email\" data-testid=\"tab-email\">Email Configuration</TabsTrigger>\n            <TabsTrigger value=\"support\" data-testid=\"tab-support\">Support Tickets</TabsTrigger>\n            <TabsTrigger value=\"users\" data-testid=\"tab-users\">User Management</TabsTrigger>\n            <TabsTrigger value=\"audit\" data-testid=\"tab-audit\">Audit Log</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"accounts\">\n            <AccountManagement />\n          </TabsContent>\n          \n          <TabsContent value=\"transfers\">\n            <TransferApproval />\n          </TabsContent>\n          \n          <TabsContent value=\"inheritance\">\n            <InheritanceManagement />\n          </TabsContent>\n          \n          <TabsContent value=\"notifications\">\n            <NotificationManagement />\n          </TabsContent>\n          \n          <TabsContent value=\"email\">\n            <EmailConfiguration />\n          </TabsContent>\n          \n          <TabsContent value=\"support\">\n            <AdminSupportTickets />\n          </TabsContent>\n          \n          <TabsContent value=\"users\">\n            <UserManagement />\n          </TabsContent>\n          \n          <TabsContent value=\"audit\">\n            <AuditLog />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9752},"client/src/pages/customer-dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CustomerNavbar from \"@/components/ui/customer-navbar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport CustomerOverview from \"@/components/customer/customer-overview\";\nimport AccountOverview from \"@/components/customer/account-overview\";\nimport CardManagement from \"@/components/customer/card-management\";\nimport TransferCenter from \"@/components/customer/transfer-center\";\nimport BillPayments from \"@/components/customer/bill-payments\";\nimport InvestmentDashboard from \"@/components/customer/investment-dashboard\";\nimport CustomerProfile from \"@/components/customer/customer-profile\";\nimport CustomerSupport from \"@/components/customer/customer-support\";\nimport NotificationsCenter from \"@/components/notifications/notifications-center\";\nimport InheritanceManagement from \"@/components/customer/inheritance-management\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function CustomerDashboard() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Add small delay to prevent race condition with fresh logins\n    const timeoutId = setTimeout(() => {\n      if (!isLoading && !isAuthenticated) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/login\";\n        }, 500);\n        return;\n      }\n      \n      if (!isLoading && user && user.role === 'admin') {\n        window.location.href = \"/admin\";\n        return;\n      }\n    }, 150);\n\n    return () => clearTimeout(timeoutId);\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finora-primary mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <CustomerNavbar />\n      \n      <div className=\"max-w-7xl mx-auto px-2 sm:px-4 lg:px-8 py-4 sm:py-8\">\n        <div className=\"mb-6 sm:mb-8\">\n          <h1 className=\"text-xl sm:text-2xl md:text-3xl font-bold text-gray-900\" data-testid=\"text-customer-title\">Welcome to Finora Bank</h1>\n          <p className=\"text-sm sm:text-base text-gray-600 mt-1\">\n            Hello, {user.firstName} {user.lastName}\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          {/* Mobile: Horizontal scrollable tabs */}\n          <div className=\"sm:hidden\">\n            <div className=\"overflow-x-auto scrollbar-hide\">\n              <TabsList className=\"flex w-max min-w-full space-x-1 p-1\">\n                <TabsTrigger value=\"overview\" data-testid=\"tab-overview\" className=\"text-xs whitespace-nowrap px-3 py-2 min-w-[80px]\">Overview</TabsTrigger>\n                <TabsTrigger value=\"accounts\" data-testid=\"tab-accounts\" className=\"text-xs whitespace-nowrap px-3 py-2 min-w-[80px]\">Accounts</TabsTrigger>\n                <TabsTrigger value=\"cards\" data-testid=\"tab-cards\" className=\"text-xs whitespace-nowrap px-3 py-2 min-w-[70px]\">Cards</TabsTrigger>\n                <TabsTrigger value=\"transfers\" data-testid=\"tab-transfers\" className=\"text-xs whitespace-nowrap px-3 py-2 min-w-[80px]\">Transfers</TabsTrigger>\n                <TabsTrigger value=\"bills\" data-testid=\"tab-bills\" className=\"text-xs whitespace-nowrap px-3 py-2 min-w-[70px]\">Bill Pay</TabsTrigger>\n                <TabsTrigger value=\"investments\" data-testid=\"tab-investments\" className=\"text-xs whitespace-nowrap px-3 py-2 min-w-[90px]\">Investments</TabsTrigger>\n                <TabsTrigger value=\"inheritance\" data-testid=\"tab-inheritance\" className=\"text-xs whitespace-nowrap px-3 py-2 min-w-[90px]\">Inheritance</TabsTrigger>\n                <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\" className=\"text-xs whitespace-nowrap px-3 py-2 min-w-[100px]\">Notifications</TabsTrigger>\n                <TabsTrigger value=\"profile\" data-testid=\"tab-profile\" className=\"text-xs whitespace-nowrap px-3 py-2 min-w-[70px]\">Profile</TabsTrigger>\n                <TabsTrigger value=\"support\" data-testid=\"tab-support\" className=\"text-xs whitespace-nowrap px-3 py-2 min-w-[70px]\">Support</TabsTrigger>\n              </TabsList>\n            </div>\n          </div>\n          \n          {/* Desktop: Grid layout */}\n          <div className=\"hidden sm:block\">\n            <TabsList className=\"grid w-full grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-10 gap-1\">\n              <TabsTrigger value=\"overview\" data-testid=\"tab-overview\" className=\"text-xs sm:text-sm\">Overview</TabsTrigger>\n              <TabsTrigger value=\"accounts\" data-testid=\"tab-accounts\" className=\"text-xs sm:text-sm\">Accounts</TabsTrigger>\n              <TabsTrigger value=\"cards\" data-testid=\"tab-cards\" className=\"text-xs sm:text-sm\">Cards</TabsTrigger>\n              <TabsTrigger value=\"transfers\" data-testid=\"tab-transfers\" className=\"text-xs sm:text-sm\">Transfers</TabsTrigger>\n              <TabsTrigger value=\"bills\" data-testid=\"tab-bills\" className=\"text-xs sm:text-sm\">Bill Pay</TabsTrigger>\n              <TabsTrigger value=\"investments\" data-testid=\"tab-investments\" className=\"text-xs sm:text-sm\">Investments</TabsTrigger>\n              <TabsTrigger value=\"inheritance\" data-testid=\"tab-inheritance\" className=\"text-xs sm:text-sm\">Inheritance</TabsTrigger>\n              <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\" className=\"text-xs sm:text-sm\">Notifications</TabsTrigger>\n              <TabsTrigger value=\"profile\" data-testid=\"tab-profile\" className=\"text-xs sm:text-sm\">Profile</TabsTrigger>\n              <TabsTrigger value=\"support\" data-testid=\"tab-support\" className=\"text-xs sm:text-sm\">Support</TabsTrigger>\n            </TabsList>\n          </div>\n          \n          <TabsContent value=\"overview\">\n            <CustomerOverview />\n          </TabsContent>\n          \n          <TabsContent value=\"accounts\">\n            <AccountOverview />\n          </TabsContent>\n          \n          <TabsContent value=\"cards\">\n            <CardManagement />\n          </TabsContent>\n          \n          <TabsContent value=\"transfers\">\n            <TransferCenter />\n          </TabsContent>\n          \n          <TabsContent value=\"bills\">\n            <BillPayments />\n          </TabsContent>\n          \n          <TabsContent value=\"investments\">\n            <InvestmentDashboard />\n          </TabsContent>\n          \n          <TabsContent value=\"inheritance\">\n            <InheritanceManagement />\n          </TabsContent>\n          \n          <TabsContent value=\"notifications\">\n            <NotificationsCenter />\n          </TabsContent>\n          \n          <TabsContent value=\"profile\">\n            <CustomerProfile />\n          </TabsContent>\n          \n          <TabsContent value=\"support\">\n            <CustomerSupport />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7355},"client/src/pages/home.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Navbar from \"@/components/ui/navbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Home() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && user) {\n      // Redirect based on user role\n      if (user.role === 'admin') {\n        setLocation('/admin');\n      } else {\n        setLocation('/dashboard');\n      }\n    }\n  }, [user, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finora-primary mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar showLogin={false} />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            Welcome to Finora Bank\n          </h1>\n          <p className=\"text-lg text-gray-600 mb-8\">\n            Redirecting you to your dashboard...\n          </p>\n          \n          <Card className=\"max-w-md mx-auto\">\n            <CardHeader>\n              <CardTitle>Getting Started</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {user?.role === 'admin' ? (\n                <>\n                  <p className=\"text-gray-600\">You have admin access.</p>\n                  <Button \n                    onClick={() => setLocation('/admin')}\n                    className=\"w-full bg-finora-primary hover:bg-finora-dark\"\n                    data-testid=\"button-admin-dashboard\"\n                  >\n                    Go to Admin Dashboard\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <p className=\"text-gray-600\">Welcome to your banking portal.</p>\n                  <Button \n                    onClick={() => setLocation('/dashboard')}\n                    className=\"w-full bg-finora-primary hover:bg-finora-dark\"\n                    data-testid=\"button-customer-dashboard\"\n                  >\n                    Go to Dashboard\n                  </Button>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2698},"client/src/pages/landing.tsx":{"content":"import Navbar from \"@/components/ui/navbar\";\nimport HeroSlider from \"@/components/ui/hero-slider\";\nimport ServicesSection from \"@/components/ui/services-section\";\nimport { Button } from \"@/components/ui/button\";\nimport digitalBankingTeam from \"@assets/generated_images/diverse_digital_banking_team_89132ea5.png\";\nimport investmentConsulting from \"@assets/generated_images/diverse_investment_consulting_meeting_a8d646d1.png\";\nimport businessBankingMeeting from \"@assets/generated_images/diverse_business_banking_meeting_a56d3a4b.png\";\nimport personalFinancialPlanning from \"@assets/generated_images/diverse_personal_financial_planning_a89c4526.png\";\nimport professionalOnlineBanking from \"@assets/generated_images/diverse_professional_online_banking_2a63fb70.png\";\nimport familyFinancialPlanning from \"@assets/generated_images/diverse_family_financial_planning_cece0fd4.png\";\nimport customerService from \"@assets/generated_images/diverse_bank_customer_service_837f286b.png\";\nimport bankingConsultation from \"@assets/generated_images/diverse_banking_consultation_team_7a09bdfe.png\";\nimport { Building, CreditCard, Smartphone, PiggyBank, FileText, TrendingUp, Users, ShoppingCart, Calendar, ArrowRight, Download, Award, DollarSign, Gift } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Landing() {\n  const [location, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navbar showLogin={true} />\n\n      {/* Dynamic Hero Section with Image Slider */}\n      <HeroSlider />\n      \n      {/* Re-add Services Section */}\n      <ServicesSection />\n\n      {/* Service Icons Section */}\n      <section className=\"py-16 bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-4 sm:gap-6 lg:gap-8 text-center\">\n            <div className=\"flex flex-col items-center group cursor-pointer\" onClick={() => setLocation(\"/products?category=accounts-deposits\")}>\n              <div className=\"w-12 h-12 sm:w-16 sm:h-16 rounded-full bg-gray-100 flex items-center justify-center mb-2 sm:mb-4 group-hover:bg-finora-primary group-hover:bg-opacity-10 transition-colors duration-200\">\n                <Building className=\"w-6 h-6 sm:w-8 sm:h-8 text-finora-primary\" />\n              </div>\n              <span className=\"text-xs sm:text-sm font-medium text-gray-700 group-hover:text-finora-primary transition-colors duration-200 text-center leading-tight\">Accounts & Deposits</span>\n            </div>\n            <div className=\"flex flex-col items-center group cursor-pointer\" onClick={() => setLocation(\"/products?category=personal-loans\")}>\n              <div className=\"w-12 h-12 sm:w-16 sm:h-16 rounded-full bg-gray-100 flex items-center justify-center mb-2 sm:mb-4 group-hover:bg-finora-primary group-hover:bg-opacity-10 transition-colors duration-200\">\n                <FileText className=\"w-6 h-6 sm:w-8 sm:h-8 text-finora-primary\" />\n              </div>\n              <span className=\"text-xs sm:text-sm font-medium text-gray-700 group-hover:text-finora-primary transition-colors duration-200 text-center leading-tight\">Personal Loans</span>\n            </div>\n            <div className=\"flex flex-col items-center group cursor-pointer\" onClick={() => setLocation(\"/investing\")}>\n              <div className=\"w-12 h-12 sm:w-16 sm:h-16 rounded-full bg-gray-100 flex items-center justify-center mb-2 sm:mb-4 group-hover:bg-finora-primary group-hover:bg-opacity-10 transition-colors duration-200\">\n                <TrendingUp className=\"w-6 h-6 sm:w-8 sm:h-8 text-finora-primary\" />\n              </div>\n              <span className=\"text-xs sm:text-sm font-medium text-gray-700 group-hover:text-finora-primary transition-colors duration-200 text-center leading-tight\">Wealth</span>\n            </div>\n            <div className=\"flex flex-col items-center group cursor-pointer\" onClick={() => setLocation(\"/products?category=rewards\")}>\n              <div className=\"w-12 h-12 sm:w-16 sm:h-16 rounded-full bg-gray-100 flex items-center justify-center mb-2 sm:mb-4 group-hover:bg-finora-primary group-hover:bg-opacity-10 transition-colors duration-200\">\n                <Award className=\"w-6 h-6 sm:w-8 sm:h-8 text-finora-primary\" />\n              </div>\n              <span className=\"text-xs sm:text-sm font-medium text-gray-700 group-hover:text-finora-primary transition-colors duration-200 text-center leading-tight\">Rewards</span>\n            </div>\n            <div className=\"flex flex-col items-center group cursor-pointer\" onClick={() => setLocation(\"/products?category=debit-cards\")}>\n              <div className=\"w-12 h-12 sm:w-16 sm:h-16 rounded-full bg-gray-100 flex items-center justify-center mb-2 sm:mb-4 group-hover:bg-finora-primary group-hover:bg-opacity-10 transition-colors duration-200\">\n                <CreditCard className=\"w-6 h-6 sm:w-8 sm:h-8 text-finora-primary\" />\n              </div>\n              <span className=\"text-xs sm:text-sm font-medium text-gray-700 group-hover:text-finora-primary transition-colors duration-200 text-center leading-tight\">Debit Cards</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Mobile Banking Section - Re-added from old design */}\n      <section className=\"bg-finora-primary py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center text-white mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Finora Mobile Banking</h2>\n            <p className=\"text-lg opacity-90\">Bank anywhere, anytime with our award-winning mobile app</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 sm:gap-8 md:gap-12 items-center\">\n            <div className=\"text-white\">\n              <h3 className=\"text-2xl font-bold mb-6\">Download our highly-rated app</h3>\n              <p className=\"mb-6 opacity-90\">4.7 out of 5 Rating. Based on 379k ratings on the App Store</p>\n              \n              <div className=\"flex space-x-4 mb-8\">\n                <div className=\"bg-white bg-opacity-20 px-4 py-2 rounded-lg\">\n                  <span className=\"text-sm font-medium\">App Store</span>\n                </div>\n                <div className=\"bg-white bg-opacity-20 px-4 py-2 rounded-lg\">\n                  <span className=\"text-sm font-medium\">Google Play</span>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <p className=\"font-semibold\">Get started with mobile banking:</p>\n                <button onClick={() => setLocation(\"/dashboard\")} className=\"block text-green-200 hover:text-white transition-colors text-left\">• Mobile Check Deposit</button>\n                <button onClick={() => setLocation(\"/dashboard\")} className=\"block text-green-200 hover:text-white transition-colors text-left\">• Set up Alerts</button>\n                <button onClick={() => setLocation(\"/dashboard\")} className=\"block text-green-200 hover:text-white transition-colors text-left\">• Manage Cards</button>\n                <button onClick={() => setLocation(\"/transfer\")} className=\"block text-green-200 hover:text-white transition-colors text-left\">• Transfer Money</button>\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"bg-white bg-opacity-10 rounded-lg p-8 cursor-pointer\" onClick={() => window.open(\"https://apps.apple.com/app/finora-mobile\", \"_blank\")}>\n                <Smartphone className=\"w-24 h-24 text-white mx-auto mb-4\" />\n                <p className=\"text-white opacity-90 mb-4\">Mobile Banking App Preview</p>\n                <div className=\"space-y-2 text-sm text-white opacity-80\">\n                  <p>✓ Instant account access</p>\n                  <p>✓ Secure biometric login</p>\n                  <p>✓ Real-time notifications</p>\n                  <p>✓ Bill pay & transfers</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Promotions Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">Promotions</h2>\n            <button onClick={() => setLocation(\"/promotions\")} className=\"text-finora-primary hover:underline text-sm font-medium\">View More</button>\n          </div>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 cursor-pointer\" onClick={() => setLocation(\"/dashboard\")}>\n              <img \n                src={digitalBankingTeam}\n                alt=\"Digital banking promotion\" \n                className=\"w-full h-48 object-cover\"\n              />\n              <div className=\"p-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Experience simplified account opening with FinoraOneBank</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">Open your banking experience at a branch with the OneBank mobile banking app.</p>\n                <p className=\"text-xs text-gray-500\">Offer valid through Dec 31, 2025</p>\n              </div>\n            </div>\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 cursor-pointer\" onClick={() => setLocation(\"/products?category=credit-cards\")}>\n              <img \n                src={investmentConsulting}\n                alt=\"Credit card promotion\" \n                className=\"w-full h-48 object-cover\"\n              />\n              <div className=\"p-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Get Great Local Privileges</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">Get exclusive discounts and offers with your Finora card at participating merchants.</p>\n                <p className=\"text-xs text-gray-500\">Terms and conditions apply</p>\n              </div>\n            </div>\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 cursor-pointer\" onClick={() => setLocation(\"/business\")}>\n              <img \n                src={businessBankingMeeting}\n                alt=\"Business banking promotion\" \n                className=\"w-full h-48 object-cover\"\n              />\n              <div className=\"p-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Business Growth Solutions</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">Unlock your business potential with our comprehensive banking solutions.</p>\n                <p className=\"text-xs text-gray-500\">Contact us for more details</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Banking for Individuals Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-12\">Banking for Individuals</h2>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n              <img \n                src={personalFinancialPlanning}\n                alt=\"Personal Banking\" \n                className=\"w-full h-48 object-cover\"\n              />\n              <div className=\"p-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Personal Banking</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">Comprehensive personal banking solutions for all your financial needs.</p>\n                <button onClick={() => setLocation(\"/personal\")} className=\"text-finora-primary text-sm font-medium hover:underline\">Learn more</button>\n              </div>\n            </div>\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n              <img \n                src={professionalOnlineBanking}\n                alt=\"Digital Banking\" \n                className=\"w-full h-48 object-cover\"\n              />\n              <div className=\"p-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Digital Banking</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">Banking at your fingertips with our advanced digital platform.</p>\n                <button onClick={() => setLocation(\"/dashboard\")} className=\"text-finora-primary text-sm font-medium hover:underline\">Get started</button>\n              </div>\n            </div>\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n              <img \n                src={familyFinancialPlanning}\n                alt=\"Islamic Banking\" \n                className=\"w-full h-48 object-cover\"\n              />\n              <div className=\"p-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Islamic Banking</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">Sharia-compliant banking solutions designed for your values.</p>\n                <button onClick={() => setLocation(\"/products?category=islamic-banking\")} className=\"text-finora-primary text-sm font-medium hover:underline\">Explore</button>\n              </div>\n            </div>\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n              <img \n                src={customerService}\n                alt=\"Priority Banking\" \n                className=\"w-full h-48 object-cover\"\n              />\n              <div className=\"p-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Priority Banking</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">Exclusive banking services for our valued priority customers.</p>\n                <button onClick={() => setLocation(\"/private-client\")} className=\"text-finora-primary text-sm font-medium hover:underline\">Learn more</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Banking for Companies Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-12\">Banking for Companies</h2>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n              <img \n                src={businessBankingMeeting}\n                alt=\"Business Banking\" \n                className=\"w-full h-48 object-cover\"\n              />\n              <div className=\"p-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Business Banking</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">Streamlined banking solutions designed for small and medium enterprises.</p>\n                <button onClick={() => setLocation(\"/business\")} className=\"text-finora-primary text-sm font-medium hover:underline\">Learn more</button>\n              </div>\n            </div>\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n              <img \n                src={bankingConsultation}\n                alt=\"Corporate Banking\" \n                className=\"w-full h-48 object-cover\"\n              />\n              <div className=\"p-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Corporate Banking</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">Comprehensive corporate solutions for large enterprises and institutions.</p>\n                <button onClick={() => setLocation(\"/commercial\")} className=\"text-finora-primary text-sm font-medium hover:underline\">Discover</button>\n              </div>\n            </div>\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n              <img \n                src={investmentConsulting}\n                alt=\"Trade Finance\" \n                className=\"w-full h-48 object-cover\"\n              />\n              <div className=\"p-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Trade Finance</h3>\n                <p className=\"text-gray-600 text-sm mb-4\">International trade finance solutions to support your global business.</p>\n                <button onClick={() => setLocation(\"/commercial\")} className=\"text-finora-primary text-sm font-medium hover:underline\">Get started</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* What's New Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-12\">What's New</h2>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-5 gap-6\">\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 cursor-pointer\" onClick={() => window.open(\"https://apps.apple.com/app/finora-mobile\", \"_blank\")}>\n              <img \n                src={digitalBankingTeam}\n                alt=\"Bank branch expansion\" \n                className=\"w-full h-32 object-cover\"\n              />\n              <div className=\"p-4\">\n                <p className=\"text-sm text-gray-600 mb-2\">Stay in touch everywhere you are with our mobile app.</p>\n              </div>\n            </div>\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 cursor-pointer\" onClick={() => setLocation(\"/dashboard\")}>\n              <img \n                src={professionalOnlineBanking}\n                alt=\"Digital innovation\" \n                className=\"w-full h-32 object-cover\"\n              />\n              <div className=\"p-4\">\n                <p className=\"text-sm text-gray-600 mb-2\">Learn more about our world-class internet banking platform and online tools.</p>\n              </div>\n            </div>\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 cursor-pointer\" onClick={() => setLocation(\"/investing\")}>\n              <img \n                src={investmentConsulting}\n                alt=\"Investment opportunities\" \n                className=\"w-full h-32 object-cover\"\n              />\n              <div className=\"p-4\">\n                <p className=\"text-sm text-gray-600 mb-2\">Explore the trading, budgeting and analytics tools available on our platform.</p>\n              </div>\n            </div>\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 cursor-pointer\" onClick={() => setLocation(\"/help\")}>\n              <img \n                src={customerService}\n                alt=\"Customer support\" \n                className=\"w-full h-32 object-cover\"\n              />\n              <div className=\"p-4\">\n                <p className=\"text-sm text-gray-600 mb-2\">Learn all about how to quickly and easily open your first account.</p>\n              </div>\n            </div>\n            <div className=\"bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 cursor-pointer\" onClick={() => setLocation(\"/services\")}>\n              <img \n                src={familyFinancialPlanning}\n                alt=\"Financial planning\" \n                className=\"w-full h-32 object-cover\"\n              />\n              <div className=\"p-4\">\n                <p className=\"text-sm text-gray-600 mb-2\">Get hands-on experience with our technology and innovation.</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section 1 */}\n      <section className=\"relative py-24 bg-gradient-to-r from-finora-primary to-finora-dark\">\n        <div \n          className=\"absolute inset-0 bg-cover bg-center opacity-20\"\n          style={{\n            backgroundImage: `url(${digitalBankingTeam})`\n          }}\n        />\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-white mb-6\">\n            LET US UNDERSTAND EXACTLY\n          </h2>\n          <h3 className=\"text-2xl md:text-3xl font-bold text-white mb-8\">\n            What your business requires\n          </h3>\n          <Button \n            onClick={() => setLocation(\"/business\")}\n            className=\"bg-white text-finora-primary hover:bg-gray-100 px-8 py-4 text-lg font-semibold rounded-md\"\n            data-testid=\"button-learn-more\"\n          >\n            LEARN MORE\n          </Button>\n        </div>\n      </section>\n\n      {/* CTA Section 2 */}\n      <section className=\"relative py-24 bg-gradient-to-r from-green-600 to-green-800\">\n        <div \n          className=\"absolute inset-0 bg-cover bg-center opacity-20\"\n          style={{\n            backgroundImage: `url(${bankingConsultation})`\n          }}\n        />\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-white mb-6\">\n            INVEST WITH OUR TEAM AS WE\n          </h2>\n          <h3 className=\"text-2xl md:text-3xl font-bold text-white mb-8\">\n            Get amazing results you expected\n          </h3>\n          <Button \n            onClick={() => setLocation(\"/investing\")}\n            className=\"bg-white text-green-700 hover:bg-gray-100 px-8 py-4 text-lg font-semibold rounded-md\"\n            data-testid=\"button-get-started\"\n          >\n            GET STARTED\n          </Button>\n        </div>\n      </section>\n\n      {/* Important Information Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-8\">Important Information</h2>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between py-3 border-b border-gray-200\">\n              <div className=\"flex items-center\">\n                <Calendar className=\"w-5 h-5 text-finora-primary mr-3\" />\n                <span className=\"font-medium text-gray-900\">November 1, 2024</span>\n              </div>\n              <span className=\"text-gray-600\">Notice of Proposed Account Changes</span>\n            </div>\n            <div className=\"flex items-center justify-between py-3 border-b border-gray-200\">\n              <div className=\"flex items-center\">\n                <Calendar className=\"w-5 h-5 text-finora-primary mr-3\" />\n                <span className=\"font-medium text-gray-900\">May 15, 2024</span>\n              </div>\n              <span className=\"text-gray-600\">Online Payment Account Update</span>\n            </div>\n            <div className=\"flex items-center justify-between py-3 border-b border-gray-200\">\n              <div className=\"flex items-center\">\n                <Calendar className=\"w-5 h-5 text-finora-primary mr-3\" />\n                <span className=\"font-medium text-gray-900\">July 30, 2024</span>\n              </div>\n              <span className=\"text-gray-600\">Get The 2024 Financial Statement</span>\n            </div>\n            <div className=\"flex items-center justify-between py-3\">\n              <div className=\"flex items-center\">\n                <Calendar className=\"w-5 h-5 text-finora-primary mr-3\" />\n                <span className=\"font-medium text-gray-900\">July 2, 2024</span>\n              </div>\n              <span className=\"text-gray-600\">Online More Than Anticipated Currently</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-5 gap-8\">\n            <div>\n              <h3 className=\"font-semibold text-lg mb-4\">ABOUT US</h3>\n              <ul className=\"space-y-2 text-gray-300\">\n                <li><button onClick={() => setLocation(\"/services\")} className=\"hover:text-white transition-colors duration-200 text-left\">PROFILE</button></li>\n                <li><button onClick={() => setLocation(\"/services\")} className=\"hover:text-white transition-colors duration-200 text-left\">HISTORY</button></li>\n                <li><button onClick={() => setLocation(\"/services\")} className=\"hover:text-white transition-colors duration-200 text-left\">LEADERSHIP</button></li>\n                <li><button onClick={() => setLocation(\"/services\")} className=\"hover:text-white transition-colors duration-200 text-left\">COMMUNITY</button></li>\n                <li><button onClick={() => setLocation(\"/services\")} className=\"hover:text-white transition-colors duration-200 text-left\">SHAREHOLDER RELATIONS</button></li>\n                <li><button onClick={() => setLocation(\"/services\")} className=\"hover:text-white transition-colors duration-200 text-left\">SUSTAINABILITY</button></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-lg mb-4\">CAREERS</h3>\n              <ul className=\"space-y-2 text-gray-300\">\n                <li><button onClick={() => setLocation(\"/help\")} className=\"hover:text-white transition-colors duration-200 text-left\">EXPLORE OPPORTUNITIES</button></li>\n                <li><button onClick={() => setLocation(\"/help\")} className=\"hover:text-white transition-colors duration-200 text-left\">STUDENT PROGRAMS</button></li>\n                <li><button onClick={() => setLocation(\"/help\")} className=\"hover:text-white transition-colors duration-200 text-left\">BENEFITS</button></li>\n                <li><button onClick={() => setLocation(\"/help\")} className=\"hover:text-white transition-colors duration-200 text-left\">DIVERSITY & INCLUSION</button></li>\n                <li><button onClick={() => setLocation(\"/help\")} className=\"hover:text-white transition-colors duration-200 text-left\">MILITARY HIRING</button></li>\n                <li><button onClick={() => setLocation(\"/help\")} className=\"hover:text-white transition-colors duration-200 text-left\">CAMPUS RECRUITING</button></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-lg mb-4\">CUSTOMER SERVICE</h3>\n              <ul className=\"space-y-2 text-gray-300\">\n                <li><button onClick={() => setLocation(\"/help\")} className=\"hover:text-white transition-colors duration-200 text-left\">CONTACT US</button></li>\n                <li><button onClick={() => setLocation(\"/find-branch\")} className=\"hover:text-white transition-colors duration-200 text-left\">BRANCH LOCATOR</button></li>\n                <li><button onClick={() => setLocation(\"/find-branch\")} className=\"hover:text-white transition-colors duration-200 text-left\">ATM LOCATOR</button></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">ORDER CHECKS</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">ROUTING NUMBER</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">CUSTOMER FEEDBACK</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-lg mb-4\">LEGAL</h3>\n              <ul className=\"space-y-2 text-gray-300\">\n                <li><button onClick={() => setLocation(\"/help\")} className=\"hover:text-white transition-colors duration-200 text-left\">PRIVACY POLICY</button></li>\n                <li><button onClick={() => setLocation(\"/help\")} className=\"hover:text-white transition-colors duration-200 text-left\">TERMS OF USE</button></li>\n                <li><button onClick={() => setLocation(\"/help\")} className=\"hover:text-white transition-colors duration-200 text-left\">ACCESSIBILITY</button></li>\n                <li><button onClick={() => setLocation(\"/help\")} className=\"hover:text-white transition-colors duration-200 text-left\">SECURITY CENTER</button></li>\n                <li><button onClick={() => setLocation(\"/help\")} className=\"hover:text-white transition-colors duration-200 text-left\">SITE MAP</button></li>\n                <li><button onClick={() => setLocation(\"/help\")} className=\"hover:text-white transition-colors duration-200 text-left\">FRAUD PREVENTION</button></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-lg mb-4\">MOBILE APPS</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex space-x-2\">\n                  <img \n                    src=\"https://developer.apple.com/assets/elements/badges/download-on-the-app-store.svg\" \n                    alt=\"Download on App Store\" \n                    className=\"h-10\"\n                  />\n                </div>\n                <div>\n                  <img \n                    src=\"https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png\" \n                    alt=\"Get it on Google Play\" \n                    className=\"h-10\"\n                  />\n                </div>\n              </div>\n              <div className=\"mt-8\">\n                <h4 className=\"font-semibold text-sm mb-4\">FOLLOW US</h4>\n                <div className=\"flex space-x-4\">\n                  <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors duration-200\">\n                    <i className=\"fab fa-facebook text-xl\"></i>\n                  </a>\n                  <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors duration-200\">\n                    <i className=\"fab fa-twitter text-xl\"></i>\n                  </a>\n                  <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors duration-200\">\n                    <i className=\"fab fa-linkedin text-xl\"></i>\n                  </a>\n                  <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors duration-200\">\n                    <i className=\"fab fa-instagram text-xl\"></i>\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-700 mt-8 pt-8\">\n            <div className=\"text-xs text-gray-400 text-center\">\n              © 2025 Finora Bank, N.A. All rights reserved. Member FDIC. Equal Housing Lender.\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":30627},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { loginSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, EyeOff } from \"lucide-react\";\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const response = await apiRequest(\"POST\", \"/api/login\", data);\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      // Set user data directly in cache instead of invalidating to prevent race condition\n      queryClient.setQueryData([\"/api/auth/user\"], data.user);\n      \n      toast({\n        title: \"Login successful\",\n        description: \"Welcome back!\",\n      });\n      \n      // Small delay to ensure cache is updated before redirect\n      setTimeout(() => {\n        // Redirect based on user role\n        if (data.user?.role === 'admin') {\n          setLocation(\"/admin\");\n        } else {\n          setLocation(\"/dashboard\");\n        }\n      }, 100);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Login failed\",\n        description: error.message || \"Invalid email or password\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-finora-primary to-finora-dark flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\" data-testid=\"card-login\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\" data-testid=\"text-login-title\">\n            Sign in to Finora\n          </CardTitle>\n          <CardDescription className=\"text-center\" data-testid=\"text-login-description\">\n            Enter your credentials to access your account\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"your.email@example.com\"\n                        type=\"email\"\n                        data-testid=\"input-email\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          placeholder=\"Enter your password\"\n                          type={showPassword ? \"text\" : \"password\"}\n                          data-testid=\"input-password\"\n                          {...field}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          data-testid=\"button-toggle-password\"\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4 text-gray-500\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4 text-gray-500\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-finora-primary hover:bg-finora-dark\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? \"Signing in...\" : \"Sign in\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Admin credentials: admin@admin.com / admin123\n            </p>\n          </div>\n\n          <div className=\"mt-4 text-center\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation(\"/\")}\n              data-testid=\"button-back-home\"\n            >\n              ← Back to home\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5868},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/transfer.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Navbar from \"@/components/ui/navbar\";\nimport TransferForm from \"@/components/customer/transfer-form\";\n\nexport default function Transfer() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-finora-primary mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar showLogin={false} />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-transfer-title\">Transfer Money</h1>\n          <p className=\"text-gray-600\">\n            Send money securely to any account\n          </p>\n        </div>\n\n        <TransferForm />\n      </div>\n    </div>\n  );\n}\n","size_bytes":1607},"client/src/pages/user-management.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, EyeOff, Plus, Users, MoreHorizontal, Edit, Trash, Key, Mail } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\nconst createUserSchema = z.object({\n  email: z.string().email(\"Valid email required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().min(1, \"First name required\"),\n  lastName: z.string().min(1, \"Last name required\"),\n  role: z.enum([\"admin\", \"customer\"], { required_error: \"Role is required\" }),\n});\n\ntype CreateUserForm = z.infer<typeof createUserSchema>;\n\nexport default function UserManagement() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CreateUserForm>({\n    resolver: zodResolver(createUserSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"customer\",\n    },\n  });\n\n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: CreateUserForm) => {\n      const response = await fetch(\"/api/admin/users\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to create user\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User created successfully\",\n        description: \"The new user account has been created.\",\n      });\n      form.reset();\n      setIsDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to create user\",\n        description: error.message || \"An error occurred while creating the user.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateUserForm) => {\n    createUserMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Users className=\"h-6 w-6 text-finora-primary\" />\n          <h1 className=\"text-2xl font-bold\" data-testid=\"text-user-management-title\">User Management</h1>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-finora-primary hover:bg-finora-dark\" data-testid=\"button-add-user\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add User\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Create New User</DialogTitle>\n              <DialogDescription>\n                Add a new customer or admin user to the system.\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"John\" data-testid=\"input-first-name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Doe\" data-testid=\"input-last-name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"john.doe@example.com\" \n                          type=\"email\"\n                          data-testid=\"input-user-email\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            placeholder=\"Enter password\"\n                            type={showPassword ? \"text\" : \"password\"}\n                            data-testid=\"input-user-password\"\n                            {...field}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"button-toggle-user-password\"\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-gray-500\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-gray-500\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Role</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-user-role\">\n                            <SelectValue placeholder=\"Select a role\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"customer\">Customer</SelectItem>\n                          <SelectItem value=\"admin\">Admin</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsDialogOpen(false)}\n                    className=\"flex-1\"\n                    data-testid=\"button-cancel-user\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1 bg-finora-primary hover:bg-finora-dark\"\n                    disabled={createUserMutation.isPending}\n                    data-testid=\"button-create-user\"\n                  >\n                    {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>System Users</CardTitle>\n          <CardDescription>\n            Manage all user accounts in the system\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">Loading users...</div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Role</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {users?.map((user) => (\n                  <TableRow key={user.id} data-testid={`row-user-${user.id}`}>\n                    <TableCell data-testid={`text-user-name-${user.id}`}>\n                      {user.firstName} {user.lastName}\n                    </TableCell>\n                    <TableCell data-testid={`text-user-email-${user.id}`}>\n                      {user.email}\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant={user.role === 'admin' ? 'destructive' : 'default'}\n                        data-testid={`badge-user-role-${user.id}`}\n                      >\n                        {user.role}\n                      </Badge>\n                    </TableCell>\n                    <TableCell data-testid={`text-user-created-${user.id}`}>\n                      {user.createdAt ? new Date(user.createdAt).toLocaleDateString() : \"N/A\"}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <UserActionMenu user={user} onRefresh={() => queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] })} />\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// User Action Menu Component\ninterface UserActionMenuProps {\n  user: User;\n  onRefresh: () => void;\n}\n\nfunction UserActionMenu({ user, onRefresh }: UserActionMenuProps) {\n  const { toast } = useToast();\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [isPasswordResetDialogOpen, setIsPasswordResetDialogOpen] = useState(false);\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"DELETE\", `/api/admin/users/${userId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n      setIsDeleteDialogOpen(false);\n      onRefresh();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetPasswordMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"POST\", `/api/admin/users/${userId}/reset-password`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Password reset email sent to user\",\n      });\n      setIsPasswordResetDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reset password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleRoleMutation = useMutation({\n    mutationFn: async ({ userId, newRole }: { userId: string; newRole: string }) => {\n      await apiRequest(\"PUT\", `/api/admin/users/${userId}`, { role: newRole });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n      onRefresh();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            className=\"h-8 w-8 p-0\"\n            data-testid={`button-user-actions-${user.id}`}\n          >\n            <span className=\"sr-only\">Open menu</span>\n            <MoreHorizontal className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuItem onClick={() => setIsEditDialogOpen(true)}>\n            <Edit className=\"mr-2 h-4 w-4\" />\n            Edit User\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => setIsPasswordResetDialogOpen(true)}>\n            <Key className=\"mr-2 h-4 w-4\" />\n            Reset Password\n          </DropdownMenuItem>\n          <DropdownMenuItem\n            onClick={() => {\n              const newRole = user.role === 'admin' ? 'customer' : 'admin';\n              toggleRoleMutation.mutate({ userId: user.id, newRole });\n            }}\n          >\n            <Mail className=\"mr-2 h-4 w-4\" />\n            Toggle Role ({user.role === 'admin' ? 'Make Customer' : 'Make Admin'})\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem\n            className=\"text-red-600\"\n            onClick={() => setIsDeleteDialogOpen(true)}\n          >\n            <Trash className=\"mr-2 h-4 w-4\" />\n            Delete User\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      {/* Edit User Dialog */}\n      <EditUserDialog\n        user={user}\n        isOpen={isEditDialogOpen}\n        onOpenChange={setIsEditDialogOpen}\n        onSuccess={() => {\n          onRefresh();\n          setIsEditDialogOpen(false);\n        }}\n      />\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Confirm Delete User</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to delete {user.firstName} {user.lastName}? \n              This action cannot be undone and will permanently remove all associated data.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex justify-end space-x-2\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setIsDeleteDialogOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => deleteUserMutation.mutate(user.id)}\n              disabled={deleteUserMutation.isPending}\n            >\n              {deleteUserMutation.isPending ? \"Deleting...\" : \"Delete User\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Password Reset Confirmation Dialog */}\n      <Dialog open={isPasswordResetDialogOpen} onOpenChange={setIsPasswordResetDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Reset Password</DialogTitle>\n            <DialogDescription>\n              Send a password reset email to {user.email}?\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex justify-end space-x-2\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setIsPasswordResetDialogOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={() => resetPasswordMutation.mutate(user.id)}\n              disabled={resetPasswordMutation.isPending}\n              className=\"bg-finora-primary hover:bg-finora-primary/90\"\n            >\n              {resetPasswordMutation.isPending ? \"Sending...\" : \"Send Reset Email\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\n// Edit User Dialog Component\ninterface EditUserDialogProps {\n  user: User;\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSuccess: () => void;\n}\n\nfunction EditUserDialog({ user, isOpen, onOpenChange, onSuccess }: EditUserDialogProps) {\n  const { toast } = useToast();\n  const form = useForm<CreateUserForm>({\n    resolver: zodResolver(createUserSchema.omit({ password: true })),\n    defaultValues: {\n      firstName: user.firstName,\n      lastName: user.lastName || '',\n      email: user.email,\n      role: user.role,\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      await apiRequest(\"PUT\", `/api/admin/users/${user.id}`, userData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"User updated successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (values: any) => {\n    updateUserMutation.mutate(values);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Edit User</DialogTitle>\n          <DialogDescription>\n            Update user information for {user.firstName} {user.lastName}\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"firstName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>First Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"John\" {...field} data-testid=\"input-edit-first-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"lastName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Last Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Doe\" {...field} data-testid=\"input-edit-last-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"john.doe@example.com\" {...field} data-testid=\"input-edit-email\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"role\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Role</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-edit-role\">\n                        <SelectValue placeholder=\"Select a role\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"customer\">Customer</SelectItem>\n                      <SelectItem value=\"admin\">Admin</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <div className=\"flex space-x-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"flex-1 bg-finora-primary hover:bg-finora-primary/90\"\n                disabled={updateUserMutation.isPending}\n              >\n                {updateUserMutation.isPending ? \"Updating...\" : \"Update User\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":22149},"client/src/components/admin/account-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { User, Account } from \"@shared/schema\";\n\nexport default function AccountManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedAccount, setSelectedAccount] = useState<Account | null>(null);\n  const [amount, setAmount] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [newStatus, setNewStatus] = useState(\"\");\n  const [statusReason, setStatusReason] = useState(\"\");\n  const [emailSubject, setEmailSubject] = useState(\"\");\n  const [emailMessage, setEmailMessage] = useState(\"\");\n  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n    retry: false,\n  });\n\n  const { data: accounts = [], isLoading: accountsLoading } = useQuery<Account[]>({\n    queryKey: [\"/api/admin/accounts\"],\n    retry: false,\n  });\n\n  const creditMutation = useMutation({\n    mutationFn: async ({ accountId, amount, description }: { accountId: string; amount: string; description: string }) => {\n      await apiRequest(\"POST\", `/api/admin/accounts/${accountId}/credit`, { amount, description });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Account credited successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/accounts\"] });\n      setAmount(\"\");\n      setDescription(\"\");\n      setSelectedAccount(null);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const debitMutation = useMutation({\n    mutationFn: async ({ accountId, amount, description }: { accountId: string; amount: string; description: string }) => {\n      await apiRequest(\"POST\", `/api/admin/accounts/${accountId}/debit`, { amount, description });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Account debited successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/accounts\"] });\n      setAmount(\"\");\n      setDescription(\"\");\n      setSelectedAccount(null);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const statusMutation = useMutation({\n    mutationFn: async ({ accountId, status, reason }: { accountId: string; status: string; reason: string }) => {\n      await apiRequest(\"POST\", `/api/admin/accounts/${accountId}/status`, { status, reason });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Account status updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/accounts\"] });\n      setNewStatus(\"\");\n      setStatusReason(\"\");\n      setSelectedAccount(null);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const emailMutation = useMutation({\n    mutationFn: async ({ userIds, subject, message }: { userIds: string[]; subject: string; message: string }) => {\n      await apiRequest(\"POST\", \"/api/admin/email\", { userIds, subject, message });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Email sent successfully\",\n      });\n      setEmailSubject(\"\");\n      setEmailMessage(\"\");\n      setSelectedUsers([]);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCredit = () => {\n    if (!selectedAccount || !amount || !description) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    creditMutation.mutate({ accountId: selectedAccount.id, amount, description });\n  };\n\n  const handleDebit = () => {\n    if (!selectedAccount || !amount || !description) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    debitMutation.mutate({ accountId: selectedAccount.id, amount, description });\n  };\n\n  const handleStatusUpdate = () => {\n    if (!selectedAccount || !newStatus) {\n      toast({\n        title: \"Error\",\n        description: \"Please select an account and status\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    statusMutation.mutate({ accountId: selectedAccount.id, status: newStatus, reason: statusReason });\n  };\n\n  const handleSendEmail = () => {\n    if (!emailSubject || !emailMessage || selectedUsers.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields and select at least one user\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    emailMutation.mutate({ userIds: selectedUsers, subject: emailSubject, message: emailMessage });\n  };\n\n  const toggleUserSelection = (userId: string) => {\n    setSelectedUsers(prev => \n      prev.includes(userId) \n        ? prev.filter(id => id !== userId)\n        : [...prev, userId]\n    );\n  };\n\n  if (usersLoading || accountsLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-finora-primary mx-auto\"></div>\n        <p className=\"mt-2 text-gray-600\">Loading accounts...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Account Operations */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Account Operations</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"account-select\">Select Account</Label>\n              <Select \n                onValueChange={(value) => {\n                  const account = accounts.find((acc: Account) => acc.id === value);\n                  setSelectedAccount(account || null);\n                }}\n              >\n                <SelectTrigger data-testid=\"select-account\">\n                  <SelectValue placeholder=\"Choose an account\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {accounts.map((account: Account) => (\n                    <SelectItem key={account.id} value={account.id}>\n                      {account.accountNumber} - ${account.balance}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {selectedAccount && (\n              <>\n                <div>\n                  <Label htmlFor=\"amount\">Amount</Label>\n                  <Input\n                    id=\"amount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={amount}\n                    onChange={(e) => setAmount(e.target.value)}\n                    placeholder=\"0.00\"\n                    data-testid=\"input-amount\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Input\n                    id=\"description\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    placeholder=\"Transaction description\"\n                    data-testid=\"input-description\"\n                  />\n                </div>\n\n                <div className=\"flex space-x-2\">\n                  <Button\n                    onClick={handleCredit}\n                    disabled={creditMutation.isPending}\n                    className=\"bg-green-600 hover:bg-green-700\"\n                    data-testid=\"button-credit\"\n                  >\n                    {creditMutation.isPending ? \"Processing...\" : \"Credit Account\"}\n                  </Button>\n                  <Button\n                    onClick={handleDebit}\n                    disabled={debitMutation.isPending}\n                    variant=\"destructive\"\n                    data-testid=\"button-debit\"\n                  >\n                    {debitMutation.isPending ? \"Processing...\" : \"Debit Account\"}\n                  </Button>\n                </div>\n              </>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Account Status Management */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Account Status</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {selectedAccount && (\n              <>\n                <div>\n                  <Label>Current Status</Label>\n                  <div className=\"mt-1\">\n                    <Badge variant={selectedAccount.status === 'active' ? 'default' : 'destructive'}>\n                      {selectedAccount.status}\n                    </Badge>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"new-status\">New Status</Label>\n                  <Select onValueChange={setNewStatus}>\n                    <SelectTrigger data-testid=\"select-status\">\n                      <SelectValue placeholder=\"Select new status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"frozen\">Frozen</SelectItem>\n                      <SelectItem value=\"closed\">Closed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"status-reason\">Reason (Optional)</Label>\n                  <Textarea\n                    id=\"status-reason\"\n                    value={statusReason}\n                    onChange={(e) => setStatusReason(e.target.value)}\n                    placeholder=\"Reason for status change\"\n                    data-testid=\"textarea-status-reason\"\n                  />\n                </div>\n\n                <Button\n                  onClick={handleStatusUpdate}\n                  disabled={statusMutation.isPending}\n                  className=\"w-full bg-finora-primary hover:bg-finora-dark\"\n                  data-testid=\"button-update-status\"\n                >\n                  {statusMutation.isPending ? \"Updating...\" : \"Update Status\"}\n                </Button>\n              </>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Email Management */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Send Email to Customers</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"email-subject\">Subject</Label>\n            <Input\n              id=\"email-subject\"\n              value={emailSubject}\n              onChange={(e) => setEmailSubject(e.target.value)}\n              placeholder=\"Email subject\"\n              data-testid=\"input-email-subject\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"email-message\">Message</Label>\n            <Textarea\n              id=\"email-message\"\n              value={emailMessage}\n              onChange={(e) => setEmailMessage(e.target.value)}\n              placeholder=\"Email message\"\n              rows={4}\n              data-testid=\"textarea-email-message\"\n            />\n          </div>\n\n          <div>\n            <Label>Select Recipients</Label>\n            <div className=\"mt-2 space-y-2 max-h-48 overflow-y-auto border rounded-md p-2\">\n              {users.map((user: User) => (\n                <label key={user.id} className=\"flex items-center space-x-2 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedUsers.includes(user.id)}\n                    onChange={() => toggleUserSelection(user.id)}\n                    className=\"rounded border-gray-300\"\n                    data-testid={`checkbox-user-${user.id}`}\n                  />\n                  <span className=\"text-sm\">\n                    {user.firstName} {user.lastName} ({user.email})\n                  </span>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          <Button\n            onClick={handleSendEmail}\n            disabled={emailMutation.isPending}\n            className=\"w-full bg-finora-primary hover:bg-finora-dark\"\n            data-testid=\"button-send-email\"\n          >\n            {emailMutation.isPending ? \"Sending...\" : `Send Email to ${selectedUsers.length} users`}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Accounts List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>All Accounts</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full border-collapse border border-gray-200\">\n              <thead>\n                <tr className=\"bg-gray-50\">\n                  <th className=\"border border-gray-200 px-4 py-2 text-left\">Account Number</th>\n                  <th className=\"border border-gray-200 px-4 py-2 text-left\">Owner</th>\n                  <th className=\"border border-gray-200 px-4 py-2 text-left\">Balance</th>\n                  <th className=\"border border-gray-200 px-4 py-2 text-left\">Status</th>\n                  <th className=\"border border-gray-200 px-4 py-2 text-left\">Created</th>\n                </tr>\n              </thead>\n              <tbody>\n                {accounts.map((account: Account) => {\n                  const owner = users.find((user: User) => user.id === account.userId);\n                  return (\n                    <tr key={account.id} className=\"hover:bg-gray-50\">\n                      <td className=\"border border-gray-200 px-4 py-2\" data-testid={`text-account-number-${account.id}`}>\n                        {account.accountNumber}\n                      </td>\n                      <td className=\"border border-gray-200 px-4 py-2\">\n                        {owner ? `${owner.firstName} ${owner.lastName}` : 'Unknown'}\n                      </td>\n                      <td className=\"border border-gray-200 px-4 py-2 font-mono\">\n                        ${account.balance}\n                      </td>\n                      <td className=\"border border-gray-200 px-4 py-2\">\n                        <Badge variant={account.status === 'active' ? 'default' : 'destructive'}>\n                          {account.status}\n                        </Badge>\n                      </td>\n                      <td className=\"border border-gray-200 px-4 py-2\">\n                        {account.createdAt ? new Date(account.createdAt).toLocaleDateString() : 'N/A'}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":17081},"client/src/components/admin/audit-log.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { AuditLog } from \"@shared/schema\";\n\nexport default function AuditLog() {\n  const { toast } = useToast();\n\n  const { data: auditLogs, isLoading } = useQuery({\n    queryKey: [\"/api/admin/audit-logs\"],\n    retry: false,\n    refetchInterval: 10000, // Refresh every 10 seconds\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    },\n  });\n\n  const getActionColor = (action: string) => {\n    switch (action) {\n      case 'account_created':\n        return 'bg-green-100 text-green-800';\n      case 'account_frozen':\n      case 'account_closed':\n        return 'bg-red-100 text-red-800';\n      case 'account_unfrozen':\n        return 'bg-blue-100 text-blue-800';\n      case 'balance_credited':\n        return 'bg-green-100 text-green-800';\n      case 'balance_debited':\n        return 'bg-orange-100 text-orange-800';\n      case 'transfer_approved':\n        return 'bg-green-100 text-green-800';\n      case 'transfer_rejected':\n        return 'bg-red-100 text-red-800';\n      case 'email_sent':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatActionText = (action: string) => {\n    return action.split('_').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-finora-primary mx-auto\"></div>\n        <p className=\"mt-2 text-gray-600\">Loading audit logs...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Audit Log</span>\n            <Badge variant=\"outline\">{auditLogs?.length || 0} entries</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {!auditLogs || auditLogs.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              No audit log entries found\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {auditLogs.map((log: AuditLog) => (\n                <Card key={log.id} className=\"border-l-4 border-l-finora-primary\">\n                  <CardContent className=\"pt-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <Badge className={getActionColor(log.action)}>\n                            {formatActionText(log.action)}\n                          </Badge>\n                          <span className=\"text-sm text-gray-500\">\n                            {new Date(log.createdAt).toLocaleString()}\n                          </span>\n                        </div>\n                        \n                        <div className=\"space-y-1 text-sm\">\n                          <p data-testid={`text-admin-${log.id}`}>\n                            <span className=\"font-medium\">Admin:</span> {log.adminId}\n                          </p>\n                          {log.targetUserId && (\n                            <p data-testid={`text-target-${log.id}`}>\n                              <span className=\"font-medium\">Target User:</span> {log.targetUserId}\n                            </p>\n                          )}\n                          {log.ipAddress && (\n                            <p>\n                              <span className=\"font-medium\">IP Address:</span> {log.ipAddress}\n                            </p>\n                          )}\n                        </div>\n\n                        {log.details && (\n                          <div className=\"mt-3 p-3 bg-gray-50 rounded-md\">\n                            <p className=\"text-xs font-medium text-gray-700 mb-1\">Details:</p>\n                            <pre className=\"text-xs text-gray-600 whitespace-pre-wrap\">\n                              {JSON.stringify(log.details, null, 2)}\n                            </pre>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4927},"client/src/components/admin/transfer-approval.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Transfer } from \"@shared/schema\";\n\nexport default function TransferApproval() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedTransfer, setSelectedTransfer] = useState<Transfer | null>(null);\n  const [rejectionReason, setRejectionReason] = useState(\"\");\n\n  const { data: pendingTransfers = [], isLoading } = useQuery<Transfer[]>({\n    queryKey: [\"/api/admin/transfers/pending\"],\n    refetchInterval: 5000, // Refresh every 5 seconds\n    retry: false,\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (transferId: string) => {\n      await apiRequest(\"POST\", `/api/admin/transfers/${transferId}/approve`, {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Transfer approved successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/transfers/pending\"] });\n      setSelectedTransfer(null);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async ({ transferId, reason }: { transferId: string; reason: string }) => {\n      await apiRequest(\"POST\", `/api/admin/transfers/${transferId}/reject`, { reason });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Transfer rejected successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/transfers/pending\"] });\n      setSelectedTransfer(null);\n      setRejectionReason(\"\");\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApprove = (transfer: Transfer) => {\n    approveMutation.mutate(transfer.id);\n  };\n\n  const handleReject = () => {\n    if (!selectedTransfer || !rejectionReason.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide a rejection reason\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    rejectMutation.mutate({ transferId: selectedTransfer.id, reason: rejectionReason });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-finora-primary mx-auto\"></div>\n        <p className=\"mt-2 text-gray-600\">Loading pending transfers...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Pending Transfer Approvals</span>\n            <Badge variant=\"destructive\">{pendingTransfers.length} pending</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {pendingTransfers.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              No pending transfers requiring approval\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {pendingTransfers.map((transfer: Transfer) => (\n                <Card key={transfer.id} className=\"border-l-4 border-l-orange-500\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <h4 className=\"font-semibold text-lg\" data-testid={`text-transfer-amount-${transfer.id}`}>\n                          ${transfer.amount}\n                        </h4>\n                        <p className=\"text-gray-600\">\n                          To: {transfer.toAccountHolderName}\n                        </p>\n                        {transfer.toAccountNumber && (\n                          <p className=\"text-gray-600\">\n                            Account: {transfer.toAccountNumber}\n                          </p>\n                        )}\n                        {transfer.toBankName && (\n                          <p className=\"text-gray-600\">\n                            Bank: {transfer.toBankName}\n                          </p>\n                        )}\n                        {transfer.description && (\n                          <p className=\"text-gray-600\">\n                            Description: {transfer.description}\n                          </p>\n                        )}\n                      </div>\n                      \n                      <div>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Transfer Amount:</span>\n                            <span>${transfer.amount}</span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Fee:</span>\n                            <span>${transfer.fee}</span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Tax:</span>\n                            <span>${transfer.tax}</span>\n                          </div>\n                          <div className=\"flex justify-between font-semibold border-t pt-2\">\n                            <span>Total:</span>\n                            <span>${(parseFloat(transfer.amount) + parseFloat(transfer.fee) + parseFloat(transfer.tax)).toFixed(2)}</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"mt-4 space-y-2\">\n                          <p className=\"text-xs text-gray-500\">\n                            Submitted: {transfer.createdAt ? new Date(transfer.createdAt).toLocaleString() : 'N/A'}\n                          </p>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              onClick={() => handleApprove(transfer)}\n                              disabled={approveMutation.isPending}\n                              className=\"bg-green-600 hover:bg-green-700\"\n                              data-testid={`button-approve-${transfer.id}`}\n                            >\n                              {approveMutation.isPending ? \"Approving...\" : \"Approve\"}\n                            </Button>\n                            \n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button\n                                  onClick={() => setSelectedTransfer(transfer)}\n                                  variant=\"destructive\"\n                                  data-testid={`button-reject-${transfer.id}`}\n                                >\n                                  Reject\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent>\n                                <DialogHeader>\n                                  <DialogTitle>Reject Transfer</DialogTitle>\n                                </DialogHeader>\n                                <div className=\"space-y-4\">\n                                  <p>\n                                    Are you sure you want to reject this transfer of ${transfer.amount}?\n                                  </p>\n                                  <div>\n                                    <label htmlFor=\"rejection-reason\" className=\"block text-sm font-medium mb-2\">\n                                      Rejection Reason\n                                    </label>\n                                    <Textarea\n                                      id=\"rejection-reason\"\n                                      value={rejectionReason}\n                                      onChange={(e) => setRejectionReason(e.target.value)}\n                                      placeholder=\"Please provide a reason for rejection\"\n                                      rows={3}\n                                      data-testid=\"textarea-rejection-reason\"\n                                    />\n                                  </div>\n                                  <div className=\"flex space-x-2\">\n                                    <Button\n                                      onClick={handleReject}\n                                      disabled={rejectMutation.isPending}\n                                      variant=\"destructive\"\n                                      data-testid=\"button-confirm-reject\"\n                                    >\n                                      {rejectMutation.isPending ? \"Rejecting...\" : \"Confirm Rejection\"}\n                                    </Button>\n                                  </div>\n                                </div>\n                              </DialogContent>\n                            </Dialog>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10384},"client/src/components/customer/account-overview.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Account } from \"@shared/schema\";\nimport bankingCustomerService from \"@assets/generated_images/diverse_customer_service_banking_professional_b409fbf2.png\";\nimport mobileBankingApp from \"@assets/generated_images/professional_mobile_banking_usage_904a481c.png\";\n\nexport default function AccountOverview() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [newAccountType, setNewAccountType] = useState(\"\");\n\n  const { data: accounts = [], isLoading } = useQuery<Account[]>({\n    queryKey: [\"/api/accounts\"],\n    retry: false,\n  });\n\n  const createAccountMutation = useMutation({\n    mutationFn: async (accountType: string) => {\n      await apiRequest(\"POST\", \"/api/accounts\", { accountType });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Account created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounts\"] });\n      setNewAccountType(\"\");\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateAccount = () => {\n    if (!newAccountType) {\n      toast({\n        title: \"Error\",\n        description: \"Please select an account type\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createAccountMutation.mutate(newAccountType);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-100 text-green-800';\n      case 'frozen':\n        return 'bg-orange-100 text-orange-800';\n      case 'closed':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const calculateTotalBalance = () => {\n    return accounts\n      .filter((account: Account) => account.status === 'active')\n      .reduce((total: number, account: Account) => total + parseFloat(account.balance), 0)\n      .toFixed(2);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-finora-primary mx-auto\"></div>\n        <p className=\"mt-2 text-gray-600\">Loading your accounts...</p>\n      </div>\n    );\n  }\n\n  // Check for account status warnings\n  const frozenAccounts = accounts.filter((account: Account) => account.status === 'frozen');\n  const closedAccounts = accounts.filter((account: Account) => account.status === 'closed');\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Account Status Warnings */}\n      {frozenAccounts.length > 0 && (\n        <Alert variant=\"destructive\">\n          <AlertDescription>\n            <strong>Account Alert:</strong> You have {frozenAccounts.length} frozen account(s). \n            Please contact customer service to resolve any issues.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {closedAccounts.length > 0 && (\n        <Alert variant=\"destructive\">\n          <AlertDescription>\n            <strong>Account Notice:</strong> You have {closedAccounts.length} closed account(s). \n            These accounts are no longer active and cannot be used for transactions.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Total Balance Summary */}\n      <Card className=\"border-l-4 border-l-finora-primary\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-0\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Balance</p>\n              <p className=\"text-2xl sm:text-3xl font-bold text-gray-900\" data-testid=\"text-total-balance\">\n                ${calculateTotalBalance()}\n              </p>\n            </div>\n            <div className=\"text-left sm:text-right\">\n              <p className=\"text-sm text-gray-600\">Active Accounts</p>\n              <p className=\"text-lg sm:text-xl font-semibold text-finora-primary\">\n                {accounts.filter((account: Account) => account.status === 'active').length}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Create New Account */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Open New Account</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Select onValueChange={setNewAccountType}>\n              <SelectTrigger data-testid=\"select-account-type\">\n                <SelectValue placeholder=\"Select account type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"checking\">Checking Account</SelectItem>\n                <SelectItem value=\"savings\">Savings Account</SelectItem>\n                <SelectItem value=\"money_market\">Money Market Account</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <Button\n            onClick={handleCreateAccount}\n            disabled={createAccountMutation.isPending}\n            className=\"w-full bg-finora-primary hover:bg-finora-dark\"\n            data-testid=\"button-create-account\"\n          >\n            {createAccountMutation.isPending ? \"Creating...\" : \"Open Account\"}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Accounts List */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Your Accounts</h3>\n          <Badge variant=\"outline\">{accounts.length} accounts</Badge>\n        </div>\n        \n        {accounts.length === 0 ? (\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center py-8 text-gray-500\">\n                <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-university text-gray-400 text-2xl\"></i>\n                </div>\n                <p className=\"font-medium\">No accounts found</p>\n                <p className=\"text-sm\">Open your first account to get started</p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid gap-4\">\n            {accounts.map((account: Account) => (\n              <Card key={account.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 lg:gap-0\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex flex-col sm:flex-row sm:items-center sm:space-x-2 mb-2 gap-1 sm:gap-0\">\n                        <h4 className=\"font-semibold text-base sm:text-lg capitalize\">\n                          {account.accountType.replace('_', ' ')} Account\n                        </h4>\n                        <Badge className={getStatusColor(account.status)}>\n                          {account.status}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"space-y-1 text-xs sm:text-sm text-gray-600\">\n                        <p data-testid={`text-account-number-${account.id}`}>\n                          <span className=\"font-medium\">Account Number:</span> ****{account.accountNumber.slice(-4)}\n                        </p>\n                        <p>\n                          <span className=\"font-medium\">Routing Number:</span> {account.routingNumber}\n                        </p>\n                        <p>\n                          <span className=\"font-medium\">Opened:</span> {account.createdAt ? new Date(account.createdAt).toLocaleDateString() : 'N/A'}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-left lg:text-right\">\n                      <p className=\"text-sm font-medium text-gray-600\">Available Balance</p>\n                      <p className=\"text-xl sm:text-2xl font-bold text-gray-900\" data-testid={`text-balance-${account.id}`}>\n                        ${account.balance}\n                      </p>\n                      \n                      {account.status === 'frozen' && (\n                        <div className=\"mt-2 p-2 bg-orange-50 rounded-md\">\n                          <p className=\"text-xs text-orange-800\">\n                            Account is frozen. Contact customer service for assistance.\n                          </p>\n                        </div>\n                      )}\n                      \n                      {account.status === 'closed' && (\n                        <div className=\"mt-2 p-2 bg-red-50 rounded-md\">\n                          <p className=\"text-xs text-red-800\">\n                            Account is closed and no longer active.\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Customer Service & Mobile Banking Section */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-headset text-finora-primary\"></i>\n              <span>Customer Service</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col sm:flex-row sm:items-center space-y-3 sm:space-y-0 sm:space-x-4\">\n              <img \n                src={bankingCustomerService} \n                alt=\"Customer Service Representative\" \n                className=\"w-16 h-16 sm:w-20 sm:h-20 rounded-lg object-cover mx-auto sm:mx-0\"\n              />\n              <div className=\"text-center sm:text-left\">\n                <p className=\"text-xs sm:text-sm text-gray-600 mb-2\">\n                  Need help with your account? Our customer service team is here to assist you.\n                </p>\n                <Button variant=\"outline\" className=\"text-finora-primary border-finora-primary hover:bg-finora-primary hover:text-white text-xs sm:text-sm w-full sm:w-auto\">\n                  Contact Support\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-mobile-alt text-finora-primary\"></i>\n              <span>Mobile Banking</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col sm:flex-row sm:items-center space-y-3 sm:space-y-0 sm:space-x-4\">\n              <img \n                src={mobileBankingApp} \n                alt=\"Mobile Banking App\" \n                className=\"w-16 h-16 sm:w-20 sm:h-20 rounded-lg object-cover mx-auto sm:mx-0\"\n              />\n              <div className=\"text-center sm:text-left\">\n                <p className=\"text-xs sm:text-sm text-gray-600 mb-2\">\n                  Bank on the go with our secure mobile app. Available 24/7 for your convenience.\n                </p>\n                <Button variant=\"outline\" className=\"text-finora-primary border-finora-primary hover:bg-finora-primary hover:text-white text-xs sm:text-sm w-full sm:w-auto\">\n                  Download App\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12651},"client/src/components/customer/transaction-history.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Transaction } from \"@shared/schema\";\n\nexport default function TransactionHistory() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState(\"all\");\n\n  const { data: transactions, isLoading } = useQuery({\n    queryKey: [\"/api/transactions\"],\n    retry: false,\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    },\n  });\n\n  const getTransactionColor = (type: string) => {\n    switch (type) {\n      case 'credit':\n        return 'bg-green-100 text-green-800';\n      case 'debit':\n        return 'bg-red-100 text-red-800';\n      case 'fee':\n        return 'bg-orange-100 text-orange-800';\n      case 'tax':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTransactionIcon = (type: string) => {\n    switch (type) {\n      case 'credit':\n        return 'fas fa-arrow-down text-green-600';\n      case 'debit':\n        return 'fas fa-arrow-up text-red-600';\n      case 'fee':\n        return 'fas fa-receipt text-orange-600';\n      case 'tax':\n        return 'fas fa-calculator text-yellow-600';\n      default:\n        return 'fas fa-exchange-alt text-gray-600';\n    }\n  };\n\n  const formatTransactionType = (type: string) => {\n    return type.charAt(0).toUpperCase() + type.slice(1);\n  };\n\n  // Filter transactions based on search term and type\n  const filteredTransactions = transactions?.filter((transaction: Transaction & { accountNumber: string }) => {\n    const matchesSearch = searchTerm === \"\" || \n      transaction.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      transaction.accountNumber.includes(searchTerm);\n    \n    const matchesType = filterType === \"all\" || transaction.type === filterType;\n    \n    return matchesSearch && matchesType;\n  }) || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-finora-primary mx-auto\"></div>\n        <p className=\"mt-2 text-gray-600\">Loading transaction history...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Transaction History</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Input\n                placeholder=\"Search transactions...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full\"\n                data-testid=\"input-search-transactions\"\n              />\n            </div>\n            <div>\n              <Select onValueChange={setFilterType}>\n                <SelectTrigger data-testid=\"select-transaction-type\">\n                  <SelectValue placeholder=\"Filter by type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Transactions</SelectItem>\n                  <SelectItem value=\"credit\">Credits</SelectItem>\n                  <SelectItem value=\"debit\">Debits</SelectItem>\n                  <SelectItem value=\"fee\">Fees</SelectItem>\n                  <SelectItem value=\"tax\">Taxes</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <p className=\"text-sm text-gray-600\">\n              Showing {filteredTransactions.length} of {transactions?.length || 0} transactions\n            </p>\n            <Badge variant=\"outline\">{transactions?.length || 0} total</Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Transaction List */}\n      <div className=\"space-y-4\">\n        {filteredTransactions.length === 0 ? (\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center py-8 text-gray-500\">\n                <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-receipt text-gray-400 text-2xl\"></i>\n                </div>\n                <p className=\"font-medium\">No transactions found</p>\n                <p className=\"text-sm\">\n                  {searchTerm || filterType !== \"all\" \n                    ? \"Try adjusting your search or filter criteria\"\n                    : \"Your transaction history will appear here\"}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredTransactions.map((transaction: Transaction & { accountNumber: string }) => (\n            <Card key={transaction.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"pt-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center\">\n                      <i className={getTransactionIcon(transaction.type)}></i>\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h4 className=\"font-medium text-gray-900\" data-testid={`text-description-${transaction.id}`}>\n                          {transaction.description}\n                        </h4>\n                        <Badge className={getTransactionColor(transaction.type)}>\n                          {formatTransactionType(transaction.type)}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"space-y-1 text-sm text-gray-600\">\n                        <p>\n                          <span className=\"font-medium\">Account:</span> ****{transaction.accountNumber.slice(-4)}\n                        </p>\n                        <p>\n                          <span className=\"font-medium\">Date:</span> {new Date(transaction.createdAt).toLocaleString()}\n                        </p>\n                        <p>\n                          <span className=\"font-medium\">Balance After:</span> ${transaction.balanceAfter}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className={`text-lg font-bold ${\n                      transaction.type === 'credit' ? 'text-green-600' : 'text-red-600'\n                    }`} data-testid={`text-amount-${transaction.id}`}>\n                      {transaction.type === 'credit' ? '+' : '-'}${transaction.amount}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7748},"client/src/components/customer/transfer-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Account, Transfer } from \"@shared/schema\";\n\ninterface TransferFormData {\n  fromAccountId: string;\n  toAccountNumber: string;\n  toRoutingNumber: string;\n  toBankName: string;\n  toAccountHolderName: string;\n  recipientEmail: string;\n  recipientPhone: string;\n  recipientSSN: string;\n  amount: string;\n  description: string;\n}\n\nexport default function TransferForm() {\n  const { toast } = useToast();\n  \n  const [formData, setFormData] = useState<TransferFormData>({\n    fromAccountId: \"\",\n    toAccountNumber: \"\",\n    toRoutingNumber: \"\",\n    toBankName: \"\",\n    toAccountHolderName: \"\",\n    recipientEmail: \"\",\n    recipientPhone: \"\",\n    recipientSSN: \"\",\n    amount: \"\",\n    description: \"\",\n  });\n  \n  const [currentTransfer, setCurrentTransfer] = useState<Transfer | null>(null);\n  const [transferProgress, setTransferProgress] = useState(0);\n  const [transferStep, setTransferStep] = useState<string>(\"\");\n\n  const { data: accounts = [], isLoading: accountsLoading } = useQuery<Account[]>({\n    queryKey: [\"/api/accounts\"],\n    retry: false,\n  });\n\n  const transferMutation = useMutation({\n    mutationFn: async (data: TransferFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/transfers\", data);\n      return response.json();\n    },\n    onSuccess: (transfer: Transfer) => {\n      toast({\n        title: \"Transfer Initiated\",\n        description: \"Your transfer has been submitted for verification\",\n      });\n      setCurrentTransfer(transfer);\n      startTransferProgress();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Transfer Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Poll transfer status\n  const { data: transferStatus } = useQuery<{status: string; rejectionReason?: string}>({\n    queryKey: [\"/api/transfers\", currentTransfer?.id, \"status\"],\n    enabled: !!currentTransfer,\n    refetchInterval: 2000,\n    retry: false,\n  });\n\n  const startTransferProgress = () => {\n    setTransferProgress(25);\n    setTransferStep(\"Transfer submitted\");\n    \n    setTimeout(() => {\n      setTransferProgress(50);\n      setTransferStep(\"Verifying account details\");\n    }, 1000);\n    \n    setTimeout(() => {\n      setTransferProgress(75);\n      setTransferStep(\"Pending admin verification\");\n    }, 2000);\n  };\n\n  useEffect(() => {\n    if (transferStatus?.status) {\n      switch (transferStatus.status) {\n        case 'approved':\n          setTransferProgress(90);\n          setTransferStep(\"Processing transfer\");\n          break;\n        case 'completed':\n          setTransferProgress(100);\n          setTransferStep(\"Transfer completed successfully\");\n          toast({\n            title: \"Transfer Completed\",\n            description: \"Your transfer has been processed successfully\",\n          });\n          break;\n        case 'rejected':\n          setTransferProgress(100);\n          setTransferStep(\"Transfer rejected\");\n          toast({\n            title: \"Transfer Rejected\",\n            description: transferStatus.rejectionReason || \"Your transfer was rejected\",\n            variant: \"destructive\",\n          });\n          break;\n      }\n    }\n  }, [transferStatus, toast]);\n\n  const calculateFeeAndTax = (amount: string) => {\n    const numAmount = parseFloat(amount);\n    if (isNaN(numAmount) || numAmount <= 0) return { fee: \"0.00\", tax: \"0.00\", total: \"0.00\" };\n    \n    const fee = numAmount > 1000 ? (numAmount * 0.001).toFixed(2) : \"0.00\";\n    const tax = (numAmount * 0.001).toFixed(2);\n    const total = (numAmount + parseFloat(fee) + parseFloat(tax)).toFixed(2);\n    \n    return { fee, tax, total };\n  };\n\n  const { fee, tax, total } = calculateFeeAndTax(formData.amount);\n\n  const handleInputChange = (field: keyof TransferFormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validation\n    if (!formData.fromAccountId || !formData.toAccountHolderName || !formData.amount || !formData.recipientEmail || !formData.recipientPhone) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(formData.recipientEmail)) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a valid email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Phone validation\n    const phoneRegex = /^[\\+]?[1-9][\\d]{0,15}$/;\n    if (!phoneRegex.test(formData.recipientPhone.replace(/[^\\d\\+]/g, ''))) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please enter a valid phone number\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (parseFloat(formData.amount) <= 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Transfer amount must be greater than $0\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const selectedAccount = accounts.find((acc: Account) => acc.id === formData.fromAccountId);\n    if (selectedAccount && parseFloat(selectedAccount.balance) < parseFloat(total)) {\n      toast({\n        title: \"Insufficient Funds\",\n        description: \"Your account balance is insufficient for this transfer\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    transferMutation.mutate(formData);\n  };\n\n  const resetForm = () => {\n    setFormData({\n      fromAccountId: \"\",\n      toAccountNumber: \"\",\n      toRoutingNumber: \"\",\n      toBankName: \"\",\n      toAccountHolderName: \"\",\n      recipientEmail: \"\",\n      recipientPhone: \"\",\n      recipientSSN: \"\",\n      amount: \"\",\n      description: \"\",\n    });\n    setCurrentTransfer(null);\n    setTransferProgress(0);\n    setTransferStep(\"\");\n  };\n\n  if (accountsLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-finora-primary mx-auto\"></div>\n        <p className=\"mt-2 text-gray-600\">Loading your accounts...</p>\n      </div>\n    );\n  }\n\n  const activeAccounts = accounts.filter((account: Account) => account.status === 'active');\n\n  if (activeAccounts.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center py-8\">\n            <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-exclamation-triangle text-gray-400 text-2xl\"></i>\n            </div>\n            <h3 className=\"font-medium text-gray-900 mb-2\">No Active Accounts</h3>\n            <p className=\"text-gray-600\">You need an active account to make transfers.</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Transfer Progress */}\n      {currentTransfer && (\n        <Card className=\"border-l-4 border-l-finora-primary\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Transfer Progress</span>\n              <Badge variant={transferStatus?.status === 'completed' ? 'default' : transferStatus?.status === 'rejected' ? 'destructive' : 'secondary'}>\n                {transferStatus?.status || 'processing'}\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <div className=\"flex justify-between text-sm mb-2\">\n                <span>{transferStep}</span>\n                <span>{transferProgress}%</span>\n              </div>\n              <Progress value={transferProgress} className=\"h-2\" />\n            </div>\n            \n            <div className=\"text-sm text-gray-600\">\n              <p><strong>Transfer ID:</strong> {currentTransfer.id}</p>\n              <p><strong>Amount:</strong> ${currentTransfer.amount}</p>\n              <p><strong>To:</strong> {currentTransfer.toAccountHolderName}</p>\n            </div>\n\n            {transferStatus?.status === 'verification_required' && (\n              <Alert>\n                <AlertDescription>\n                  Your transfer is pending admin verification. You will receive an email notification once it's processed.\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {transferStatus?.status === 'rejected' && transferStatus.rejectionReason && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>\n                  <strong>Rejection Reason:</strong> {transferStatus.rejectionReason}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {(transferStatus?.status === 'completed' || transferStatus?.status === 'rejected') && (\n              <Button onClick={resetForm} className=\"w-full bg-finora-primary hover:bg-finora-dark\">\n                Make Another Transfer\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Transfer Form */}\n      {!currentTransfer && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Transfer Money</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* From Account */}\n              <div>\n                <Label htmlFor=\"from-account\">From Account *</Label>\n                <Select onValueChange={(value) => handleInputChange('fromAccountId', value)}>\n                  <SelectTrigger data-testid=\"select-from-account\">\n                    <SelectValue placeholder=\"Select source account\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {activeAccounts.map((account: Account) => (\n                      <SelectItem key={account.id} value={account.id}>\n                        {account.accountType.replace('_', ' ')} - ****{account.accountNumber.slice(-4)} (${account.balance})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Recipient Information */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"recipient-name\">Recipient Name *</Label>\n                  <Input\n                    id=\"recipient-name\"\n                    value={formData.toAccountHolderName}\n                    onChange={(e) => handleInputChange('toAccountHolderName', e.target.value)}\n                    placeholder=\"Full name of recipient\"\n                    data-testid=\"input-recipient-name\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"recipient-email\">Recipient Email *</Label>\n                  <Input\n                    id=\"recipient-email\"\n                    type=\"email\"\n                    value={formData.recipientEmail}\n                    onChange={(e) => handleInputChange('recipientEmail', e.target.value)}\n                    placeholder=\"recipient@email.com\"\n                    data-testid=\"input-recipient-email\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"recipient-phone\">Recipient Phone *</Label>\n                  <Input\n                    id=\"recipient-phone\"\n                    type=\"tel\"\n                    value={formData.recipientPhone}\n                    onChange={(e) => handleInputChange('recipientPhone', e.target.value)}\n                    placeholder=\"+1 (555) 123-4567\"\n                    data-testid=\"input-recipient-phone\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"recipient-ssn\">Last 4 digits of SSN (Optional)</Label>\n                  <Input\n                    id=\"recipient-ssn\"\n                    value={formData.recipientSSN}\n                    onChange={(e) => handleInputChange('recipientSSN', e.target.value)}\n                    placeholder=\"****\"\n                    maxLength={4}\n                    data-testid=\"input-recipient-ssn\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"account-number\">Account Number</Label>\n                  <Input\n                    id=\"account-number\"\n                    value={formData.toAccountNumber}\n                    onChange={(e) => handleInputChange('toAccountNumber', e.target.value)}\n                    placeholder=\"Recipient's account number\"\n                    data-testid=\"input-account-number\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"routing-number\">Routing Number</Label>\n                  <Input\n                    id=\"routing-number\"\n                    value={formData.toRoutingNumber}\n                    onChange={(e) => handleInputChange('toRoutingNumber', e.target.value)}\n                    placeholder=\"9-digit routing number\"\n                    data-testid=\"input-routing-number\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"bank-name\">Bank Name</Label>\n                <Input\n                  id=\"bank-name\"\n                  value={formData.toBankName}\n                  onChange={(e) => handleInputChange('toBankName', e.target.value)}\n                  placeholder=\"Recipient's bank name\"\n                  data-testid=\"input-bank-name\"\n                />\n              </div>\n\n              {/* Transfer Details */}\n              <div>\n                <Label htmlFor=\"amount\">Transfer Amount *</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={formData.amount}\n                  onChange={(e) => handleInputChange('amount', e.target.value)}\n                  placeholder=\"0.00\"\n                  data-testid=\"input-transfer-amount\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Description (Optional)</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => handleInputChange('description', e.target.value)}\n                  placeholder=\"Purpose of transfer\"\n                  rows={3}\n                  data-testid=\"textarea-description\"\n                />\n              </div>\n\n              {/* Fee Breakdown */}\n              {formData.amount && parseFloat(formData.amount) > 0 && (\n                <Card className=\"bg-gray-50\">\n                  <CardContent className=\"pt-4\">\n                    <h4 className=\"font-medium mb-3\">Transfer Summary</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Transfer Amount:</span>\n                        <span>${formData.amount}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Transfer Fee:</span>\n                        <span>${fee}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Tax:</span>\n                        <span>${tax}</span>\n                      </div>\n                      <div className=\"flex justify-between font-semibold border-t pt-2\">\n                        <span>Total Amount:</span>\n                        <span data-testid=\"text-total-amount\">${total}</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              <Button\n                type=\"submit\"\n                disabled={transferMutation.isPending}\n                className=\"w-full bg-finora-primary hover:bg-finora-dark\"\n                data-testid=\"button-submit-transfer\"\n              >\n                {transferMutation.isPending ? \"Processing...\" : \"Submit Transfer\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":17589},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hero-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\nimport investmentConsulting from \"@assets/generated_images/diverse_investment_consulting_meeting_a8d646d1.png\";\nimport businessBankingMeeting from \"@assets/generated_images/diverse_business_banking_meeting_a56d3a4b.png\";\nimport bankingConsultation from \"@assets/generated_images/diverse_banking_consultation_team_7a09bdfe.png\";\n\nconst heroSlides = [\n  {\n    image: bankingConsultation,\n    title: \"Banking That Grows With You\",\n    subtitle: \"Experience the future of financial services with Finora's innovative banking solutions\",\n    cta: \"Start Your Journey\"\n  },\n  {\n    image: investmentConsulting,\n    title: \"Invest in Your Tomorrow\",\n    subtitle: \"Build wealth with our comprehensive investment and wealth management services\",\n    cta: \"Explore Investing\"\n  },\n  {\n    image: businessBankingMeeting,\n    title: \"Business Banking Excellence\",\n    subtitle: \"Power your business forward with tailored commercial banking solutions\",\n    cta: \"Grow Your Business\"\n  }\n];\n\nexport default function HeroSection() {\n  const [currentSlide, setCurrentSlide] = useState(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentSlide((prev) => (prev + 1) % heroSlides.length);\n    }, 5000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <section className=\"relative h-screen flex items-center justify-center overflow-hidden\">\n      {/* Background Slideshow */}\n      <div className=\"absolute inset-0 z-0\">\n        {heroSlides.map((slide, index) => (\n          <div\n            key={index}\n            className={`absolute inset-0 transition-opacity duration-1000 ${\n              index === currentSlide ? 'opacity-100' : 'opacity-0'\n            }`}\n          >\n            <img\n              src={slide.image}\n              alt={`Hero slide ${index + 1}`}\n              className=\"w-full h-full object-cover\"\n            />\n            <div className=\"absolute inset-0 bg-black bg-opacity-40\"></div>\n          </div>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 text-center text-white max-w-4xl mx-auto px-4\">\n        <h1 className=\"text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-bold mb-4 sm:mb-6 animate-fade-in leading-tight\">\n          {heroSlides[currentSlide].title}\n        </h1>\n        <p className=\"text-base sm:text-lg md:text-xl lg:text-2xl mb-6 sm:mb-8 animate-slide-up px-2\">\n          {heroSlides[currentSlide].subtitle}\n        </p>\n        <Button \n          size=\"lg\"\n          className=\"bg-finora-primary text-white hover:bg-finora-dark px-6 sm:px-8 md:px-12 py-3 sm:py-4 text-sm sm:text-base md:text-lg font-semibold transform hover:scale-105 transition-transform duration-200\"\n          data-testid=\"button-hero-cta\"\n        >\n          {heroSlides[currentSlide].cta} →\n        </Button>\n      </div>\n\n      {/* Slide Indicators */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-3 z-10\">\n        {heroSlides.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => setCurrentSlide(index)}\n            className={`w-3 h-3 rounded-full transition-all duration-300 ${\n              index === currentSlide \n                ? 'bg-white scale-125' \n                : 'bg-white bg-opacity-50 hover:bg-opacity-75'\n            }`}\n          />\n        ))}\n      </div>\n\n      {/* Floating Elements */}\n      <div className=\"absolute top-1/4 left-1/4 w-20 h-20 bg-finora-accent rounded-full opacity-20 animate-pulse-slow hidden lg:block\"></div>\n      <div className=\"absolute bottom-1/3 right-1/3 w-16 h-16 bg-finora-secondary rounded-full opacity-30 animate-pulse-slow hidden lg:block\"></div>\n      <div className=\"absolute top-1/3 right-1/4 w-12 h-12 bg-finora-primary rounded-full opacity-25 animate-pulse-slow hidden lg:block\"></div>\n    </section>\n  );\n}\n","size_bytes":3937},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Home, Search, User, Lock, X, Menu } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface NavbarProps {\n  showLogin: boolean;\n}\n\nexport default function Navbar({ showLogin }: NavbarProps) {\n  const { user, isAuthenticated } = useAuth();\n  const [location, setLocation] = useLocation();\n  const [showSearch, setShowSearch] = useState(false);\n  const [showAccountForm, setShowAccountForm] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const handleLogout = async () => {\n    try {\n      await fetch(\"/api/logout\", { method: \"POST\" });\n      window.location.href = \"/\";\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n      window.location.href = \"/\";\n    }\n  };\n\n  const handleLogin = () => {\n    setLocation(\"/login\");\n  };\n\n  const handleSearch = () => {\n    if (searchQuery.trim()) {\n      setLocation(`/products?search=${encodeURIComponent(searchQuery)}`);\n      setShowSearch(false);\n      setSearchQuery(\"\");\n    }\n  };\n\n  const handleOpenAccount = () => {\n    setShowAccountForm(true);\n  };\n\n  const handleAccountFormSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setLocation(\"/dashboard\");\n    setShowAccountForm(false);\n  };\n\n  return (\n    <header className=\"bg-white border-b border-gray-200\">\n      <div className=\"max-w-7xl mx-auto px-2 sm:px-4 lg:px-8\">\n        <div className=\"flex justify-between items-center py-3\">\n          <div className=\"flex items-center space-x-2\">\n            <Link href=\"/\" className=\"flex items-center text-gray-600 hover:text-finora-primary transition-colors duration-200\">\n              <Home className=\"w-5 h-5\" />\n            </Link>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <nav className=\"hidden lg:flex items-center space-x-8\">\n            <Link href=\"/products\" className=\"text-gray-700 hover:text-finora-primary transition-colors duration-200 text-sm font-medium\">Products</Link>\n            <Link href=\"/promotions\" className=\"text-gray-700 hover:text-finora-primary transition-colors duration-200 text-sm font-medium\">Promotions</Link>\n            <Link href=\"/services\" className=\"text-gray-700 hover:text-finora-primary transition-colors duration-200 text-sm font-medium\">Services</Link>\n            <Link href=\"/help\" className=\"text-gray-700 hover:text-finora-primary transition-colors duration-200 text-sm font-medium\">Help</Link>\n            <button \n              onClick={() => setShowSearch(true)}\n              className=\"text-gray-600 hover:text-finora-primary transition-colors duration-200\"\n            >\n              <Search className=\"w-5 h-5\" />\n            </button>\n          </nav>\n          \n          <div className=\"flex items-center space-x-1 sm:space-x-3\">\n            {/* Mobile menu button */}\n            <button\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              className=\"lg:hidden p-2 rounded-md text-gray-600 hover:text-finora-primary hover:bg-gray-100\"\n            >\n              {isMobileMenuOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n            </button>\n            \n            {showLogin && !isAuthenticated && (\n              <>\n                <Button \n                  variant=\"outline\"\n                  onClick={handleOpenAccount}\n                  className=\"border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white text-xs font-medium px-2 sm:px-4 py-2 flex items-center gap-1 sm:gap-2\"\n                  data-testid=\"button-open-account\"\n                >\n                  <User className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                  <span className=\"hidden sm:inline\">OPEN AN ACCOUNT</span>\n                  <span className=\"sm:hidden\">OPEN</span>\n                </Button>\n                <Button \n                  onClick={handleLogin}\n                  className=\"bg-green-700 text-white hover:bg-green-800 text-xs font-medium px-3 sm:px-6 py-2 flex items-center gap-1 sm:gap-2\"\n                  data-testid=\"button-login\"\n                >\n                  <Lock className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                  LOGIN\n                </Button>\n              </>\n            )}\n            \n            {isAuthenticated && user && (\n              <div className=\"flex items-center space-x-2 sm:space-x-4\">\n                <span className=\"text-gray-700 text-xs sm:text-sm hidden sm:block\">\n                  Hello, {user.firstName || 'User'}\n                </span>\n                <Button \n                  onClick={handleLogout}\n                  variant=\"outline\"\n                  className=\"border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white text-xs sm:text-sm px-2 sm:px-4 py-1 sm:py-2\"\n                  data-testid=\"button-logout\"\n                >\n                  Logout\n                </Button>\n              </div>\n            )}\n            \n          </div>\n        </div>\n        \n        {/* Mobile Navigation Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"lg:hidden border-t border-gray-200\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1 bg-white\">\n              <Link \n                href=\"/products\" \n                className=\"block px-3 py-2 text-base font-medium text-gray-700 hover:text-finora-primary hover:bg-gray-50 rounded-md\"\n                onClick={() => setIsMobileMenuOpen(false)}\n              >\n                Products\n              </Link>\n              <Link \n                href=\"/promotions\" \n                className=\"block px-3 py-2 text-base font-medium text-gray-700 hover:text-finora-primary hover:bg-gray-50 rounded-md\"\n                onClick={() => setIsMobileMenuOpen(false)}\n              >\n                Promotions\n              </Link>\n              <Link \n                href=\"/services\" \n                className=\"block px-3 py-2 text-base font-medium text-gray-700 hover:text-finora-primary hover:bg-gray-50 rounded-md\"\n                onClick={() => setIsMobileMenuOpen(false)}\n              >\n                Services\n              </Link>\n              <Link \n                href=\"/help\" \n                className=\"block px-3 py-2 text-base font-medium text-gray-700 hover:text-finora-primary hover:bg-gray-50 rounded-md\"\n                onClick={() => setIsMobileMenuOpen(false)}\n              >\n                Help\n              </Link>\n              <button \n                onClick={() => {\n                  setShowSearch(true);\n                  setIsMobileMenuOpen(false);\n                }}\n                className=\"block w-full text-left px-3 py-2 text-base font-medium text-gray-700 hover:text-finora-primary hover:bg-gray-50 rounded-md flex items-center gap-2\"\n              >\n                <Search className=\"w-4 h-4\" />\n                Search\n              </button>\n              {isAuthenticated && user && (\n                <div className=\"border-t border-gray-200 pt-2 mt-2\">\n                  <div className=\"px-3 py-2 text-sm text-gray-600\">\n                    Hello, {user.firstName || 'User'}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Search Modal */}\n      {showSearch && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-start justify-center pt-20\">\n          <div className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-4\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-semibold\">Search Banking Products & Services</h3>\n              <button onClick={() => setShowSearch(false)}>\n                <X className=\"w-5 h-5\" />\n              </button>\n            </div>\n            <form onSubmit={(e) => { e.preventDefault(); handleSearch(); }}>\n              <input\n                type=\"text\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                placeholder=\"Search for products, services, help topics...\"\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-finora-primary\"\n                autoFocus\n              />\n              <div className=\"flex gap-2 mt-4\">\n                <Button type=\"submit\" className=\"flex-1 bg-finora-primary hover:bg-finora-dark\">\n                  Search\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowSearch(false)}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n\n      {/* Account Opening Modal */}\n      {showAccountForm && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n          <div className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-lg\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h3 className=\"text-xl font-semibold\">Open Your Finora Account</h3>\n              <button onClick={() => setShowAccountForm(false)}>\n                <X className=\"w-5 h-5\" />\n              </button>\n            </div>\n            <form onSubmit={handleAccountFormSubmit}>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Account Type</label>\n                  <select className=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-finora-primary\">\n                    <option>Personal Checking</option>\n                    <option>Personal Savings</option>\n                    <option>Business Checking</option>\n                    <option>Business Savings</option>\n                  </select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Full Name</label>\n                  <input type=\"text\" required className=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-finora-primary\" />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Email</label>\n                  <input type=\"email\" required className=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-finora-primary\" />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Phone</label>\n                  <input type=\"tel\" required className=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-finora-primary\" />\n                </div>\n              </div>\n              <div className=\"flex gap-3 mt-6\">\n                <Button type=\"submit\" className=\"flex-1 bg-finora-primary hover:bg-finora-dark\">\n                  Continue Application\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowAccountForm(false)}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </header>\n  );\n}\n","size_bytes":11423},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/services-section.tsx":{"content":"import { useLocation } from \"wouter\";\n\nexport default function ServicesSection() {\n  const [location, setLocation] = useLocation();\n  return (\n    <section className=\"py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Helping people bank smarter</h2>\n        </div>\n        \n        <div className=\"grid md:grid-cols-3 gap-8\">\n          <div className=\"text-center p-6 bg-white rounded-lg shadow-sm border hover:shadow-lg transition-shadow duration-200\">\n            <div className=\"w-16 h-16 bg-finora-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-piggy-bank text-white text-2xl\"></i>\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Savings & CDs</h3>\n            <p className=\"text-gray-600 mb-4\">High-yield savings accounts and certificates of deposit to grow your money.</p>\n            <button \n              onClick={() => setLocation(\"/products?category=savings\")}\n              className=\"text-finora-primary hover:underline font-medium\"\n            >\n              Learn more →\n            </button>\n          </div>\n          \n          <div className=\"text-center p-6 bg-white rounded-lg shadow-sm border hover:shadow-lg transition-shadow duration-200\">\n            <div className=\"w-16 h-16 bg-finora-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-check text-white text-2xl\"></i>\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Checking</h3>\n            <p className=\"text-gray-600 mb-4\">Flexible checking accounts designed for your everyday banking needs.</p>\n            <button \n              onClick={() => setLocation(\"/products?category=checking\")}\n              className=\"text-finora-secondary hover:underline font-medium\"\n            >\n              Learn more →\n            </button>\n          </div>\n          \n          <div className=\"text-center p-6 bg-white rounded-lg shadow-sm border hover:shadow-lg transition-shadow duration-200\">\n            <div className=\"w-16 h-16 bg-finora-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-credit-card text-white text-2xl\"></i>\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Credit Cards</h3>\n            <p className=\"text-gray-600 mb-4\">Rewarding credit cards with cashback, travel rewards, and low rates.</p>\n            <button \n              onClick={() => setLocation(\"/products?category=credit-cards\")}\n              className=\"text-finora-accent hover:underline font-medium\"\n            >\n              Learn more →\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2908},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/find-branch.tsx":{"content":"import Navbar from \"@/components/ui/navbar\";\nimport BranchFinder from \"@/components/ui/branch-finder\";\n\nexport default function FindBranch() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar showLogin={true} />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">Find a Branch or ATM</h1>\n          <p className=\"text-gray-600 text-lg\">\n            Locate the nearest Finora branch or ATM to you. Get directions, hours, and available services.\n          </p>\n        </div>\n        \n        <BranchFinder />\n        \n        {/* Additional Information */}\n        <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n          <div className=\"bg-white rounded-lg shadow-sm p-6\">\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Banking Services</h3>\n            <ul className=\"space-y-2 text-gray-600\">\n              <li className=\"flex items-center\">\n                <i className=\"fas fa-check text-finora-primary mr-3\"></i>\n                Personal and business account opening\n              </li>\n              <li className=\"flex items-center\">\n                <i className=\"fas fa-check text-finora-primary mr-3\"></i>\n                Loan consultations and applications\n              </li>\n              <li className=\"flex items-center\">\n                <i className=\"fas fa-check text-finora-primary mr-3\"></i>\n                Investment and wealth management\n              </li>\n              <li className=\"flex items-center\">\n                <i className=\"fas fa-check text-finora-primary mr-3\"></i>\n                Mortgage and home equity services\n              </li>\n              <li className=\"flex items-center\">\n                <i className=\"fas fa-check text-finora-primary mr-3\"></i>\n                Safe deposit boxes\n              </li>\n            </ul>\n          </div>\n          \n          <div className=\"bg-white rounded-lg shadow-sm p-6\">\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">ATM Features</h3>\n            <ul className=\"space-y-2 text-gray-600\">\n              <li className=\"flex items-center\">\n                <i className=\"fas fa-check text-finora-primary mr-3\"></i>\n                24/7 access to your accounts\n              </li>\n              <li className=\"flex items-center\">\n                <i className=\"fas fa-check text-finora-primary mr-3\"></i>\n                Cash withdrawals and deposits\n              </li>\n              <li className=\"flex items-center\">\n                <i className=\"fas fa-check text-finora-primary mr-3\"></i>\n                Check deposits\n              </li>\n              <li className=\"flex items-center\">\n                <i className=\"fas fa-check text-finora-primary mr-3\"></i>\n                Balance inquiries and transfers\n              </li>\n              <li className=\"flex items-center\">\n                <i className=\"fas fa-check text-finora-primary mr-3\"></i>\n                Multilingual support\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3166},"client/src/components/admin/enhanced-customer-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User, Account, Transfer } from \"@shared/schema\";\n\nexport default function EnhancedCustomerManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedCustomer, setSelectedCustomer] = useState<User | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\n\n  const { data: customers = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n    retry: false,\n  });\n\n  const { data: customerAccounts = [] } = useQuery<Account[]>({\n    queryKey: [\"/api/admin/customer\", selectedCustomer?.id, \"accounts\"],\n    enabled: !!selectedCustomer,\n    retry: false,\n  });\n\n  const { data: customerTransfers = [] } = useQuery<Transfer[]>({\n    queryKey: [\"/api/admin/customer\", selectedCustomer?.id, \"transfers\"],\n    enabled: !!selectedCustomer,\n    retry: false,\n  });\n\n  const freezeAccountMutation = useMutation({\n    mutationFn: async ({ accountId, reason }: { accountId: string; reason: string }) => {\n      await apiRequest(\"POST\", `/api/admin/accounts/${accountId}/freeze`, { reason });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Account frozen successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/customer\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const unfreezeAccountMutation = useMutation({\n    mutationFn: async (accountId: string) => {\n      await apiRequest(\"POST\", `/api/admin/accounts/${accountId}/unfreeze`, {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Account unfrozen successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/customer\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredCustomers = customers\n    .filter(customer => customer.role === 'customer')\n    .filter(customer => {\n      const matchesSearch = \n        customer.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        customer.lastName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        customer.email.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      if (selectedStatus === 'all') return matchesSearch;\n      \n      // You'd need to add a status field to the user schema for this\n      return matchesSearch;\n    });\n\n  const getTotalBalance = (accounts: Account[]) => {\n    return accounts.reduce((total, account) => total + parseFloat(account.balance), 0).toFixed(2);\n  };\n\n  const getAccountStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'frozen': return 'bg-red-100 text-red-800';\n      case 'closed': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTransferStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-100 text-green-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'rejected': return 'bg-red-100 text-red-800';\n      case 'verification_required': return 'bg-blue-100 text-blue-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-finora-primary mx-auto\"></div>\n        <p className=\"mt-2 text-gray-600\">Loading customers...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Enhanced Customer Management</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {/* Search and Filter */}\n          <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n            <Input\n              placeholder=\"Search customers by name or email...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"flex-1\"\n            />\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger className=\"w-[200px]\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Customers</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"frozen\">Frozen</SelectItem>\n                <SelectItem value=\"closed\">Closed</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Customer List */}\n          <div className=\"grid gap-4\">\n            {filteredCustomers.map((customer) => (\n              <div\n                key={customer.id}\n                className={`p-4 border rounded-lg cursor-pointer transition-colors hover:bg-gray-50 ${\n                  selectedCustomer?.id === customer.id ? 'border-finora-primary bg-red-50' : 'border-gray-200'\n                }`}\n                onClick={() => setSelectedCustomer(customer)}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">\n                      {customer.firstName} {customer.lastName}\n                    </h3>\n                    <p className=\"text-gray-600\">{customer.email}</p>\n                    <p className=\"text-sm text-gray-500\">\n                      Customer since: {new Date(customer.createdAt || '').toLocaleDateString()}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <Badge variant=\"outline\">\n                      ID: {customer.id.slice(0, 8)}...\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {filteredCustomers.length === 0 && (\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-600\">No customers found matching your criteria.</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Customer Details */}\n      {selectedCustomer && (\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              Customer Details: {selectedCustomer.firstName} {selectedCustomer.lastName}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"accounts\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"accounts\">Accounts</TabsTrigger>\n                <TabsTrigger value=\"transfers\">Transfers</TabsTrigger>\n                <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"accounts\" className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-semibold\">Account Overview</h3>\n                  <Badge variant=\"outline\">\n                    Total Balance: ${getTotalBalance(customerAccounts)}\n                  </Badge>\n                </div>\n                \n                {customerAccounts.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {customerAccounts.map((account) => (\n                      <div key={account.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div>\n                            <h4 className=\"font-medium\">{account.accountType.replace('_', ' ')}</h4>\n                            <p className=\"text-sm text-gray-600\">****{account.accountNumber.slice(-4)}</p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-semibold\">${account.balance}</p>\n                            <Badge className={getAccountStatusColor(account.status)}>\n                              {account.status}\n                            </Badge>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex gap-2 mt-3\">\n                          {account.status === 'active' && (\n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button variant=\"outline\" size=\"sm\">\n                                  Freeze Account\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent>\n                                <DialogHeader>\n                                  <DialogTitle>Freeze Account</DialogTitle>\n                                </DialogHeader>\n                                <div className=\"space-y-4\">\n                                  <Alert>\n                                    <AlertDescription>\n                                      This will prevent all transactions on this account.\n                                    </AlertDescription>\n                                  </Alert>\n                                  <Input placeholder=\"Reason for freezing...\" />\n                                  <Button \n                                    onClick={() => freezeAccountMutation.mutate({ \n                                      accountId: account.id, \n                                      reason: \"Admin action\" \n                                    })}\n                                    className=\"w-full bg-red-600 hover:bg-red-700\"\n                                  >\n                                    Freeze Account\n                                  </Button>\n                                </div>\n                              </DialogContent>\n                            </Dialog>\n                          )}\n                          \n                          {account.status === 'frozen' && (\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => unfreezeAccountMutation.mutate(account.id)}\n                            >\n                              Unfreeze Account\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-gray-600 text-center py-4\">No accounts found for this customer.</p>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"transfers\" className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Recent Transfers</h3>\n                \n                {customerTransfers.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {customerTransfers.slice(0, 10).map((transfer) => (\n                      <div key={transfer.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"font-medium\">${transfer.amount}</p>\n                            <p className=\"text-sm text-gray-600\">\n                              To: {transfer.toAccountHolderName}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">\n                              {new Date(transfer.createdAt || '').toLocaleDateString()}\n                            </p>\n                          </div>\n                          <Badge className={getTransferStatusColor(transfer.status)}>\n                            {transfer.status}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-gray-600 text-center py-4\">No transfers found for this customer.</p>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"profile\" className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Customer Profile</h3>\n                \n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label>First Name</Label>\n                    <Input value={selectedCustomer.firstName || ''} readOnly />\n                  </div>\n                  <div>\n                    <Label>Last Name</Label>\n                    <Input value={selectedCustomer.lastName || ''} readOnly />\n                  </div>\n                  <div>\n                    <Label>Email</Label>\n                    <Input value={selectedCustomer.email} readOnly />\n                  </div>\n                  <div>\n                    <Label>Role</Label>\n                    <Input value={selectedCustomer.role} readOnly />\n                  </div>\n                  <div>\n                    <Label>Member Since</Label>\n                    <Input \n                      value={new Date(selectedCustomer.createdAt || '').toLocaleDateString()} \n                      readOnly \n                    />\n                  </div>\n                  <div>\n                    <Label>Last Updated</Label>\n                    <Input \n                      value={new Date(selectedCustomer.updatedAt || '').toLocaleDateString()} \n                      readOnly \n                    />\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":14679},"client/src/components/ui/branch-finder.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\n\ninterface Branch {\n  id: string;\n  name: string;\n  address: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  phone: string;\n  distance: number;\n  isATM: boolean;\n  services: string[];\n  hours: { day: string; hours: string }[];\n}\n\nconst sampleBranches: Branch[] = [\n  {\n    id: '1',\n    name: 'Finora Bank - Downtown',\n    address: '123 Main Street',\n    city: 'Boston',\n    state: 'MA',\n    zipCode: '02101',\n    phone: '(617) 555-0123',\n    distance: 0.5,\n    isATM: false,\n    services: ['Personal Banking', 'Business Banking', 'Mortgage', 'Investment'],\n    hours: [\n      { day: 'Monday - Friday', hours: '9:00 AM - 5:00 PM' },\n      { day: 'Saturday', hours: '9:00 AM - 2:00 PM' },\n      { day: 'Sunday', hours: 'Closed' }\n    ]\n  },\n  {\n    id: '2',\n    name: 'ATM - Financial District',\n    address: '456 Federal Street',\n    city: 'Boston',\n    state: 'MA',\n    zipCode: '02110',\n    phone: '',\n    distance: 0.8,\n    isATM: true,\n    services: ['24/7 ATM', 'Deposit Taking'],\n    hours: [\n      { day: 'All Week', hours: '24/7' }\n    ]\n  },\n  {\n    id: '3',\n    name: 'Finora Bank - Back Bay',\n    address: '789 Boylston Street',\n    city: 'Boston',\n    state: 'MA',\n    zipCode: '02116',\n    phone: '(617) 555-0456',\n    distance: 1.2,\n    isATM: false,\n    services: ['Personal Banking', 'Commercial Banking', 'Wealth Management'],\n    hours: [\n      { day: 'Monday - Friday', hours: '9:00 AM - 6:00 PM' },\n      { day: 'Saturday', hours: '9:00 AM - 3:00 PM' },\n      { day: 'Sunday', hours: 'Closed' }\n    ]\n  },\n  {\n    id: '4',\n    name: 'ATM - Harvard Square',\n    address: '321 Harvard Avenue',\n    city: 'Cambridge',\n    state: 'MA',\n    zipCode: '02138',\n    phone: '',\n    distance: 2.1,\n    isATM: true,\n    services: ['24/7 ATM', 'Multilingual Support'],\n    hours: [\n      { day: 'All Week', hours: '24/7' }\n    ]\n  }\n];\n\nexport default function BranchFinder() {\n  const [searchLocation, setSearchLocation] = useState('');\n  const [searchResults, setSearchResults] = useState<Branch[]>(sampleBranches);\n  const [filterType, setFilterType] = useState<'all' | 'branches' | 'atms'>('all');\n\n  const handleSearch = () => {\n    // Simulate search - in real app would use Google Maps API\n    let filtered = sampleBranches;\n    \n    if (filterType === 'branches') {\n      filtered = filtered.filter(b => !b.isATM);\n    } else if (filterType === 'atms') {\n      filtered = filtered.filter(b => b.isATM);\n    }\n    \n    setSearchResults(filtered);\n  };\n\n  const getDirections = (branch: Branch) => {\n    const address = `${branch.address}, ${branch.city}, ${branch.state} ${branch.zipCode}`;\n    const encodedAddress = encodeURIComponent(address);\n    window.open(`https://www.google.com/maps/dir/?api=1&destination=${encodedAddress}`, '_blank');\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-6\">\n      {/* Search Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <i className=\"fas fa-map-marker-alt text-finora-primary mr-2\"></i>\n            Find a Branch or ATM\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <Input\n              placeholder=\"Enter your address, city, or ZIP code\"\n              value={searchLocation}\n              onChange={(e) => setSearchLocation(e.target.value)}\n              className=\"flex-1\"\n            />\n            <div className=\"flex gap-2\">\n              <Button \n                variant={filterType === 'all' ? 'default' : 'outline'}\n                onClick={() => setFilterType('all')}\n                className={filterType === 'all' ? 'bg-finora-primary hover:bg-finora-dark' : ''}\n              >\n                All\n              </Button>\n              <Button \n                variant={filterType === 'branches' ? 'default' : 'outline'}\n                onClick={() => setFilterType('branches')}\n                className={filterType === 'branches' ? 'bg-finora-primary hover:bg-finora-dark' : ''}\n              >\n                Branches\n              </Button>\n              <Button \n                variant={filterType === 'atms' ? 'default' : 'outline'}\n                onClick={() => setFilterType('atms')}\n                className={filterType === 'atms' ? 'bg-finora-primary hover:bg-finora-dark' : ''}\n              >\n                ATMs\n              </Button>\n            </div>\n            <Button onClick={handleSearch} className=\"bg-finora-primary hover:bg-finora-dark\">\n              <i className=\"fas fa-search mr-2\"></i>\n              Search\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Results */}\n      <div className=\"grid gap-4\">\n        {searchResults.map((branch) => (\n          <Card key={branch.id} className=\"hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"grid md:grid-cols-3 gap-6\">\n                <div className=\"md:col-span-2\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div>\n                      <h3 className=\"text-xl font-semibold text-gray-900 mb-1\">\n                        {branch.name}\n                      </h3>\n                      <Badge variant={branch.isATM ? 'secondary' : 'default'} className=\"mb-2\">\n                        {branch.isATM ? 'ATM' : 'Full Service Branch'}\n                      </Badge>\n                    </div>\n                    <div className=\"text-right\">\n                      <span className=\"text-sm text-gray-500\">{branch.distance} miles</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2 mb-4\">\n                    <p className=\"text-gray-600\">\n                      <i className=\"fas fa-map-marker-alt mr-2 text-finora-primary\"></i>\n                      {branch.address}<br />\n                      <span className=\"ml-5\">{branch.city}, {branch.state} {branch.zipCode}</span>\n                    </p>\n                    {branch.phone && (\n                      <p className=\"text-gray-600\">\n                        <i className=\"fas fa-phone mr-2 text-finora-primary\"></i>\n                        <a href={`tel:${branch.phone}`} className=\"hover:text-finora-primary\">\n                          {branch.phone}\n                        </a>\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"mb-4\">\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Services Available:</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {branch.services.map((service, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                          {service}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Hours:</h4>\n                    <div className=\"text-sm text-gray-600 space-y-1\">\n                      {branch.hours.map((schedule, index) => (\n                        <div key={index} className=\"flex justify-between\">\n                          <span>{schedule.day}:</span>\n                          <span>{schedule.hours}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Button \n                      onClick={() => getDirections(branch)}\n                      className=\"w-full bg-finora-primary hover:bg-finora-dark\"\n                    >\n                      <i className=\"fas fa-directions mr-2\"></i>\n                      Get Directions\n                    </Button>\n                    {!branch.isATM && (\n                      <Button variant=\"outline\" className=\"w-full\">\n                        <i className=\"fas fa-calendar-alt mr-2\"></i>\n                        Schedule Appointment\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {searchResults.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-search text-gray-400 text-2xl\"></i>\n            </div>\n            <h3 className=\"font-medium text-gray-900 mb-2\">No results found</h3>\n            <p className=\"text-gray-600\">Try adjusting your search criteria or location.</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":9134},"client/src/components/ui/currency-ticker.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\n\ninterface CurrencyRate {\n  currency: string;\n  rate: number;\n  change: number;\n  changePercent: number;\n}\n\nexport default function CurrencyTicker() {\n  const [rates, setRates] = useState<CurrencyRate[]>([\n    { currency: 'EUR/USD', rate: 1.0842, change: 0.0023, changePercent: 0.21 },\n    { currency: 'GBP/USD', rate: 1.2734, change: -0.0045, changePercent: -0.35 },\n    { currency: 'USD/JPY', rate: 149.85, change: 0.34, changePercent: 0.23 },\n    { currency: 'USD/CAD', rate: 1.3589, change: 0.0012, changePercent: 0.09 },\n    { currency: 'AUD/USD', rate: 0.6523, change: -0.0018, changePercent: -0.28 },\n    { currency: 'USD/CHF', rate: 0.8734, change: 0.0009, changePercent: 0.10 }\n  ]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setRates(prev => prev.map(rate => ({\n        ...rate,\n        rate: rate.rate + (Math.random() - 0.5) * 0.01,\n        change: (Math.random() - 0.5) * 0.01,\n        changePercent: (Math.random() - 0.5) * 1\n      })));\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <Card className=\"bg-gradient-to-r from-gray-900 to-gray-800 text-white\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <h3 className=\"text-lg font-semibold\">Live Exchange Rates</h3>\n          <span className=\"text-sm text-gray-300\">Real-time</span>\n        </div>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n          {rates.map((rate) => (\n            <div key={rate.currency} className=\"text-center\">\n              <div className=\"text-sm font-medium text-gray-300\">{rate.currency}</div>\n              <div className=\"text-lg font-bold\">{rate.rate.toFixed(4)}</div>\n              <div className={`text-xs flex items-center justify-center ${\n                rate.change >= 0 ? 'text-green-400' : 'text-red-400'\n              }`}>\n                <span className={`mr-1 ${rate.change >= 0 ? '↗' : '↘'}`}>\n                  {rate.change >= 0 ? '↗' : '↘'}\n                </span>\n                {Math.abs(rate.changePercent).toFixed(2)}%\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2317},"client/src/components/customer/bill-payments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Account, BillPayment } from \"@shared/schema\";\n\ninterface BillPaymentForm {\n  accountId: string;\n  billType: string;\n  billerName: string;\n  billerAccountNumber: string;\n  amount: string;\n  dueDate: string;\n  isRecurring: boolean;\n  recurringFrequency: string;\n}\n\nconst billTypes = [\n  { value: 'utilities', label: 'Utilities (Electric, Gas, Water)', icon: 'fas fa-bolt' },\n  { value: 'internet', label: 'Internet & Cable TV', icon: 'fas fa-wifi' },\n  { value: 'phone', label: 'Phone & Mobile', icon: 'fas fa-phone' },\n  { value: 'insurance', label: 'Insurance', icon: 'fas fa-shield-alt' },\n  { value: 'rent', label: 'Rent & Mortgage', icon: 'fas fa-home' },\n  { value: 'loan', label: 'Loans & Credit Cards', icon: 'fas fa-credit-card' },\n  { value: 'education', label: 'School & Education', icon: 'fas fa-graduation-cap' },\n  { value: 'healthcare', label: 'Healthcare & Medical', icon: 'fas fa-hospital' },\n  { value: 'subscription', label: 'Subscriptions & Memberships', icon: 'fas fa-calendar' },\n  { value: 'other', label: 'Other Bills', icon: 'fas fa-file-invoice' },\n];\n\nexport default function BillPayments() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isPayBillDialogOpen, setIsPayBillDialogOpen] = useState(false);\n  const [selectedBillType, setSelectedBillType] = useState('');\n  const [billForm, setBillForm] = useState<BillPaymentForm>({\n    accountId: '',\n    billType: '',\n    billerName: '',\n    billerAccountNumber: '',\n    amount: '',\n    dueDate: '',\n    isRecurring: false,\n    recurringFrequency: 'monthly',\n  });\n\n  const { data: accounts = [], isLoading: accountsLoading } = useQuery<Account[]>({\n    queryKey: [\"/api/accounts\"],\n    retry: false,\n  });\n\n  const { data: billPayments = [], isLoading: billPaymentsLoading } = useQuery<BillPayment[]>({\n    queryKey: [\"/api/bill-payments\"],\n    retry: false,\n  });\n\n  const payBillMutation = useMutation({\n    mutationFn: async (data: BillPaymentForm) => {\n      const response = await apiRequest(\"POST\", \"/api/bill-payments\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Bill payment scheduled successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bill-payments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounts\"] });\n      setIsPayBillDialogOpen(false);\n      setBillForm({\n        accountId: '',\n        billType: '',\n        billerName: '',\n        billerAccountNumber: '',\n        amount: '',\n        dueDate: '',\n        isRecurring: false,\n        recurringFrequency: 'monthly',\n      });\n      setSelectedBillType('');\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => window.location.href = \"/api/login\", 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to schedule bill payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const cancelBillMutation = useMutation({\n    mutationFn: async (billId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/bill-payments/${billId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Bill payment cancelled successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bill-payments\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to cancel bill payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePayBill = () => {\n    if (!billForm.accountId || !billForm.billType || !billForm.billerName || !billForm.amount) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    payBillMutation.mutate(billForm);\n  };\n\n  const handleCancelBill = (billId: string) => {\n    if (confirm('Are you sure you want to cancel this bill payment?')) {\n      cancelBillMutation.mutate(billId);\n    }\n  };\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(parseFloat(amount));\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return 'bg-green-100 text-green-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'failed':\n        return 'bg-red-100 text-red-800';\n      case 'cancelled':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getBillTypeIcon = (billType: string) => {\n    const type = billTypes.find(t => t.value === billType);\n    return type ? type.icon : 'fas fa-file-invoice';\n  };\n\n  const getBillTypeLabel = (billType: string) => {\n    const type = billTypes.find(t => t.value === billType);\n    return type ? type.label : billType;\n  };\n\n  if (accountsLoading || billPaymentsLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-finora-primary\"></div>\n      </div>\n    );\n  }\n\n  const today = new Date().toISOString().split('T')[0];\n  const pendingBills = billPayments.filter(bill => bill.status === 'pending');\n  const paidBills = billPayments.filter(bill => bill.status === 'paid');\n  const recurringBills = billPayments.filter(bill => bill.isRecurring);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Bill Payments</h2>\n          <p className=\"text-gray-600\">Pay your bills quickly and set up recurring payments</p>\n        </div>\n        <Dialog open={isPayBillDialogOpen} onOpenChange={setIsPayBillDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-finora-primary hover:bg-finora-primary/90\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              Pay Bill\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-lg max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Pay a Bill</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"billType\">Bill Type</Label>\n                <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                  {billTypes.map((type) => (\n                    <Button\n                      key={type.value}\n                      variant={selectedBillType === type.value ? \"default\" : \"outline\"}\n                      className={`h-auto p-3 flex flex-col items-center gap-2 ${\n                        selectedBillType === type.value \n                          ? \"bg-finora-primary text-white\" \n                          : \"hover:bg-finora-primary/10\"\n                      }`}\n                      onClick={() => {\n                        setSelectedBillType(type.value);\n                        setBillForm(prev => ({ ...prev, billType: type.value }));\n                      }}\n                    >\n                      <i className={`${type.icon} text-lg`}></i>\n                      <span className=\"text-xs text-center\">{type.label.split(' ')[0]}</span>\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              {selectedBillType && (\n                <>\n                  <div>\n                    <Label htmlFor=\"account\">Pay From Account</Label>\n                    <Select value={billForm.accountId} onValueChange={(value) => \n                      setBillForm(prev => ({ ...prev, accountId: value }))\n                    }>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select account\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {accounts.map((account) => (\n                          <SelectItem key={account.id} value={account.id}>\n                            {account.accountType} - ****{account.accountNumber.slice(-4)} - {formatCurrency(account.balance)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"billerName\">Company/Biller Name</Label>\n                    <Input\n                      id=\"billerName\"\n                      value={billForm.billerName}\n                      onChange={(e) => setBillForm(prev => ({ ...prev, billerName: e.target.value }))}\n                      placeholder=\"e.g., ConEd, Verizon, etc.\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"billerAccountNumber\">Account Number</Label>\n                    <Input\n                      id=\"billerAccountNumber\"\n                      value={billForm.billerAccountNumber}\n                      onChange={(e) => setBillForm(prev => ({ ...prev, billerAccountNumber: e.target.value }))}\n                      placeholder=\"Your account number with the company\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"amount\">Amount ($)</Label>\n                    <Input\n                      id=\"amount\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={billForm.amount}\n                      onChange={(e) => setBillForm(prev => ({ ...prev, amount: e.target.value }))}\n                      placeholder=\"0.00\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"dueDate\">Due Date</Label>\n                    <Input\n                      id=\"dueDate\"\n                      type=\"date\"\n                      min={today}\n                      value={billForm.dueDate}\n                      onChange={(e) => setBillForm(prev => ({ ...prev, dueDate: e.target.value }))}\n                    />\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"isRecurring\"\n                      checked={billForm.isRecurring}\n                      onCheckedChange={(checked) => \n                        setBillForm(prev => ({ ...prev, isRecurring: checked as boolean }))\n                      }\n                    />\n                    <Label htmlFor=\"isRecurring\">Make this a recurring payment</Label>\n                  </div>\n\n                  {billForm.isRecurring && (\n                    <div>\n                      <Label htmlFor=\"frequency\">Payment Frequency</Label>\n                      <Select value={billForm.recurringFrequency} onValueChange={(value) => \n                        setBillForm(prev => ({ ...prev, recurringFrequency: value }))\n                      }>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"weekly\">Weekly</SelectItem>\n                          <SelectItem value=\"monthly\">Monthly</SelectItem>\n                          <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n\n                  <Button \n                    onClick={handlePayBill} \n                    className=\"w-full bg-finora-primary hover:bg-finora-primary/90\"\n                    disabled={payBillMutation.isPending}\n                  >\n                    {payBillMutation.isPending ? (\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    ) : (\n                      <i className=\"fas fa-credit-card mr-2\"></i>\n                    )}\n                    Schedule Payment\n                  </Button>\n                </>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"flex items-center justify-center w-12 h-12 bg-yellow-100 rounded-full mx-auto mb-2\">\n              <i className=\"fas fa-clock text-yellow-600\"></i>\n            </div>\n            <p className=\"text-2xl font-bold text-yellow-600\">{pendingBills.length}</p>\n            <p className=\"text-sm text-gray-600\">Pending</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"flex items-center justify-center w-12 h-12 bg-green-100 rounded-full mx-auto mb-2\">\n              <i className=\"fas fa-check text-green-600\"></i>\n            </div>\n            <p className=\"text-2xl font-bold text-green-600\">{paidBills.length}</p>\n            <p className=\"text-sm text-gray-600\">Paid This Month</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"flex items-center justify-center w-12 h-12 bg-blue-100 rounded-full mx-auto mb-2\">\n              <i className=\"fas fa-sync text-blue-600\"></i>\n            </div>\n            <p className=\"text-2xl font-bold text-blue-600\">{recurringBills.length}</p>\n            <p className=\"text-sm text-gray-600\">Recurring</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"flex items-center justify-center w-12 h-12 bg-purple-100 rounded-full mx-auto mb-2\">\n              <i className=\"fas fa-dollar-sign text-purple-600\"></i>\n            </div>\n            <p className=\"text-2xl font-bold text-purple-600\">\n              {formatCurrency(\n                billPayments\n                  .filter(bill => bill.status === 'paid')\n                  .reduce((sum, bill) => sum + parseFloat(bill.amount), 0)\n                  .toString()\n              )}\n            </p>\n            <p className=\"text-sm text-gray-600\">Total Paid</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"pending\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"pending\">Pending ({pendingBills.length})</TabsTrigger>\n          <TabsTrigger value=\"paid\">Paid ({paidBills.length})</TabsTrigger>\n          <TabsTrigger value=\"recurring\">Recurring ({recurringBills.length})</TabsTrigger>\n          <TabsTrigger value=\"all\">All Bills ({billPayments.length})</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"pending\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Pending Bill Payments</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {pendingBills.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-check-circle text-gray-400 text-4xl mb-4\"></i>\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Pending Bills</h3>\n                    <p className=\"text-gray-600\">All your bills are up to date!</p>\n                  </div>\n                ) : (\n                  pendingBills.map((bill) => (\n                    <div key={bill.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"p-2 bg-orange-100 rounded-full\">\n                            <i className={`${getBillTypeIcon(bill.billType)} text-orange-600`}></i>\n                          </div>\n                          <div>\n                            <p className=\"font-medium\">{bill.billerName}</p>\n                            <p className=\"text-sm text-gray-600\">{getBillTypeLabel(bill.billType)}</p>\n                            <p className=\"text-xs text-gray-500\">\n                              Account: ****{bill.billerAccountNumber.slice(-4)}\n                            </p>\n                            {bill.dueDate && (\n                              <p className=\"text-xs text-gray-500\">\n                                Due: {new Date(bill.dueDate!).toLocaleDateString()}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-xl font-bold text-orange-600 mb-2\">\n                            {formatCurrency(bill.amount)}\n                          </p>\n                          <Badge className={getStatusColor(bill.status)}>\n                            {bill.status}\n                          </Badge>\n                          {bill.isRecurring && (\n                            <Badge variant=\"outline\" className=\"ml-1\">\n                              {bill.recurringFrequency}\n                            </Badge>\n                          )}\n                          <div className=\"mt-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleCancelBill(bill.id)}\n                              className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                            >\n                              Cancel\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"paid\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Paid Bills</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {paidBills.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\">No paid bills found</p>\n                ) : (\n                  paidBills.map((bill) => (\n                    <div key={bill.id} className=\"border rounded-lg p-4 bg-green-50\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"p-2 bg-green-100 rounded-full\">\n                            <i className={`${getBillTypeIcon(bill.billType)} text-green-600`}></i>\n                          </div>\n                          <div>\n                            <p className=\"font-medium\">{bill.billerName}</p>\n                            <p className=\"text-sm text-gray-600\">{getBillTypeLabel(bill.billType)}</p>\n                            <p className=\"text-xs text-gray-500\">\n                              Paid: {new Date(bill.createdAt!).toLocaleDateString()}\n                            </p>\n                            {bill.reference && (\n                              <p className=\"text-xs text-gray-500\">\n                                Ref: {bill.reference}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-xl font-bold text-green-600 mb-2\">\n                            {formatCurrency(bill.amount)}\n                          </p>\n                          <Badge className={getStatusColor(bill.status)}>\n                            {bill.status}\n                          </Badge>\n                          {bill.isRecurring && (\n                            <Badge variant=\"outline\" className=\"ml-1\">\n                              {bill.recurringFrequency}\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"recurring\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recurring Bill Payments</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {recurringBills.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-sync text-gray-400 text-4xl mb-4\"></i>\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Recurring Bills</h3>\n                    <p className=\"text-gray-600 mb-4\">Set up automatic bill payments to never miss a due date</p>\n                    <Button onClick={() => setIsPayBillDialogOpen(true)} className=\"bg-finora-primary hover:bg-finora-primary/90\">\n                      Set Up Recurring Payment\n                    </Button>\n                  </div>\n                ) : (\n                  recurringBills.map((bill) => (\n                    <div key={bill.id} className=\"border rounded-lg p-4 bg-blue-50\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"p-2 bg-blue-100 rounded-full\">\n                            <i className={`${getBillTypeIcon(bill.billType)} text-blue-600`}></i>\n                          </div>\n                          <div>\n                            <p className=\"font-medium\">{bill.billerName}</p>\n                            <p className=\"text-sm text-gray-600\">{getBillTypeLabel(bill.billType)}</p>\n                            <p className=\"text-xs text-gray-500\">\n                              Every {bill.recurringFrequency}\n                            </p>\n                            {bill.dueDate && (\n                              <p className=\"text-xs text-gray-500\">\n                                Next: {new Date(bill.dueDate!).toLocaleDateString()}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-xl font-bold text-blue-600 mb-2\">\n                            {formatCurrency(bill.amount)}\n                          </p>\n                          <Badge className=\"bg-blue-100 text-blue-800\">\n                            Recurring\n                          </Badge>\n                          <div className=\"mt-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleCancelBill(bill.id)}\n                              className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                            >\n                              Cancel\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"all\">\n          <Card>\n            <CardHeader>\n              <CardTitle>All Bill Payments</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {billPayments.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <i className=\"fas fa-file-invoice text-gray-400 text-6xl mb-4\"></i>\n                    <h3 className=\"text-xl font-medium text-gray-900 mb-2\">No Bills Found</h3>\n                    <p className=\"text-gray-600 mb-6\">Start by paying your first bill to see your payment history here.</p>\n                    <Button onClick={() => setIsPayBillDialogOpen(true)} className=\"bg-finora-primary hover:bg-finora-primary/90\">\n                      Pay Your First Bill\n                    </Button>\n                  </div>\n                ) : (\n                  billPayments\n                    .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime())\n                    .map((bill) => (\n                      <div key={bill.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex justify-between items-start\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className={`p-2 rounded-full ${\n                              bill.status === 'paid' ? 'bg-green-100' : \n                              bill.status === 'pending' ? 'bg-yellow-100' : 'bg-red-100'\n                            }`}>\n                              <i className={`${getBillTypeIcon(bill.billType)} ${\n                                bill.status === 'paid' ? 'text-green-600' : \n                                bill.status === 'pending' ? 'text-yellow-600' : 'text-red-600'\n                              }`}></i>\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">{bill.billerName}</p>\n                              <p className=\"text-sm text-gray-600\">{getBillTypeLabel(bill.billType)}</p>\n                              <p className=\"text-xs text-gray-500\">\n                                {new Date(bill.createdAt!).toLocaleDateString()}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className={`text-xl font-bold mb-2 ${\n                              bill.status === 'paid' ? 'text-green-600' : \n                              bill.status === 'pending' ? 'text-yellow-600' : 'text-red-600'\n                            }`}>\n                              {formatCurrency(bill.amount)}\n                            </p>\n                            <Badge className={getStatusColor(bill.status)}>\n                              {bill.status}\n                            </Badge>\n                            {bill.isRecurring && (\n                              <Badge variant=\"outline\" className=\"ml-1\">\n                                {bill.recurringFrequency}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":27995},"client/src/components/customer/card-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Card as BankCard, Account } from \"@shared/schema\";\n\ninterface CardRequest {\n  accountId: string;\n  cardType: 'debit' | 'credit' | 'virtual';\n  spendingLimit?: string;\n  dailyLimit?: string;\n}\n\nexport default function CardManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedCard, setSelectedCard] = useState<BankCard | null>(null);\n  const [cardRequest, setCardRequest] = useState<CardRequest>({\n    accountId: '',\n    cardType: 'debit',\n    spendingLimit: '5000',\n    dailyLimit: '1000',\n  });\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  const { data: cards = [], isLoading: cardsLoading } = useQuery<BankCard[]>({\n    queryKey: [\"/api/cards\"],\n    retry: false,\n  });\n\n  const { data: accounts = [], isLoading: accountsLoading } = useQuery<Account[]>({\n    queryKey: [\"/api/accounts\"],\n    retry: false,\n  });\n\n  const createCardMutation = useMutation({\n    mutationFn: async (data: CardRequest) => {\n      const response = await apiRequest(\"POST\", \"/api/cards\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Card requested successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cards\"] });\n      setIsCreateDialogOpen(false);\n      setCardRequest({\n        accountId: '',\n        cardType: 'debit',\n        spendingLimit: '5000',\n        dailyLimit: '1000',\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => window.location.href = \"/api/login\", 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create card\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCardStatusMutation = useMutation({\n    mutationFn: async ({ cardId, status }: { cardId: string; status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/cards/${cardId}/status`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Card status updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cards\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update card status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCardLimitMutation = useMutation({\n    mutationFn: async ({ cardId, spendingLimit, dailyLimit }: { cardId: string; spendingLimit?: string; dailyLimit?: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/cards/${cardId}/limits`, { spendingLimit, dailyLimit });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Card limits updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cards\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update card limits\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateCard = () => {\n    if (!cardRequest.accountId) {\n      toast({\n        title: \"Error\",\n        description: \"Please select an account\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createCardMutation.mutate(cardRequest);\n  };\n\n  const handleFreezeCard = (cardId: string) => {\n    updateCardStatusMutation.mutate({ cardId, status: 'frozen' });\n  };\n\n  const handleUnfreezeCard = (cardId: string) => {\n    updateCardStatusMutation.mutate({ cardId, status: 'active' });\n  };\n\n  const handleCancelCard = (cardId: string) => {\n    if (confirm('Are you sure you want to cancel this card? This action cannot be undone.')) {\n      updateCardStatusMutation.mutate({ cardId, status: 'cancelled' });\n    }\n  };\n\n  const getCardStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-100 text-green-800';\n      case 'frozen':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getCardTypeIcon = (type: string) => {\n    switch (type) {\n      case 'credit':\n        return 'fas fa-credit-card text-blue-600';\n      case 'debit':\n        return 'fas fa-credit-card text-green-600';\n      case 'virtual':\n        return 'fas fa-mobile-alt text-purple-600';\n      default:\n        return 'fas fa-credit-card text-gray-600';\n    }\n  };\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(parseFloat(amount));\n  };\n\n  const maskCardNumber = (cardNumber: string) => {\n    return `****  ****  ****  ${cardNumber.slice(-4)}`;\n  };\n\n  if (cardsLoading || accountsLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-finora-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Card Management</h2>\n          <p className=\"text-gray-600\">Manage your debit, credit, and virtual cards</p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-finora-primary hover:bg-finora-primary/90\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              Request New Card\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Request New Card</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"account\">Select Account</Label>\n                <Select value={cardRequest.accountId} onValueChange={(value) => \n                  setCardRequest(prev => ({ ...prev, accountId: value }))\n                }>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose account\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {accounts.map((account) => (\n                      <SelectItem key={account.id} value={account.id}>\n                        {account.accountType} - ****{account.accountNumber.slice(-4)}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"cardType\">Card Type</Label>\n                <Select value={cardRequest.cardType} onValueChange={(value: any) => \n                  setCardRequest(prev => ({ ...prev, cardType: value }))\n                }>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"debit\">Debit Card</SelectItem>\n                    <SelectItem value=\"credit\">Credit Card</SelectItem>\n                    <SelectItem value=\"virtual\">Virtual Card</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"spendingLimit\">Monthly Spending Limit ($)</Label>\n                <Input\n                  id=\"spendingLimit\"\n                  type=\"number\"\n                  value={cardRequest.spendingLimit}\n                  onChange={(e) => setCardRequest(prev => ({ ...prev, spendingLimit: e.target.value }))}\n                  placeholder=\"5000\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"dailyLimit\">Daily Spending Limit ($)</Label>\n                <Input\n                  id=\"dailyLimit\"\n                  type=\"number\"\n                  value={cardRequest.dailyLimit}\n                  onChange={(e) => setCardRequest(prev => ({ ...prev, dailyLimit: e.target.value }))}\n                  placeholder=\"1000\"\n                />\n              </div>\n\n              <Button \n                onClick={handleCreateCard} \n                className=\"w-full bg-finora-primary hover:bg-finora-primary/90\"\n                disabled={createCardMutation.isPending}\n              >\n                {createCardMutation.isPending ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                ) : (\n                  <i className=\"fas fa-credit-card mr-2\"></i>\n                )}\n                Request Card\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {cards.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <i className=\"fas fa-credit-card text-gray-400 text-6xl mb-4\"></i>\n            <h3 className=\"text-xl font-medium text-gray-900 mb-2\">No Cards Found</h3>\n            <p className=\"text-gray-600 mb-6\">You don't have any cards yet. Request your first card to get started.</p>\n            <Button \n              onClick={() => setIsCreateDialogOpen(true)}\n              className=\"bg-finora-primary hover:bg-finora-primary/90\"\n            >\n              Request Your First Card\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <Tabs defaultValue=\"all\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"all\">All Cards ({cards.length})</TabsTrigger>\n            <TabsTrigger value=\"active\">Active ({cards.filter(c => c.status === 'active').length})</TabsTrigger>\n            <TabsTrigger value=\"frozen\">Frozen ({cards.filter(c => c.status === 'frozen').length})</TabsTrigger>\n            <TabsTrigger value=\"virtual\">Virtual ({cards.filter(c => c.isVirtual).length})</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"all\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {cards.map((card) => (\n                <Card key={card.id} className=\"overflow-hidden\">\n                  <CardHeader className={`text-white ${\n                    card.type === 'credit' ? 'bg-gradient-to-r from-blue-600 to-blue-800' :\n                    card.type === 'debit' ? 'bg-gradient-to-r from-green-600 to-green-800' :\n                    'bg-gradient-to-r from-purple-600 to-purple-800'\n                  }`}>\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <p className=\"text-sm opacity-90\">Finora Bank</p>\n                        <p className=\"text-lg font-mono\">{maskCardNumber(card.cardNumber)}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge className=\"bg-white/20 text-white\">\n                          {card.type.toUpperCase()}\n                        </Badge>\n                        {card.isVirtual && (\n                          <Badge className=\"bg-white/20 text-white ml-1\">\n                            VIRTUAL\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex justify-between items-end\">\n                      <div>\n                        <p className=\"text-sm opacity-90\">Card Holder</p>\n                        <p className=\"font-medium\">{card.cardHolderName}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm opacity-90\">Expires</p>\n                        <p className=\"font-mono\">{card.expiryDate}</p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"p-4\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600\">Status:</span>\n                        <Badge className={getCardStatusColor(card.status)}>\n                          {card.status}\n                        </Badge>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between items-center text-sm\">\n                          <span className=\"text-gray-600\">Monthly Limit:</span>\n                          <span className=\"font-medium\">{formatCurrency(card.spendingLimit)}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center text-sm\">\n                          <span className=\"text-gray-600\">Daily Limit:</span>\n                          <span className=\"font-medium\">{formatCurrency(card.dailyLimit)}</span>\n                        </div>\n                      </div>\n\n                      <div className=\"flex gap-2 pt-2\">\n                        {card.status === 'active' ? (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleFreezeCard(card.id)}\n                            className=\"flex-1\"\n                          >\n                            <i className=\"fas fa-snowflake mr-1\"></i>\n                            Freeze\n                          </Button>\n                        ) : card.status === 'frozen' ? (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleUnfreezeCard(card.id)}\n                            className=\"flex-1\"\n                          >\n                            <i className=\"fas fa-unlock mr-1\"></i>\n                            Unfreeze\n                          </Button>\n                        ) : null}\n\n                        {card.status !== 'cancelled' && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setSelectedCard(card)}\n                            className=\"flex-1\"\n                          >\n                            <i className=\"fas fa-cog mr-1\"></i>\n                            Settings\n                          </Button>\n                        )}\n\n                        {card.status !== 'cancelled' && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleCancelCard(card.id)}\n                            className=\"flex-1 text-red-600 border-red-200 hover:bg-red-50\"\n                          >\n                            <i className=\"fas fa-times mr-1\"></i>\n                            Cancel\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"active\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {cards.filter(c => c.status === 'active').map((card) => (\n                <Card key={card.id} className=\"overflow-hidden\">\n                  {/* Same card content as above */}\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"frozen\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {cards.filter(c => c.status === 'frozen').map((card) => (\n                <Card key={card.id} className=\"overflow-hidden opacity-75\">\n                  {/* Same card content as above */}\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"virtual\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {cards.filter(c => c.isVirtual).map((card) => (\n                <Card key={card.id} className=\"overflow-hidden\">\n                  {/* Same card content as above */}\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n        </Tabs>\n      )}\n\n      {/* Card Settings Dialog */}\n      {selectedCard && (\n        <Dialog open={!!selectedCard} onOpenChange={() => setSelectedCard(null)}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Card Settings</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-medium mb-2\">Update Spending Limits</h4>\n                <div className=\"space-y-3\">\n                  <div>\n                    <Label>Monthly Spending Limit ($)</Label>\n                    <Input\n                      type=\"number\"\n                      defaultValue={selectedCard.spendingLimit}\n                      onBlur={(e) => {\n                        if (e.target.value !== selectedCard.spendingLimit) {\n                          updateCardLimitMutation.mutate({\n                            cardId: selectedCard.id,\n                            spendingLimit: e.target.value,\n                          });\n                        }\n                      }}\n                    />\n                  </div>\n                  <div>\n                    <Label>Daily Spending Limit ($)</Label>\n                    <Input\n                      type=\"number\"\n                      defaultValue={selectedCard.dailyLimit}\n                      onBlur={(e) => {\n                        if (e.target.value !== selectedCard.dailyLimit) {\n                          updateCardLimitMutation.mutate({\n                            cardId: selectedCard.id,\n                            dailyLimit: e.target.value,\n                          });\n                        }\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <Alert>\n                <i className=\"fas fa-info-circle text-blue-600\"></i>\n                <AlertDescription>\n                  Changes to spending limits take effect immediately. You can update them anytime.\n                </AlertDescription>\n              </Alert>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}","size_bytes":19704},"client/src/components/customer/customer-overview.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Account, Transaction, Card as BankCard, Notification } from \"@shared/schema\";\n\ninterface CustomerStats {\n  totalBalance: string;\n  totalAccounts: number;\n  totalCards: number;\n  recentTransactions: number;\n  unreadNotifications: number;\n  monthlySpending: string;\n}\n\ninterface ForexRate {\n  currency: string;\n  rate: number;\n  change: string;\n  changePercent: string;\n}\n\ninterface ForexData {\n  base: string;\n  timestamp: string;\n  rates: ForexRate[];\n}\n\nexport default function CustomerOverview() {\n  const { toast } = useToast();\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  // Update time every second\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const { data: accounts = [], isLoading: accountsLoading } = useQuery<Account[]>({\n    queryKey: [\"/api/accounts\"],\n    retry: false,\n  });\n\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/transactions\"],\n    retry: false,\n  });\n\n  const { data: cards = [], isLoading: cardsLoading } = useQuery<BankCard[]>({\n    queryKey: [\"/api/cards\"],\n    retry: false,\n  });\n\n  const { data: notifications = [], isLoading: notificationsLoading } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\"],\n    retry: false,\n  });\n\n  const { data: forexData, isLoading: forexLoading } = useQuery<ForexData>({\n    queryKey: [\"/api/forex-rates\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n    retry: false,\n  });\n\n  // Calculate customer stats\n  const customerStats: CustomerStats = {\n    totalBalance: accounts.reduce((sum, acc) => sum + parseFloat(acc.balance || '0'), 0).toFixed(2),\n    totalAccounts: accounts.length,\n    totalCards: cards.length,\n    recentTransactions: transactions.filter(t => {\n      if (!t.createdAt) return false;\n      const transactionDate = new Date(t.createdAt);\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      return transactionDate >= weekAgo;\n    }).length,\n    unreadNotifications: notifications.filter(n => n.status === 'unread').length,\n    monthlySpending: transactions\n      .filter(t => {\n        if (!t.createdAt) return false;\n        const transactionDate = new Date(t.createdAt);\n        const monthAgo = new Date();\n        monthAgo.setMonth(monthAgo.getMonth() - 1);\n        return transactionDate >= monthAgo && t.type === 'debit';\n      })\n      .reduce((sum, t) => sum + parseFloat(t.amount), 0)\n      .toFixed(2),\n  };\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(parseFloat(amount));\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    });\n  };\n\n  if (accountsLoading || transactionsLoading || cardsLoading || notificationsLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-finora-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Welcome Header */}\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">Dashboard Overview</h2>\n        <p className=\"text-gray-600\">{formatTime(currentTime)}</p>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-green-600\">{formatCurrency(customerStats.totalBalance)}</p>\n              <p className=\"text-sm text-gray-600\">Total Balance</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-blue-600\">{customerStats.totalAccounts}</p>\n              <p className=\"text-sm text-gray-600\">Active Accounts</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-purple-600\">{customerStats.totalCards}</p>\n              <p className=\"text-sm text-gray-600\">Active Cards</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-orange-600\">{customerStats.recentTransactions}</p>\n              <p className=\"text-sm text-gray-600\">Recent Transactions</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-red-600\">{customerStats.unreadNotifications}</p>\n              <p className=\"text-sm text-gray-600\">Unread Notifications</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-gray-600\">{formatCurrency(customerStats.monthlySpending)}</p>\n              <p className=\"text-sm text-gray-600\">Monthly Spending</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Account Summary */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <i className=\"fas fa-university text-finora-primary\"></i>\n              Account Summary\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {accounts.slice(0, 3).map((account) => (\n                <div key={account.id} className=\"flex justify-between items-center p-3 border rounded\">\n                  <div>\n                    <p className=\"font-medium\">{account.accountType.charAt(0).toUpperCase() + account.accountType.slice(1)} Account</p>\n                    <p className=\"text-sm text-gray-600\">****{account.accountNumber.slice(-4)}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold\">{formatCurrency(account.balance)}</p>\n                    <Badge variant={account.status === 'active' ? 'default' : 'destructive'}>\n                      {account.status}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n              {accounts.length > 3 && (\n                <Button variant=\"outline\" className=\"w-full\">\n                  View All Accounts ({accounts.length})\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Real-Time Forex Rates */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <i className=\"fas fa-chart-line text-finora-primary\"></i>\n              Live Forex Rates\n              <Badge variant=\"outline\" className=\"ml-auto\">\n                USD Base\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {forexLoading ? (\n              <div className=\"flex justify-center py-4\">\n                <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-finora-primary\"></div>\n              </div>\n            ) : forexData ? (\n              <div className=\"space-y-2\">\n                {forexData.rates.slice(0, 6).map((rate) => (\n                  <div key={rate.currency} className=\"flex justify-between items-center\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium\">{rate.currency}</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <span className=\"font-mono\">{rate.rate.toFixed(4)}</span>\n                      <Badge\n                        variant={parseFloat(rate.change) >= 0 ? \"default\" : \"destructive\"}\n                        className=\"ml-2 text-xs\"\n                      >\n                        {parseFloat(rate.change) >= 0 ? \"+\" : \"\"}{rate.changePercent}%\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n                <div className=\"text-xs text-gray-500 text-center pt-2\">\n                  Last updated: {forexData.timestamp ? new Date(forexData.timestamp).toLocaleTimeString() : 'N/A'}\n                </div>\n              </div>\n            ) : (\n              <Alert>\n                <AlertDescription>Unable to load forex rates</AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Recent Transactions */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <i className=\"fas fa-exchange-alt text-finora-primary\"></i>\n              Recent Activity\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {transactions.slice(0, 5).map((transaction) => (\n                <div key={transaction.id} className=\"flex justify-between items-center p-2 border-b last:border-b-0\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className={`p-2 rounded-full ${\n                      transaction.type === 'credit' ? 'bg-green-100 text-green-600' :\n                      transaction.type === 'debit' ? 'bg-red-100 text-red-600' :\n                      'bg-orange-100 text-orange-600'\n                    }`}>\n                      <i className={`fas ${\n                        transaction.type === 'credit' ? 'fa-arrow-down' :\n                        transaction.type === 'debit' ? 'fa-arrow-up' :\n                        'fa-receipt'\n                      } text-sm`}></i>\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-sm\">{transaction.description}</p>\n                      <p className=\"text-xs text-gray-500\">\n                        {transaction.createdAt ? new Date(transaction.createdAt).toLocaleDateString() : 'N/A'}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className={`font-semibold ${\n                      transaction.type === 'credit' ? 'text-green-600' :\n                      transaction.type === 'debit' ? 'text-red-600' :\n                      'text-orange-600'\n                    }`}>\n                      {transaction.type === 'credit' ? '+' : '-'}{formatCurrency(transaction.amount)}\n                    </p>\n                  </div>\n                </div>\n              ))}\n              {transactions.length === 0 && (\n                <p className=\"text-gray-500 text-center py-4\">No recent transactions</p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Notifications */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <i className=\"fas fa-bell text-finora-primary\"></i>\n              Recent Notifications\n              {customerStats.unreadNotifications > 0 && (\n                <Badge className=\"bg-red-500 text-white\">\n                  {customerStats.unreadNotifications}\n                </Badge>\n              )}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {notifications.slice(0, 4).map((notification) => (\n                <div key={notification.id} className={`p-3 border rounded ${\n                  notification.status === 'unread' ? 'bg-blue-50 border-blue-200' : ''\n                }`}>\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-sm\">{notification.title}</p>\n                      <p className=\"text-xs text-gray-600 mt-1\">{notification.message}</p>\n                    </div>\n                    <Badge variant={\n                      notification.type === 'fraud_alert' ? 'destructive' :\n                      notification.type === 'security' ? 'secondary' :\n                      'default'\n                    } className=\"text-xs\">\n                      {notification.type.replace('_', ' ')}\n                    </Badge>\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-2\">\n                    {notification.createdAt ? new Date(notification.createdAt).toLocaleString() : 'N/A'}\n                  </p>\n                </div>\n              ))}\n              {notifications.length === 0 && (\n                <p className=\"text-gray-500 text-center py-4\">No notifications</p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n            <Button variant=\"outline\" className=\"h-20 flex-col gap-2\">\n              <i className=\"fas fa-exchange-alt text-finora-primary\"></i>\n              <span className=\"text-sm\">Transfer Money</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex-col gap-2\">\n              <i className=\"fas fa-file-invoice text-finora-primary\"></i>\n              <span className=\"text-sm\">Pay Bills</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex-col gap-2\">\n              <i className=\"fas fa-credit-card text-finora-primary\"></i>\n              <span className=\"text-sm\">Manage Cards</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex-col gap-2\">\n              <i className=\"fas fa-chart-pie text-finora-primary\"></i>\n              <span className=\"text-sm\">Investments</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex-col gap-2\">\n              <i className=\"fas fa-user-cog text-finora-primary\"></i>\n              <span className=\"text-sm\">Profile</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-20 flex-col gap-2\">\n              <i className=\"fas fa-headset text-finora-primary\"></i>\n              <span className=\"text-sm\">Support</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":15402},"client/src/components/customer/customer-profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { User, CustomerProfile } from \"@shared/schema\";\n\ninterface ProfileForm {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phoneNumber: string;\n  dateOfBirth: string;\n  address: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  country: string;\n  ssn: string;\n  employmentStatus: string;\n  annualIncome: string;\n}\n\nconst employmentStatuses = [\n  'Employed Full-Time',\n  'Employed Part-Time',\n  'Self-Employed',\n  'Unemployed',\n  'Retired',\n  'Student',\n  'Other'\n];\n\nconst usStates = [\n  'AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA',\n  'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD',\n  'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ',\n  'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC',\n  'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY'\n];\n\nexport default function CustomerProfile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditingProfile, setIsEditingProfile] = useState(false);\n  const [isDocumentDialogOpen, setIsDocumentDialogOpen] = useState(false);\n  const [profileForm, setProfileForm] = useState<ProfileForm>({\n    firstName: user?.firstName || '',\n    lastName: user?.lastName || '',\n    email: user?.email || '',\n    phoneNumber: '',\n    dateOfBirth: '',\n    address: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    country: 'United States',\n    ssn: '',\n    employmentStatus: '',\n    annualIncome: '',\n  });\n\n  const { data: profile, isLoading: profileLoading } = useQuery<CustomerProfile | null>({\n    queryKey: [\"/api/profile\"],\n    retry: false,\n  });\n\n  // Update form state when profile data loads\n  useEffect(() => {\n    if (profile) {\n      setProfileForm({\n        firstName: user?.firstName || '',\n        lastName: user?.lastName || '',\n        email: user?.email || '',\n        phoneNumber: profile.phoneNumber || '',\n        dateOfBirth: profile.dateOfBirth ? new Date(profile.dateOfBirth).toISOString().split('T')[0] : '',\n        address: profile.address || '',\n        city: profile.city || '',\n        state: profile.state || '',\n        zipCode: profile.zipCode || '',\n        country: profile.country || 'United States',\n        ssn: profile.ssn || '',\n        employmentStatus: profile.employmentStatus || '',\n        annualIncome: profile.annualIncome || '',\n      });\n    }\n  }, [profile, user]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: Partial<ProfileForm>) => {\n      const response = await apiRequest(\"PUT\", \"/api/profile\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/profile\"] });\n      setIsEditingProfile(false);\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => window.location.href = \"/login\", 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const uploadDocumentMutation = useMutation({\n    mutationFn: async ({ documentType, file }: { documentType: string; file: File }) => {\n      const formData = new FormData();\n      formData.append('document', file);\n      formData.append('documentType', documentType);\n      \n      const response = await fetch('/api/profile/documents', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to upload document');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Document uploaded successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/profile\"] });\n      setIsDocumentDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to upload document\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateProfile = () => {\n    updateProfileMutation.mutate(profileForm);\n  };\n\n  const handleDocumentUpload = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    const documentType = formData.get('documentType') as string;\n    const file = formData.get('document') as File;\n    \n    if (!file || !documentType) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a document and specify its type\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    uploadDocumentMutation.mutate({ documentType, file });\n  };\n\n  const getVerificationStatusColor = (status: string) => {\n    switch (status) {\n      case 'verified':\n        return 'bg-green-100 text-green-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getKycStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (profileLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-finora-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Customer Profile</h2>\n          <p className=\"text-gray-600\">Manage your personal information and verification status</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={isDocumentDialogOpen} onOpenChange={setIsDocumentDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" className=\"border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white\">\n                <i className=\"fas fa-upload mr-2\"></i>\n                Upload Documents\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-lg\">\n              <DialogHeader>\n                <DialogTitle>Upload Verification Documents</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleDocumentUpload} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"documentType\">Document Type</Label>\n                  <Select name=\"documentType\" required>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select document type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"id\">Government ID (Driver's License/Passport)</SelectItem>\n                      <SelectItem value=\"address\">Proof of Address (Utility Bill/Bank Statement)</SelectItem>\n                      <SelectItem value=\"income\">Proof of Income (Pay Stub/Tax Return)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"document\">Select Document</Label>\n                  <Input\n                    id=\"document\"\n                    name=\"document\"\n                    type=\"file\"\n                    accept=\".pdf,.jpg,.jpeg,.png\"\n                    required\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Accepted formats: PDF, JPG, PNG (max 10MB)\n                  </p>\n                </div>\n\n                <Alert>\n                  <i className=\"fas fa-shield-alt text-blue-600\"></i>\n                  <AlertDescription>\n                    Your documents are encrypted and securely stored. We use bank-level security to protect your information.\n                  </AlertDescription>\n                </Alert>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-finora-primary hover:bg-finora-primary/90\"\n                  disabled={uploadDocumentMutation.isPending}\n                >\n                  {uploadDocumentMutation.isPending ? (\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  ) : (\n                    <i className=\"fas fa-upload mr-2\"></i>\n                  )}\n                  Upload Document\n                </Button>\n              </form>\n            </DialogContent>\n          </Dialog>\n\n          <Button \n            onClick={() => setIsEditingProfile(!isEditingProfile)}\n            className=\"bg-finora-primary hover:bg-finora-primary/90\"\n          >\n            <i className={`fas ${isEditingProfile ? 'fa-times' : 'fa-edit'} mr-2`}></i>\n            {isEditingProfile ? 'Cancel' : 'Edit Profile'}\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Verification Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <i className=\"fas fa-shield-check text-finora-primary\"></i>\n              Verification Status\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm font-medium\">Identity Verification</span>\n              <Badge className={getVerificationStatusColor(profile?.idVerificationStatus || 'pending')}>\n                {profile?.idVerificationStatus || 'pending'}\n              </Badge>\n            </div>\n\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm font-medium\">KYC Status</span>\n              <Badge className={getKycStatusColor(profile?.kycStatus || 'pending')}>\n                {profile?.kycStatus || 'pending'}\n              </Badge>\n            </div>\n\n            <div className=\"space-y-2 pt-2\">\n              <div className=\"flex items-center gap-2\">\n                <i className={`fas fa-circle text-xs ${profile?.idDocumentUrl ? 'text-green-500' : 'text-gray-300'}`}></i>\n                <span className=\"text-sm\">Government ID</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <i className={`fas fa-circle text-xs ${profile?.proofOfAddressUrl ? 'text-green-500' : 'text-gray-300'}`}></i>\n                <span className=\"text-sm\">Proof of Address</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <i className={`fas fa-circle text-xs ${profile?.ssn ? 'text-green-500' : 'text-gray-300'}`}></i>\n                <span className=\"text-sm\">SSN Verification</span>\n              </div>\n            </div>\n\n            {(profile?.idVerificationStatus === 'pending' || profile?.kycStatus === 'pending') && (\n              <Alert className=\"mt-4\">\n                <i className=\"fas fa-clock text-yellow-600\"></i>\n                <AlertDescription>\n                  Your verification is in progress. This typically takes 1-2 business days.\n                </AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Profile Information */}\n        <div className=\"lg:col-span-2\">\n          <Tabs defaultValue=\"personal\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"personal\">Personal Info</TabsTrigger>\n              <TabsTrigger value=\"contact\">Contact & Address</TabsTrigger>\n              <TabsTrigger value=\"financial\">Financial Info</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"personal\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Personal Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        value={profileForm.firstName}\n                        onChange={(e) => setProfileForm(prev => ({ ...prev, firstName: e.target.value }))}\n                        disabled={!isEditingProfile}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        value={profileForm.lastName}\n                        onChange={(e) => setProfileForm(prev => ({ ...prev, lastName: e.target.value }))}\n                        disabled={!isEditingProfile}\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={profileForm.email}\n                      onChange={(e) => setProfileForm(prev => ({ ...prev, email: e.target.value }))}\n                      disabled={!isEditingProfile}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n                      <Input\n                        id=\"phoneNumber\"\n                        type=\"tel\"\n                        value={profileForm.phoneNumber}\n                        onChange={(e) => setProfileForm(prev => ({ ...prev, phoneNumber: e.target.value }))}\n                        disabled={!isEditingProfile}\n                        placeholder=\"(555) 123-4567\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n                      <Input\n                        id=\"dateOfBirth\"\n                        type=\"date\"\n                        value={profileForm.dateOfBirth}\n                        onChange={(e) => setProfileForm(prev => ({ ...prev, dateOfBirth: e.target.value }))}\n                        disabled={!isEditingProfile}\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"ssn\">Social Security Number</Label>\n                    <Input\n                      id=\"ssn\"\n                      type={isEditingProfile ? \"text\" : \"password\"}\n                      value={isEditingProfile ? profileForm.ssn : (profile?.ssn ? '***-**-' + profile.ssn.slice(-4) : '')}\n                      onChange={(e) => setProfileForm(prev => ({ ...prev, ssn: e.target.value }))}\n                      disabled={!isEditingProfile}\n                      placeholder=\"XXX-XX-XXXX\"\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      Required for account verification and tax reporting\n                    </p>\n                  </div>\n\n                  {isEditingProfile && (\n                    <div className=\"flex gap-2 pt-4\">\n                      <Button \n                        onClick={handleUpdateProfile}\n                        className=\"bg-finora-primary hover:bg-finora-primary/90\"\n                        disabled={updateProfileMutation.isPending}\n                      >\n                        {updateProfileMutation.isPending ? (\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        ) : (\n                          <i className=\"fas fa-save mr-2\"></i>\n                        )}\n                        Save Changes\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => setIsEditingProfile(false)}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"contact\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Contact & Address Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"address\">Street Address</Label>\n                    <Input\n                      id=\"address\"\n                      value={profileForm.address}\n                      onChange={(e) => setProfileForm(prev => ({ ...prev, address: e.target.value }))}\n                      disabled={!isEditingProfile}\n                      placeholder=\"123 Main Street\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <Label htmlFor=\"city\">City</Label>\n                      <Input\n                        id=\"city\"\n                        value={profileForm.city}\n                        onChange={(e) => setProfileForm(prev => ({ ...prev, city: e.target.value }))}\n                        disabled={!isEditingProfile}\n                        placeholder=\"New York\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"state\">State</Label>\n                      <Select \n                        value={profileForm.state} \n                        onValueChange={(value) => setProfileForm(prev => ({ ...prev, state: value }))}\n                        disabled={!isEditingProfile}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select state\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {usStates.map((state) => (\n                            <SelectItem key={state} value={state}>\n                              {state}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"zipCode\">ZIP Code</Label>\n                      <Input\n                        id=\"zipCode\"\n                        value={profileForm.zipCode}\n                        onChange={(e) => setProfileForm(prev => ({ ...prev, zipCode: e.target.value }))}\n                        disabled={!isEditingProfile}\n                        placeholder=\"10001\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"country\">Country</Label>\n                    <Select \n                      value={profileForm.country} \n                      onValueChange={(value) => setProfileForm(prev => ({ ...prev, country: value }))}\n                      disabled={!isEditingProfile}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"United States\">United States</SelectItem>\n                        <SelectItem value=\"Canada\">Canada</SelectItem>\n                        <SelectItem value=\"United Kingdom\">United Kingdom</SelectItem>\n                        <SelectItem value=\"Other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {isEditingProfile && (\n                    <div className=\"flex gap-2 pt-4\">\n                      <Button \n                        onClick={handleUpdateProfile}\n                        className=\"bg-finora-primary hover:bg-finora-primary/90\"\n                        disabled={updateProfileMutation.isPending}\n                      >\n                        {updateProfileMutation.isPending ? (\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        ) : (\n                          <i className=\"fas fa-save mr-2\"></i>\n                        )}\n                        Save Changes\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => setIsEditingProfile(false)}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"financial\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Financial Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"employmentStatus\">Employment Status</Label>\n                    <Select \n                      value={profileForm.employmentStatus} \n                      onValueChange={(value) => setProfileForm(prev => ({ ...prev, employmentStatus: value }))}\n                      disabled={!isEditingProfile}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select employment status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {employmentStatuses.map((status) => (\n                          <SelectItem key={status} value={status}>\n                            {status}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"annualIncome\">Annual Income (USD)</Label>\n                    <Input\n                      id=\"annualIncome\"\n                      type=\"number\"\n                      step=\"1000\"\n                      value={profileForm.annualIncome}\n                      onChange={(e) => setProfileForm(prev => ({ ...prev, annualIncome: e.target.value }))}\n                      disabled={!isEditingProfile}\n                      placeholder=\"50000\"\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      This information helps us provide appropriate financial products and services\n                    </p>\n                  </div>\n\n                  <Alert>\n                    <i className=\"fas fa-lock text-green-600\"></i>\n                    <AlertDescription>\n                      All financial information is encrypted and stored securely. We never share your personal data with third parties without your consent.\n                    </AlertDescription>\n                  </Alert>\n\n                  {isEditingProfile && (\n                    <div className=\"flex gap-2 pt-4\">\n                      <Button \n                        onClick={handleUpdateProfile}\n                        className=\"bg-finora-primary hover:bg-finora-primary/90\"\n                        disabled={updateProfileMutation.isPending}\n                      >\n                        {updateProfileMutation.isPending ? (\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        ) : (\n                          <i className=\"fas fa-save mr-2\"></i>\n                        )}\n                        Save Changes\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => setIsEditingProfile(false)}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":25613},"client/src/components/customer/customer-support.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { SupportTicket, ChatMessage } from \"@shared/schema\";\n\ninterface TicketForm {\n  subject: string;\n  description: string;\n  category: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n}\n\nconst ticketCategories = [\n  { value: 'account', label: 'Account Issues', icon: 'fas fa-user-circle' },\n  { value: 'transfer', label: 'Transfers & Payments', icon: 'fas fa-exchange-alt' },\n  { value: 'card', label: 'Card Problems', icon: 'fas fa-credit-card' },\n  { value: 'investment', label: 'Investment Questions', icon: 'fas fa-chart-line' },\n  { value: 'technical', label: 'Technical Support', icon: 'fas fa-cog' },\n  { value: 'billing', label: 'Billing & Fees', icon: 'fas fa-file-invoice-dollar' },\n  { value: 'fraud', label: 'Fraud & Security', icon: 'fas fa-shield-alt' },\n  { value: 'other', label: 'General Inquiry', icon: 'fas fa-question-circle' },\n];\n\nconst commonQuestions = [\n  {\n    question: \"How do I reset my password?\",\n    answer: \"You can reset your password by clicking 'Forgot Password' on the login page. We'll send a reset link to your registered email address.\"\n  },\n  {\n    question: \"What are your transfer fees?\",\n    answer: \"Domestic transfers are free for amounts under $1,000. For amounts over $1,000, we charge a 0.1% fee. International transfers may have additional fees.\"\n  },\n  {\n    question: \"How long do transfers take?\",\n    answer: \"Domestic transfers typically complete within 1-2 business days. International transfers can take 3-5 business days depending on the destination country.\"\n  },\n  {\n    question: \"How do I freeze my card?\",\n    answer: \"You can instantly freeze your card through the Card Management section in your dashboard, or by contacting our support team immediately.\"\n  },\n  {\n    question: \"What documents do I need for verification?\",\n    answer: \"You'll need a government-issued ID (driver's license or passport) and proof of address (utility bill or bank statement from the last 3 months).\"\n  },\n  {\n    question: \"How do I close my account?\",\n    answer: \"To close your account, please contact our support team. We'll guide you through the process and ensure all your funds are properly transferred.\"\n  },\n];\n\nexport default function CustomerSupport() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isNewTicketDialogOpen, setIsNewTicketDialogOpen] = useState(false);\n  const [selectedTicket, setSelectedTicket] = useState<SupportTicket | null>(null);\n  const [chatMessage, setChatMessage] = useState('');\n  const [ticketForm, setTicketForm] = useState<TicketForm>({\n    subject: '',\n    description: '',\n    category: '',\n    priority: 'medium',\n  });\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const { data: tickets = [], isLoading: ticketsLoading } = useQuery<SupportTicket[]>({\n    queryKey: [\"/api/support/tickets\"],\n    retry: false,\n  });\n\n  const { data: chatMessages = [], isLoading: messagesLoading } = useQuery<ChatMessage[]>({\n    queryKey: [\"/api/support/tickets\", selectedTicket?.id, \"messages\"],\n    enabled: !!selectedTicket,\n    retry: false,\n  });\n\n  const createTicketMutation = useMutation({\n    mutationFn: async (data: TicketForm) => {\n      const response = await apiRequest(\"POST\", \"/api/support/tickets\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Support ticket created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/support/tickets\"] });\n      setIsNewTicketDialogOpen(false);\n      setTicketForm({\n        subject: '',\n        description: '',\n        category: '',\n        priority: 'medium',\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => window.location.href = \"/api/login\", 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create support ticket\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ ticketId, message }: { ticketId: string; message: string }) => {\n      const response = await apiRequest(\"POST\", `/api/support/tickets/${ticketId}/messages`, { message });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/support/tickets\", selectedTicket?.id, \"messages\"] });\n      setChatMessage('');\n      scrollToBottom();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateTicket = () => {\n    if (!ticketForm.subject || !ticketForm.description || !ticketForm.category) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createTicketMutation.mutate(ticketForm);\n  };\n\n  const handleSendMessage = () => {\n    if (!chatMessage.trim() || !selectedTicket) return;\n    sendMessageMutation.mutate({ ticketId: selectedTicket.id, message: chatMessage.trim() });\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [chatMessages]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'open':\n        return 'bg-blue-100 text-blue-800';\n      case 'in_progress':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'resolved':\n        return 'bg-green-100 text-green-800';\n      case 'closed':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return 'bg-red-100 text-red-800';\n      case 'high':\n        return 'bg-orange-100 text-orange-800';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'low':\n        return 'bg-green-100 text-green-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const cat = ticketCategories.find(c => c.value === category);\n    return cat ? cat.icon : 'fas fa-question-circle';\n  };\n\n  const getCategoryLabel = (category: string) => {\n    const cat = ticketCategories.find(c => c.value === category);\n    return cat ? cat.label : category;\n  };\n\n  if (ticketsLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-finora-primary\"></div>\n      </div>\n    );\n  }\n\n  const openTickets = tickets.filter(t => t.status === 'open' || t.status === 'in_progress');\n  const resolvedTickets = tickets.filter(t => t.status === 'resolved' || t.status === 'closed');\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Customer Support</h2>\n          <p className=\"text-gray-600\">Get help with your account and banking needs</p>\n        </div>\n        <Dialog open={isNewTicketDialogOpen} onOpenChange={setIsNewTicketDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-finora-primary hover:bg-finora-primary/90\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              New Support Request\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-lg max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create Support Request</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"category\">Category</Label>\n                <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                  {ticketCategories.map((category) => (\n                    <Button\n                      key={category.value}\n                      variant={ticketForm.category === category.value ? \"default\" : \"outline\"}\n                      className={`h-auto p-3 flex flex-col items-center gap-2 ${\n                        ticketForm.category === category.value \n                          ? \"bg-finora-primary text-white\" \n                          : \"hover:bg-finora-primary/10\"\n                      }`}\n                      onClick={() => setTicketForm(prev => ({ ...prev, category: category.value }))}\n                    >\n                      <i className={`${category.icon} text-lg`}></i>\n                      <span className=\"text-xs text-center\">{category.label}</span>\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"priority\">Priority</Label>\n                <Select value={ticketForm.priority} onValueChange={(value: any) => \n                  setTicketForm(prev => ({ ...prev, priority: value }))\n                }>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low - General question</SelectItem>\n                    <SelectItem value=\"medium\">Medium - Account issue</SelectItem>\n                    <SelectItem value=\"high\">High - Urgent assistance needed</SelectItem>\n                    <SelectItem value=\"urgent\">Urgent - Security or fraud concern</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"subject\">Subject</Label>\n                <Input\n                  id=\"subject\"\n                  value={ticketForm.subject}\n                  onChange={(e) => setTicketForm(prev => ({ ...prev, subject: e.target.value }))}\n                  placeholder=\"Brief description of your issue\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={ticketForm.description}\n                  onChange={(e) => setTicketForm(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"Please provide details about your issue or question. The more information you provide, the better we can assist you.\"\n                  rows={5}\n                />\n              </div>\n\n              <Alert>\n                <i className=\"fas fa-clock text-blue-600\"></i>\n                <AlertDescription>\n                  Our support team typically responds within 2-4 hours during business hours (9 AM - 6 PM EST).\n                </AlertDescription>\n              </Alert>\n\n              <Button \n                onClick={handleCreateTicket} \n                className=\"w-full bg-finora-primary hover:bg-finora-primary/90\"\n                disabled={createTicketMutation.isPending}\n              >\n                {createTicketMutation.isPending ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                ) : (\n                  <i className=\"fas fa-paper-plane mr-2\"></i>\n                )}\n                Submit Request\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Tabs defaultValue=\"tickets\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"tickets\">My Tickets ({tickets.length})</TabsTrigger>\n          <TabsTrigger value=\"faq\">FAQ</TabsTrigger>\n          <TabsTrigger value=\"contact\">Contact Info</TabsTrigger>\n          <TabsTrigger value=\"chat\">Live Chat</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"tickets\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Tickets List */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Support Tickets</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {tickets.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-headset text-gray-400 text-4xl mb-4\"></i>\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Support Requests</h3>\n                    <p className=\"text-gray-600 mb-4\">You haven't submitted any support requests yet.</p>\n                    <Button onClick={() => setIsNewTicketDialogOpen(true)} className=\"bg-finora-primary hover:bg-finora-primary/90\">\n                      Create First Request\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {openTickets.length > 0 && (\n                      <div>\n                        <h4 className=\"font-medium text-sm text-gray-900 mb-2\">Open Tickets</h4>\n                        <div className=\"space-y-2\">\n                          {openTickets.map((ticket) => (\n                            <div \n                              key={ticket.id} \n                              className={`border rounded-lg p-3 cursor-pointer hover:bg-gray-50 ${\n                                selectedTicket?.id === ticket.id ? 'border-finora-primary bg-finora-primary/5' : ''\n                              }`}\n                              onClick={() => setSelectedTicket(ticket)}\n                            >\n                              <div className=\"flex justify-between items-start mb-2\">\n                                <div className=\"flex items-center gap-2\">\n                                  <i className={`${getCategoryIcon(ticket.category)} text-finora-primary`}></i>\n                                  <span className=\"font-medium text-sm\">{ticket.subject}</span>\n                                </div>\n                                <div className=\"flex gap-1\">\n                                  <Badge className={getStatusColor(ticket.status)}>\n                                    {ticket.status.replace('_', ' ')}\n                                  </Badge>\n                                  <Badge className={getPriorityColor(ticket.priority)}>\n                                    {ticket.priority}\n                                  </Badge>\n                                </div>\n                              </div>\n                              <p className=\"text-xs text-gray-600 mb-1\">\n                                {getCategoryLabel(ticket.category)}\n                              </p>\n                              <p className=\"text-xs text-gray-500\">\n                                Created: {new Date(ticket.createdAt!).toLocaleDateString()}\n                              </p>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {resolvedTickets.length > 0 && (\n                      <div>\n                        <h4 className=\"font-medium text-sm text-gray-900 mb-2\">Resolved Tickets</h4>\n                        <div className=\"space-y-2\">\n                          {resolvedTickets.slice(0, 5).map((ticket) => (\n                            <div \n                              key={ticket.id} \n                              className={`border rounded-lg p-3 cursor-pointer hover:bg-gray-50 opacity-75 ${\n                                selectedTicket?.id === ticket.id ? 'border-finora-primary bg-finora-primary/5' : ''\n                              }`}\n                              onClick={() => setSelectedTicket(ticket)}\n                            >\n                              <div className=\"flex justify-between items-start mb-2\">\n                                <div className=\"flex items-center gap-2\">\n                                  <i className={`${getCategoryIcon(ticket.category)} text-green-600`}></i>\n                                  <span className=\"font-medium text-sm\">{ticket.subject}</span>\n                                </div>\n                                <Badge className={getStatusColor(ticket.status)}>\n                                  {ticket.status}\n                                </Badge>\n                              </div>\n                              <p className=\"text-xs text-gray-600 mb-1\">\n                                {getCategoryLabel(ticket.category)}\n                              </p>\n                              <p className=\"text-xs text-gray-500\">\n                                Resolved: {ticket.updatedAt ? new Date(ticket.updatedAt!).toLocaleDateString() : 'N/A'}\n                              </p>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Ticket Details & Chat */}\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  {selectedTicket ? 'Ticket Details' : 'Select a Ticket'}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {selectedTicket ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"border-b pb-4\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <h3 className=\"font-medium\">{selectedTicket.subject}</h3>\n                        <div className=\"flex gap-1\">\n                          <Badge className={getStatusColor(selectedTicket.status)}>\n                            {selectedTicket.status.replace('_', ' ')}\n                          </Badge>\n                          <Badge className={getPriorityColor(selectedTicket.priority)}>\n                            {selectedTicket.priority}\n                          </Badge>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-2\">{selectedTicket.description}</p>\n                      <p className=\"text-xs text-gray-500\">\n                        Category: {getCategoryLabel(selectedTicket.category)} | \n                        Created: {new Date(selectedTicket.createdAt!).toLocaleDateString()}\n                      </p>\n                    </div>\n\n                    {/* Chat Messages */}\n                    <div className=\"space-y-4\">\n                      <h4 className=\"font-medium text-sm\">Messages</h4>\n                      <ScrollArea className=\"h-64 border rounded p-3\">\n                        <div className=\"space-y-3\">\n                          {chatMessages.map((message) => (\n                            <div \n                              key={message.id}\n                              className={`flex ${message.isFromAdmin ? 'justify-start' : 'justify-end'}`}\n                            >\n                              <div className={`max-w-[80%] p-3 rounded-lg ${\n                                message.isFromAdmin \n                                  ? 'bg-gray-100 text-gray-900' \n                                  : 'bg-finora-primary text-white'\n                              }`}>\n                                <p className=\"text-sm\">{message.message}</p>\n                                <p className={`text-xs mt-1 ${\n                                  message.isFromAdmin ? 'text-gray-500' : 'text-red-100'\n                                }`}>\n                                  {message.isFromAdmin ? 'Support Agent' : 'You'} • \n                                  {new Date(message.createdAt!).toLocaleString()}\n                                </p>\n                              </div>\n                            </div>\n                          ))}\n                          <div ref={messagesEndRef} />\n                        </div>\n                      </ScrollArea>\n\n                      {selectedTicket.status !== 'closed' && selectedTicket.status !== 'resolved' && (\n                        <div className=\"flex gap-2\">\n                          <Input\n                            value={chatMessage}\n                            onChange={(e) => setChatMessage(e.target.value)}\n                            placeholder=\"Type your message...\"\n                            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                          />\n                          <Button \n                            onClick={handleSendMessage}\n                            disabled={!chatMessage.trim() || sendMessageMutation.isPending}\n                            className=\"bg-finora-primary hover:bg-finora-primary/90\"\n                          >\n                            <i className=\"fas fa-paper-plane\"></i>\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <i className=\"fas fa-comments text-gray-400 text-4xl mb-4\"></i>\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Select a Ticket</h3>\n                    <p className=\"text-gray-600\">Choose a ticket from the list to view details and chat with our support team.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"faq\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Frequently Asked Questions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {commonQuestions.map((faq, index) => (\n                  <div key={index} className=\"border-b pb-4 last:border-b-0\">\n                    <h3 className=\"font-medium text-gray-900 mb-2\">{faq.question}</h3>\n                    <p className=\"text-gray-600 text-sm\">{faq.answer}</p>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"contact\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Contact Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 bg-blue-100 rounded-full\">\n                    <i className=\"fas fa-phone text-blue-600\"></i>\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">Phone Support</p>\n                    <p className=\"text-sm text-gray-600\">1-800-SANTANDER (1-800-726-8263)</p>\n                    <p className=\"text-xs text-gray-500\">Available 24/7</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 bg-green-100 rounded-full\">\n                    <i className=\"fas fa-envelope text-green-600\"></i>\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">Email Support</p>\n                    <p className=\"text-sm text-gray-600\">support@finora.com</p>\n                    <p className=\"text-xs text-gray-500\">Response within 24 hours</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 bg-purple-100 rounded-full\">\n                    <i className=\"fas fa-comments text-purple-600\"></i>\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">Live Chat</p>\n                    <p className=\"text-sm text-gray-600\">Available through your dashboard</p>\n                    <p className=\"text-xs text-gray-500\">Mon-Fri 9 AM - 6 PM EST</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 bg-orange-100 rounded-full\">\n                    <i className=\"fas fa-map-marker-alt text-orange-600\"></i>\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">Branch Locations</p>\n                    <p className=\"text-sm text-gray-600\">Find a branch near you</p>\n                    <Button variant=\"link\" className=\"p-0 h-auto text-finora-primary\">\n                      Branch Locator\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Emergency Contact</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Alert className=\"border-red-200 bg-red-50\">\n                  <i className=\"fas fa-exclamation-triangle text-red-600\"></i>\n                  <AlertDescription>\n                    <strong>Lost or Stolen Cards</strong><br />\n                    Call immediately: 1-800-SANTANDER<br />\n                    Available 24/7 for card blocking and replacement\n                  </AlertDescription>\n                </Alert>\n\n                <Alert className=\"border-yellow-200 bg-yellow-50\">\n                  <i className=\"fas fa-shield-alt text-yellow-600\"></i>\n                  <AlertDescription>\n                    <strong>Fraud or Suspicious Activity</strong><br />\n                    Report immediately through secure message or call our fraud hotline: 1-800-FRAUD-1<br />\n                    We monitor accounts 24/7 for your protection\n                  </AlertDescription>\n                </Alert>\n\n                <div className=\"pt-4\">\n                  <h4 className=\"font-medium mb-2\">Business Hours</h4>\n                  <div className=\"text-sm text-gray-600 space-y-1\">\n                    <p>Monday - Friday: 9:00 AM - 6:00 PM EST</p>\n                    <p>Saturday: 9:00 AM - 2:00 PM EST</p>\n                    <p>Sunday: Closed</p>\n                    <p className=\"text-xs text-gray-500 mt-2\">Phone support available 24/7</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"chat\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Live Chat Support</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-12\">\n                <i className=\"fas fa-comments text-gray-400 text-6xl mb-4\"></i>\n                <h3 className=\"text-xl font-medium text-gray-900 mb-2\">Live Chat Coming Soon</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  Our live chat feature is currently in development. For immediate assistance, please create a support ticket or call us directly.\n                </p>\n                <div className=\"flex gap-4 justify-center\">\n                  <Button onClick={() => setIsNewTicketDialogOpen(true)} className=\"bg-finora-primary hover:bg-finora-primary/90\">\n                    <i className=\"fas fa-ticket-alt mr-2\"></i>\n                    Create Ticket\n                  </Button>\n                  <Button variant=\"outline\" className=\"border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white\">\n                    <i className=\"fas fa-phone mr-2\"></i>\n                    Call Support\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":28966},"client/src/components/customer/investment-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Account, Investment, SavingsGoal } from \"@shared/schema\";\n\ninterface InvestmentForm {\n  accountId: string;\n  type: 'stocks' | 'mutual_funds' | 'savings_plan' | 'forex';\n  instrumentName: string;\n  amount: string;\n}\n\ninterface SavingsGoalForm {\n  accountId: string;\n  name: string;\n  targetAmount: string;\n  targetDate: string;\n  autoDeposit: boolean;\n  depositAmount: string;\n  depositFrequency: 'weekly' | 'monthly';\n}\n\nconst investmentTypes = [\n  { value: 'stocks', label: 'Individual Stocks', icon: 'fas fa-chart-line', color: 'bg-blue-100 text-blue-800' },\n  { value: 'mutual_funds', label: 'Mutual Funds', icon: 'fas fa-chart-pie', color: 'bg-green-100 text-green-800' },\n  { value: 'savings_plan', label: 'Savings Plan', icon: 'fas fa-piggy-bank', color: 'bg-purple-100 text-purple-800' },\n  { value: 'forex', label: 'Forex Trading', icon: 'fas fa-exchange-alt', color: 'bg-orange-100 text-orange-800' },\n];\n\nconst mockStocks = [\n  { symbol: 'AAPL', name: 'Apple Inc.', price: 175.43, change: '+1.2%' },\n  { symbol: 'GOOGL', name: 'Alphabet Inc.', price: 2734.56, change: '+0.8%' },\n  { symbol: 'MSFT', name: 'Microsoft Corp.', price: 334.89, change: '+2.1%' },\n  { symbol: 'AMZN', name: 'Amazon.com Inc.', price: 3342.88, change: '-0.5%' },\n  { symbol: 'TSLA', name: 'Tesla Inc.', price: 792.12, change: '+3.4%' },\n];\n\nconst mockMutualFunds = [\n  { name: 'Vanguard S&P 500 ETF', symbol: 'VOO', price: 412.78, change: '+1.1%' },\n  { name: 'Growth Fund of America', symbol: 'AGTHX', price: 58.34, change: '+0.9%' },\n  { name: 'Fidelity Contrafund', symbol: 'FCNTX', price: 18.45, change: '+1.5%' },\n];\n\nexport default function InvestmentDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isInvestDialogOpen, setIsInvestDialogOpen] = useState(false);\n  const [isSavingsGoalDialogOpen, setIsSavingsGoalDialogOpen] = useState(false);\n  const [investmentForm, setInvestmentForm] = useState<InvestmentForm>({\n    accountId: '',\n    type: 'stocks',\n    instrumentName: '',\n    amount: '',\n  });\n  const [savingsGoalForm, setSavingsGoalForm] = useState<SavingsGoalForm>({\n    accountId: '',\n    name: '',\n    targetAmount: '',\n    targetDate: '',\n    autoDeposit: false,\n    depositAmount: '',\n    depositFrequency: 'monthly',\n  });\n\n  const { data: accounts = [], isLoading: accountsLoading } = useQuery<Account[]>({\n    queryKey: [\"/api/accounts\"],\n    retry: false,\n  });\n\n  const { data: investments = [], isLoading: investmentsLoading } = useQuery<Investment[]>({\n    queryKey: [\"/api/investments\"],\n    retry: false,\n  });\n\n  const { data: savingsGoals = [], isLoading: savingsGoalsLoading } = useQuery<SavingsGoal[]>({\n    queryKey: [\"/api/savings-goals\"],\n    retry: false,\n  });\n\n  const { data: forexData, isLoading: forexLoading } = useQuery({\n    queryKey: [\"/api/forex-rates\"],\n    refetchInterval: 30000,\n    retry: false,\n  });\n\n  const createInvestmentMutation = useMutation({\n    mutationFn: async (data: InvestmentForm) => {\n      const response = await apiRequest(\"POST\", \"/api/investments\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Investment created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/investments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounts\"] });\n      setIsInvestDialogOpen(false);\n      setInvestmentForm({\n        accountId: '',\n        type: 'stocks',\n        instrumentName: '',\n        amount: '',\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => window.location.href = \"/api/login\", 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create investment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createSavingsGoalMutation = useMutation({\n    mutationFn: async (data: SavingsGoalForm) => {\n      const response = await apiRequest(\"POST\", \"/api/savings-goals\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Savings goal created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/savings-goals\"] });\n      setIsSavingsGoalDialogOpen(false);\n      setSavingsGoalForm({\n        accountId: '',\n        name: '',\n        targetAmount: '',\n        targetDate: '',\n        autoDeposit: false,\n        depositAmount: '',\n        depositFrequency: 'monthly',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create savings goal\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateInvestment = () => {\n    if (!investmentForm.accountId || !investmentForm.instrumentName || !investmentForm.amount) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createInvestmentMutation.mutate(investmentForm);\n  };\n\n  const handleCreateSavingsGoal = () => {\n    if (!savingsGoalForm.accountId || !savingsGoalForm.name || !savingsGoalForm.targetAmount) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createSavingsGoalMutation.mutate(savingsGoalForm);\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(typeof amount === 'string' ? parseFloat(amount) : amount);\n  };\n\n  const calculateProgress = (current: string, target: string) => {\n    const currentAmount = parseFloat(current);\n    const targetAmount = parseFloat(target);\n    return Math.min((currentAmount / targetAmount) * 100, 100);\n  };\n\n  const getInvestmentTypeInfo = (type: string) => {\n    return investmentTypes.find(t => t.value === type) || investmentTypes[0];\n  };\n\n  if (accountsLoading || investmentsLoading || savingsGoalsLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-finora-primary\"></div>\n      </div>\n    );\n  }\n\n  const totalPortfolioValue = investments.reduce((sum, inv) => sum + parseFloat(inv.totalValue), 0);\n  const totalProfitLoss = investments.reduce((sum, inv) => sum + parseFloat(inv.profitLoss), 0);\n  const totalSavingsGoals = savingsGoals.reduce((sum, goal) => sum + parseFloat(goal.currentAmount), 0);\n  const totalSavingsTarget = savingsGoals.reduce((sum, goal) => sum + parseFloat(goal.targetAmount), 0);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Investment Dashboard</h2>\n          <p className=\"text-gray-600\">Manage your investments, savings goals, and forex trading</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={isSavingsGoalDialogOpen} onOpenChange={setIsSavingsGoalDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" className=\"border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white\">\n                <i className=\"fas fa-target mr-2\"></i>\n                New Goal\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-lg\">\n              <DialogHeader>\n                <DialogTitle>Create Savings Goal</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"goalAccount\">Account</Label>\n                  <Select value={savingsGoalForm.accountId} onValueChange={(value) => \n                    setSavingsGoalForm(prev => ({ ...prev, accountId: value }))\n                  }>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select account\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {accounts.map((account) => (\n                        <SelectItem key={account.id} value={account.id}>\n                          {account.accountType} - ****{account.accountNumber.slice(-4)}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"goalName\">Goal Name</Label>\n                  <Input\n                    id=\"goalName\"\n                    value={savingsGoalForm.name}\n                    onChange={(e) => setSavingsGoalForm(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"e.g., Emergency Fund, Vacation, Down Payment\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"targetAmount\">Target Amount ($)</Label>\n                  <Input\n                    id=\"targetAmount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={savingsGoalForm.targetAmount}\n                    onChange={(e) => setSavingsGoalForm(prev => ({ ...prev, targetAmount: e.target.value }))}\n                    placeholder=\"10000.00\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"targetDate\">Target Date (Optional)</Label>\n                  <Input\n                    id=\"targetDate\"\n                    type=\"date\"\n                    value={savingsGoalForm.targetDate}\n                    onChange={(e) => setSavingsGoalForm(prev => ({ ...prev, targetDate: e.target.value }))}\n                  />\n                </div>\n\n                <Button \n                  onClick={handleCreateSavingsGoal} \n                  className=\"w-full bg-finora-primary hover:bg-finora-primary/90\"\n                  disabled={createSavingsGoalMutation.isPending}\n                >\n                  {createSavingsGoalMutation.isPending ? (\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  ) : (\n                    <i className=\"fas fa-target mr-2\"></i>\n                  )}\n                  Create Goal\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n\n          <Dialog open={isInvestDialogOpen} onOpenChange={setIsInvestDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-finora-primary hover:bg-finora-primary/90\">\n                <i className=\"fas fa-plus mr-2\"></i>\n                New Investment\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-lg\">\n              <DialogHeader>\n                <DialogTitle>Create Investment</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"investAccount\">Account</Label>\n                  <Select value={investmentForm.accountId} onValueChange={(value) => \n                    setInvestmentForm(prev => ({ ...prev, accountId: value }))\n                  }>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select account\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {accounts.map((account) => (\n                        <SelectItem key={account.id} value={account.id}>\n                          {account.accountType} - ****{account.accountNumber.slice(-4)} - {formatCurrency(account.balance)}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"investmentType\">Investment Type</Label>\n                  <Select value={investmentForm.type} onValueChange={(value: any) => \n                    setInvestmentForm(prev => ({ ...prev, type: value }))\n                  }>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {investmentTypes.map((type) => (\n                        <SelectItem key={type.value} value={type.value}>\n                          <div className=\"flex items-center gap-2\">\n                            <i className={type.icon}></i>\n                            {type.label}\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"instrumentName\">\n                    {investmentForm.type === 'stocks' ? 'Stock Symbol' :\n                     investmentForm.type === 'mutual_funds' ? 'Fund Name' :\n                     investmentForm.type === 'forex' ? 'Currency Pair' : 'Investment Name'}\n                  </Label>\n                  <Input\n                    id=\"instrumentName\"\n                    value={investmentForm.instrumentName}\n                    onChange={(e) => setInvestmentForm(prev => ({ ...prev, instrumentName: e.target.value }))}\n                    placeholder={\n                      investmentForm.type === 'stocks' ? 'e.g., AAPL, GOOGL' :\n                      investmentForm.type === 'mutual_funds' ? 'e.g., Vanguard S&P 500' :\n                      investmentForm.type === 'forex' ? 'e.g., EUR/USD' : 'Investment name'\n                    }\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"investAmount\">Investment Amount ($)</Label>\n                  <Input\n                    id=\"investAmount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={investmentForm.amount}\n                    onChange={(e) => setInvestmentForm(prev => ({ ...prev, amount: e.target.value }))}\n                    placeholder=\"1000.00\"\n                  />\n                </div>\n\n                <Button \n                  onClick={handleCreateInvestment} \n                  className=\"w-full bg-finora-primary hover:bg-finora-primary/90\"\n                  disabled={createInvestmentMutation.isPending}\n                >\n                  {createInvestmentMutation.isPending ? (\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  ) : (\n                    <i className=\"fas fa-chart-line mr-2\"></i>\n                  )}\n                  Create Investment\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Portfolio Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"flex items-center justify-center w-12 h-12 bg-blue-100 rounded-full mx-auto mb-2\">\n              <i className=\"fas fa-chart-pie text-blue-600\"></i>\n            </div>\n            <p className=\"text-2xl font-bold text-blue-600\">{formatCurrency(totalPortfolioValue)}</p>\n            <p className=\"text-sm text-gray-600\">Portfolio Value</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className={`flex items-center justify-center w-12 h-12 rounded-full mx-auto mb-2 ${\n              totalProfitLoss >= 0 ? 'bg-green-100' : 'bg-red-100'\n            }`}>\n              <i className={`fas ${totalProfitLoss >= 0 ? 'fa-arrow-up text-green-600' : 'fa-arrow-down text-red-600'}`}></i>\n            </div>\n            <p className={`text-2xl font-bold ${totalProfitLoss >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n              {totalProfitLoss >= 0 ? '+' : ''}{formatCurrency(totalProfitLoss)}\n            </p>\n            <p className=\"text-sm text-gray-600\">Total P&L</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"flex items-center justify-center w-12 h-12 bg-purple-100 rounded-full mx-auto mb-2\">\n              <i className=\"fas fa-piggy-bank text-purple-600\"></i>\n            </div>\n            <p className=\"text-2xl font-bold text-purple-600\">{formatCurrency(totalSavingsGoals)}</p>\n            <p className=\"text-sm text-gray-600\">Savings Goals</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"flex items-center justify-center w-12 h-12 bg-orange-100 rounded-full mx-auto mb-2\">\n              <i className=\"fas fa-bullseye text-orange-600\"></i>\n            </div>\n            <p className=\"text-2xl font-bold text-orange-600\">\n              {totalSavingsTarget > 0 ? `${((totalSavingsGoals / totalSavingsTarget) * 100).toFixed(1)}%` : '0%'}\n            </p>\n            <p className=\"text-sm text-gray-600\">Goals Progress</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"portfolio\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"portfolio\">Portfolio ({investments.length})</TabsTrigger>\n          <TabsTrigger value=\"goals\">Savings Goals ({savingsGoals.length})</TabsTrigger>\n          <TabsTrigger value=\"market\">Market</TabsTrigger>\n          <TabsTrigger value=\"forex\">Forex</TabsTrigger>\n          <TabsTrigger value=\"funds\">Funds</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"portfolio\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Investment Portfolio</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {investments.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <i className=\"fas fa-chart-line text-gray-400 text-6xl mb-4\"></i>\n                    <h3 className=\"text-xl font-medium text-gray-900 mb-2\">Start Your Investment Journey</h3>\n                    <p className=\"text-gray-600 mb-6\">Create your first investment to begin building wealth for your future.</p>\n                    <Button onClick={() => setIsInvestDialogOpen(true)} className=\"bg-finora-primary hover:bg-finora-primary/90\">\n                      Make First Investment\n                    </Button>\n                  </div>\n                ) : (\n                  investments.map((investment) => {\n                    const typeInfo = getInvestmentTypeInfo(investment.type);\n                    const profitLossPercent = ((parseFloat(investment.profitLoss) / (parseFloat(investment.totalValue) - parseFloat(investment.profitLoss))) * 100);\n                    \n                    return (\n                      <div key={investment.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex justify-between items-start\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className={`p-2 rounded-full ${typeInfo.color.replace('text-', 'text-').replace('bg-', 'bg-')}`}>\n                              <i className={`${typeInfo.icon}`}></i>\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">{investment.instrumentName}</p>\n                              <p className=\"text-sm text-gray-600\">{typeInfo.label}</p>\n                              <p className=\"text-xs text-gray-500\">\n                                Quantity: {parseFloat(investment.quantity).toLocaleString()}\n                              </p>\n                              <p className=\"text-xs text-gray-500\">\n                                Avg. Price: {formatCurrency(investment.purchasePrice)}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-xl font-bold text-gray-900 mb-1\">\n                              {formatCurrency(investment.totalValue)}\n                            </p>\n                            <p className={`text-sm font-medium ${\n                              parseFloat(investment.profitLoss) >= 0 ? 'text-green-600' : 'text-red-600'\n                            }`}>\n                              {parseFloat(investment.profitLoss) >= 0 ? '+' : ''}\n                              {formatCurrency(investment.profitLoss)} ({profitLossPercent.toFixed(2)}%)\n                            </p>\n                            <p className=\"text-xs text-gray-500\">\n                              Current: {formatCurrency(investment.currentPrice)}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"goals\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Savings Goals</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {savingsGoals.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <i className=\"fas fa-target text-gray-400 text-6xl mb-4\"></i>\n                    <h3 className=\"text-xl font-medium text-gray-900 mb-2\">Set Your Financial Goals</h3>\n                    <p className=\"text-gray-600 mb-6\">Create savings goals to track your progress towards important milestones.</p>\n                    <Button onClick={() => setIsSavingsGoalDialogOpen(true)} className=\"bg-finora-primary hover:bg-finora-primary/90\">\n                      Create First Goal\n                    </Button>\n                  </div>\n                ) : (\n                  savingsGoals.map((goal) => {\n                    const progress = calculateProgress(goal.currentAmount, goal.targetAmount);\n                    const remaining = parseFloat(goal.targetAmount) - parseFloat(goal.currentAmount);\n                    \n                    return (\n                      <div key={goal.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div>\n                            <h3 className=\"font-medium text-lg\">{goal.name}</h3>\n                            <p className=\"text-sm text-gray-600\">\n                              {formatCurrency(goal.currentAmount)} of {formatCurrency(goal.targetAmount)}\n                            </p>\n                            {goal.targetDate && (\n                              <p className=\"text-xs text-gray-500\">\n                                Target: {new Date(goal.targetDate!).toLocaleDateString()}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-lg font-bold text-green-600\">\n                              {progress.toFixed(1)}%\n                            </p>\n                            <p className=\"text-sm text-gray-600\">\n                              {formatCurrency(remaining)} to go\n                            </p>\n                          </div>\n                        </div>\n                        <Progress value={progress} className=\"mb-2\" />\n                        {goal.autoDeposit && (\n                          <div className=\"flex items-center gap-1 text-xs text-blue-600\">\n                            <i className=\"fas fa-sync\"></i>\n                            <span>Auto-deposit: {formatCurrency(goal.depositAmount || '0')} {goal.depositFrequency}</span>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"market\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Popular Stocks</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {mockStocks.map((stock) => (\n                    <div key={stock.symbol} className=\"flex justify-between items-center p-3 border rounded hover:bg-gray-50\">\n                      <div>\n                        <p className=\"font-medium\">{stock.symbol}</p>\n                        <p className=\"text-sm text-gray-600\">{stock.name}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-bold\">{formatCurrency(stock.price)}</p>\n                        <p className={`text-sm ${stock.change.includes('+') ? 'text-green-600' : 'text-red-600'}`}>\n                          {stock.change}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Market News</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"border-b pb-3\">\n                    <h4 className=\"font-medium text-sm\">Market rallies on positive economic data</h4>\n                    <p className=\"text-xs text-gray-600 mt-1\">Major indices close higher as inflation shows signs of cooling...</p>\n                    <p className=\"text-xs text-gray-500 mt-1\">2 hours ago</p>\n                  </div>\n                  <div className=\"border-b pb-3\">\n                    <h4 className=\"font-medium text-sm\">Tech stocks lead gains in morning trading</h4>\n                    <p className=\"text-xs text-gray-600 mt-1\">Technology sector outperforms as earnings season approaches...</p>\n                    <p className=\"text-xs text-gray-500 mt-1\">4 hours ago</p>\n                  </div>\n                  <div className=\"pb-3\">\n                    <h4 className=\"font-medium text-sm\">Federal Reserve hints at policy changes</h4>\n                    <p className=\"text-xs text-gray-600 mt-1\">Central bank signals potential adjustments to monetary policy...</p>\n                    <p className=\"text-xs text-gray-500 mt-1\">6 hours ago</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"forex\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <i className=\"fas fa-exchange-alt text-finora-primary\"></i>\n                Live Forex Rates\n                <Badge variant=\"outline\" className=\"ml-auto\">USD Base</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {forexLoading ? (\n                <div className=\"flex justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-finora-primary\"></div>\n                </div>\n              ) : forexData?.rates ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {forexData.rates.map((rate: any) => (\n                    <div key={rate.currency} className=\"border rounded-lg p-4 hover:bg-gray-50\">\n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <p className=\"font-bold text-lg\">USD/{rate.currency}</p>\n                          <p className=\"text-2xl font-mono\">{rate.rate.toFixed(4)}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge\n                            variant={parseFloat(rate.change) >= 0 ? \"default\" : \"destructive\"}\n                            className=\"mb-1\"\n                          >\n                            {parseFloat(rate.change) >= 0 ? \"+\" : \"\"}{rate.changePercent}%\n                          </Badge>\n                          <p className=\"text-xs text-gray-500\">24h change</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-center py-8 text-gray-500\">Unable to load forex rates</p>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"funds\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Popular Mutual Funds</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockMutualFunds.map((fund) => (\n                  <div key={fund.symbol} className=\"border rounded-lg p-4 hover:bg-gray-50\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-medium\">{fund.name}</h3>\n                        <p className=\"text-sm text-gray-600\">Symbol: {fund.symbol}</p>\n                        <div className=\"mt-2 flex gap-4 text-sm text-gray-600\">\n                          <span>Expense Ratio: 0.25%</span>\n                          <span>Min. Investment: $1,000</span>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-xl font-bold\">{formatCurrency(fund.price)}</p>\n                        <p className={`text-sm font-medium ${fund.change.includes('+') ? 'text-green-600' : 'text-red-600'}`}>\n                          {fund.change}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":31306},"client/src/components/customer/transfer-center.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport TransferForm from \"@/components/customer/transfer-form\";\nimport TransactionHistory from \"@/components/customer/transaction-history\";\nimport type { Account, Transfer, StandingOrder } from \"@shared/schema\";\n\nexport default function TransferCenter() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isStandingOrderDialogOpen, setIsStandingOrderDialogOpen] = useState(false);\n  const [standingOrderForm, setStandingOrderForm] = useState({\n    fromAccountId: '',\n    toAccountNumber: '',\n    toAccountHolderName: '',\n    amount: '',\n    frequency: 'monthly',\n    description: '',\n    nextPaymentDate: '',\n    endDate: '',\n  });\n\n  const { data: accounts = [], isLoading: accountsLoading } = useQuery<Account[]>({\n    queryKey: [\"/api/accounts\"],\n    retry: false,\n  });\n\n  const { data: transfers = [], isLoading: transfersLoading } = useQuery<Transfer[]>({\n    queryKey: [\"/api/transfers\"],\n    retry: false,\n  });\n\n  const { data: standingOrders = [], isLoading: standingOrdersLoading } = useQuery<StandingOrder[]>({\n    queryKey: [\"/api/standing-orders\"],\n    retry: false,\n  });\n\n  const createStandingOrderMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/standing-orders\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Standing order created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/standing-orders\"] });\n      setIsStandingOrderDialogOpen(false);\n      setStandingOrderForm({\n        fromAccountId: '',\n        toAccountNumber: '',\n        toAccountHolderName: '',\n        amount: '',\n        frequency: 'monthly',\n        description: '',\n        nextPaymentDate: '',\n        endDate: '',\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => window.location.href = \"/api/login\", 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create standing order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const cancelStandingOrderMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/standing-orders/${orderId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Standing order cancelled successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/standing-orders\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to cancel standing order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateStandingOrder = () => {\n    if (!standingOrderForm.fromAccountId || !standingOrderForm.toAccountNumber || !standingOrderForm.amount) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createStandingOrderMutation.mutate(standingOrderForm);\n  };\n\n  const handleCancelStandingOrder = (orderId: string) => {\n    if (confirm('Are you sure you want to cancel this standing order?')) {\n      cancelStandingOrderMutation.mutate(orderId);\n    }\n  };\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(parseFloat(amount));\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'failed':\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (accountsLoading || transfersLoading || standingOrdersLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-finora-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Transfer Center</h2>\n          <p className=\"text-gray-600\">Send money, manage transfers, and set up recurring payments</p>\n        </div>\n        <Dialog open={isStandingOrderDialogOpen} onOpenChange={setIsStandingOrderDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-finora-primary hover:bg-finora-primary/90\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              New Standing Order\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-lg\">\n            <DialogHeader>\n              <DialogTitle>Create Standing Order</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"fromAccount\">From Account</Label>\n                <Select value={standingOrderForm.fromAccountId} onValueChange={(value) => \n                  setStandingOrderForm(prev => ({ ...prev, fromAccountId: value }))\n                }>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select account\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {accounts.map((account) => (\n                      <SelectItem key={account.id} value={account.id}>\n                        {account.accountType} - ****{account.accountNumber.slice(-4)} - {formatCurrency(account.balance)}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"toAccountNumber\">Recipient Account Number</Label>\n                <Input\n                  id=\"toAccountNumber\"\n                  value={standingOrderForm.toAccountNumber}\n                  onChange={(e) => setStandingOrderForm(prev => ({ ...prev, toAccountNumber: e.target.value }))}\n                  placeholder=\"Enter account number\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"toAccountHolderName\">Recipient Name</Label>\n                <Input\n                  id=\"toAccountHolderName\"\n                  value={standingOrderForm.toAccountHolderName}\n                  onChange={(e) => setStandingOrderForm(prev => ({ ...prev, toAccountHolderName: e.target.value }))}\n                  placeholder=\"Enter recipient name\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"amount\">Amount ($)</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={standingOrderForm.amount}\n                  onChange={(e) => setStandingOrderForm(prev => ({ ...prev, amount: e.target.value }))}\n                  placeholder=\"0.00\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"frequency\">Frequency</Label>\n                <Select value={standingOrderForm.frequency} onValueChange={(value) => \n                  setStandingOrderForm(prev => ({ ...prev, frequency: value }))\n                }>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"weekly\">Weekly</SelectItem>\n                    <SelectItem value=\"monthly\">Monthly</SelectItem>\n                    <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"nextPaymentDate\">First Payment Date</Label>\n                <Input\n                  id=\"nextPaymentDate\"\n                  type=\"date\"\n                  value={standingOrderForm.nextPaymentDate}\n                  onChange={(e) => setStandingOrderForm(prev => ({ ...prev, nextPaymentDate: e.target.value }))}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"endDate\">End Date (Optional)</Label>\n                <Input\n                  id=\"endDate\"\n                  type=\"date\"\n                  value={standingOrderForm.endDate}\n                  onChange={(e) => setStandingOrderForm(prev => ({ ...prev, endDate: e.target.value }))}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Description (Optional)</Label>\n                <Textarea\n                  id=\"description\"\n                  value={standingOrderForm.description}\n                  onChange={(e) => setStandingOrderForm(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"Payment description\"\n                  rows={3}\n                />\n              </div>\n\n              <Button \n                onClick={handleCreateStandingOrder} \n                className=\"w-full bg-finora-primary hover:bg-finora-primary/90\"\n                disabled={createStandingOrderMutation.isPending}\n              >\n                {createStandingOrderMutation.isPending ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                ) : (\n                  <i className=\"fas fa-plus mr-2\"></i>\n                )}\n                Create Standing Order\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Tabs defaultValue=\"send\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"send\">Send Money</TabsTrigger>\n          <TabsTrigger value=\"history\">Transfer History</TabsTrigger>\n          <TabsTrigger value=\"standing\">Standing Orders ({standingOrders.length})</TabsTrigger>\n          <TabsTrigger value=\"transactions\">All Transactions</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"send\">\n          <TransferForm />\n        </TabsContent>\n\n        <TabsContent value=\"history\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Transfer History</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {transfers.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\">No transfers found</p>\n                ) : (\n                  transfers.map((transfer) => (\n                    <div key={transfer.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <div className=\"p-2 bg-blue-100 rounded-full\">\n                              <i className=\"fas fa-exchange-alt text-blue-600\"></i>\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">To: {transfer.toAccountHolderName}</p>\n                              <p className=\"text-sm text-gray-600\">\n                                Account: ****{transfer.toAccountNumber?.slice(-4)}\n                              </p>\n                            </div>\n                          </div>\n                          <p className=\"text-sm text-gray-600 mb-2\">{transfer.description}</p>\n                          <p className=\"text-xs text-gray-500\">\n                            {new Date(transfer.createdAt!).toLocaleString()}\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-xl font-bold text-red-600 mb-1\">\n                            -{formatCurrency(transfer.amount)}\n                          </p>\n                          <Badge className={getStatusColor(transfer.status)}>\n                            {transfer.status}\n                          </Badge>\n                          {parseFloat(transfer.fee) > 0 && (\n                            <p className=\"text-xs text-gray-500 mt-1\">\n                              Fee: {formatCurrency(transfer.fee)}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"standing\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Standing Orders</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {standingOrders.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-calendar-check text-gray-400 text-4xl mb-4\"></i>\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Standing Orders</h3>\n                    <p className=\"text-gray-600 mb-4\">Set up recurring payments for bills and regular transfers</p>\n                    <Button onClick={() => setIsStandingOrderDialogOpen(true)} className=\"bg-finora-primary hover:bg-finora-primary/90\">\n                      Create First Standing Order\n                    </Button>\n                  </div>\n                ) : (\n                  standingOrders.map((order) => (\n                    <div key={order.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <div className=\"p-2 bg-green-100 rounded-full\">\n                              <i className=\"fas fa-calendar-check text-green-600\"></i>\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">To: {order.toAccountHolderName}</p>\n                              <p className=\"text-sm text-gray-600\">\n                                Account: ****{order.toAccountNumber.slice(-4)}\n                              </p>\n                            </div>\n                          </div>\n                          <p className=\"text-sm text-gray-600 mb-1\">{order.description || 'Regular payment'}</p>\n                          <p className=\"text-xs text-gray-500\">\n                            Next payment: {new Date(order.nextPaymentDate!).toLocaleDateString()} | {order.frequency}\n                          </p>\n                          {order.endDate && (\n                            <p className=\"text-xs text-gray-500\">\n                              Until: {new Date(order.endDate!).toLocaleDateString()}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-xl font-bold text-blue-600 mb-2\">\n                            {formatCurrency(order.amount)}\n                          </p>\n                          <Badge className={order.isActive ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"}>\n                            {order.isActive ? 'Active' : 'Inactive'}\n                          </Badge>\n                          {order.isActive && (\n                            <div className=\"mt-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleCancelStandingOrder(order.id)}\n                                className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                              >\n                                Cancel\n                              </Button>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"transactions\">\n          <TransactionHistory />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":17509},"client/src/components/admin/admin-support-tickets.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { SupportTicket, ChatMessage } from \"@shared/schema\";\n\nexport default function AdminSupportTickets() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedTicket, setSelectedTicket] = useState<SupportTicket | null>(null);\n  const [replyMessage, setReplyMessage] = useState(\"\");\n\n  const { data: allTickets = [], isLoading } = useQuery<SupportTicket[]>({\n    queryKey: [\"/api/admin/support/tickets\"],\n    refetchInterval: 5000, // Refresh every 5 seconds\n    retry: false,\n  });\n\n  const { data: messages = [] } = useQuery<ChatMessage[]>({\n    queryKey: [\"/api/admin/support/tickets\", selectedTicket?.id, \"messages\"],\n    enabled: !!selectedTicket,\n    refetchInterval: 2000, // Refresh every 2 seconds when ticket is open\n  });\n\n  const sendReplyMutation = useMutation({\n    mutationFn: async ({ ticketId, message }: { ticketId: string; message: string }) => {\n      await apiRequest(\"POST\", `/api/admin/support/tickets/${ticketId}/messages`, { message });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Reply sent successfully\",\n      });\n      setReplyMessage(\"\");\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/admin/support/tickets\", selectedTicket?.id, \"messages\"] \n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => window.location.href = \"/api/login\", 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send reply\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTicketStatusMutation = useMutation({\n    mutationFn: async ({ ticketId, status }: { ticketId: string; status: string }) => {\n      await apiRequest(\"PUT\", `/api/admin/support/tickets/${ticketId}`, { status });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Ticket status updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/support/tickets\"] });\n      setSelectedTicket(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update ticket status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const assignTicketMutation = useMutation({\n    mutationFn: async ({ ticketId, assignedTo }: { ticketId: string; assignedTo: string }) => {\n      await apiRequest(\"PUT\", `/api/admin/support/tickets/${ticketId}`, { assignedTo });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Ticket assigned successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/support/tickets\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to assign ticket\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'open':\n        return 'bg-green-100 text-green-800';\n      case 'in_progress':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'resolved':\n        return 'bg-blue-100 text-blue-800';\n      case 'closed':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'low':\n        return 'bg-green-100 text-green-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const openTickets = allTickets.filter(ticket => ticket.status === 'open');\n  const inProgressTickets = allTickets.filter(ticket => ticket.status === 'in_progress');\n  const resolvedTickets = allTickets.filter(ticket => ticket.status === 'resolved' || ticket.status === 'closed');\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-finora-primary mx-auto\"></div>\n        <p className=\"mt-2 text-gray-600\">Loading support tickets...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Support Ticket Management</h2>\n          <p className=\"text-gray-600\">Manage and respond to customer support requests</p>\n        </div>\n        <div className=\"flex gap-2 text-sm\">\n          <Badge variant=\"outline\" className=\"bg-green-50\">\n            Open: {openTickets.length}\n          </Badge>\n          <Badge variant=\"outline\" className=\"bg-yellow-50\">\n            In Progress: {inProgressTickets.length}\n          </Badge>\n          <Badge variant=\"outline\" className=\"bg-blue-50\">\n            Resolved: {resolvedTickets.length}\n          </Badge>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"open\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"open\">Open ({openTickets.length})</TabsTrigger>\n          <TabsTrigger value=\"in_progress\">In Progress ({inProgressTickets.length})</TabsTrigger>\n          <TabsTrigger value=\"resolved\">Resolved ({resolvedTickets.length})</TabsTrigger>\n          <TabsTrigger value=\"all\">All Tickets ({allTickets.length})</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"open\">\n          <TicketList \n            tickets={openTickets} \n            onTicketSelect={setSelectedTicket}\n            onStatusUpdate={updateTicketStatusMutation.mutate}\n            onAssign={assignTicketMutation.mutate}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"in_progress\">\n          <TicketList \n            tickets={inProgressTickets} \n            onTicketSelect={setSelectedTicket}\n            onStatusUpdate={updateTicketStatusMutation.mutate}\n            onAssign={assignTicketMutation.mutate}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"resolved\">\n          <TicketList \n            tickets={resolvedTickets} \n            onTicketSelect={setSelectedTicket}\n            onStatusUpdate={updateTicketStatusMutation.mutate}\n            onAssign={assignTicketMutation.mutate}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"all\">\n          <TicketList \n            tickets={allTickets} \n            onTicketSelect={setSelectedTicket}\n            onStatusUpdate={updateTicketStatusMutation.mutate}\n            onAssign={assignTicketMutation.mutate}\n          />\n        </TabsContent>\n      </Tabs>\n\n      {/* Ticket Detail Dialog */}\n      <Dialog open={!!selectedTicket} onOpenChange={() => setSelectedTicket(null)}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center justify-between\">\n              <span>Ticket #{selectedTicket?.id?.slice(-6)}: {selectedTicket?.subject}</span>\n              <div className=\"flex gap-2\">\n                <Badge className={getStatusColor(selectedTicket?.status || '')}>\n                  {selectedTicket?.status}\n                </Badge>\n                <Badge className={getPriorityColor(selectedTicket?.priority || '')}>\n                  {selectedTicket?.priority} priority\n                </Badge>\n              </div>\n            </DialogTitle>\n          </DialogHeader>\n\n          {selectedTicket && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700\">Customer</Label>\n                  <p className=\"text-sm\">User ID: {selectedTicket.userId}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700\">Category</Label>\n                  <p className=\"text-sm capitalize\">{selectedTicket.category}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700\">Created</Label>\n                  <p className=\"text-sm\">\n                    {selectedTicket.createdAt ? new Date(selectedTicket.createdAt).toLocaleString() : 'N/A'}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700\">Assigned To</Label>\n                  <p className=\"text-sm\">{selectedTicket.assignedTo || 'Unassigned'}</p>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700\">Description</Label>\n                <p className=\"mt-1 text-sm bg-white p-3 rounded border\">{selectedTicket.description}</p>\n              </div>\n\n              {/* Chat Messages */}\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700\">Conversation</Label>\n                <div className=\"mt-2 space-y-3 max-h-60 overflow-y-auto bg-white border rounded p-4\">\n                  {messages.map((message) => (\n                    <div\n                      key={message.id}\n                      className={`flex ${message.isFromAdmin ? 'justify-end' : 'justify-start'}`}\n                    >\n                      <div\n                        className={`max-w-xs px-3 py-2 rounded-lg ${\n                          message.isFromAdmin\n                            ? 'bg-finora-primary text-white'\n                            : 'bg-gray-100 text-gray-900'\n                        }`}\n                      >\n                        <p className=\"text-sm\">{message.message}</p>\n                        <p className={`text-xs mt-1 ${\n                          message.isFromAdmin ? 'text-red-100' : 'text-gray-500'\n                        }`}>\n                          {message.createdAt ? new Date(message.createdAt).toLocaleString() : ''}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Reply Section */}\n              <div className=\"space-y-3\">\n                <Label htmlFor=\"reply\">Send Reply</Label>\n                <Textarea\n                  id=\"reply\"\n                  value={replyMessage}\n                  onChange={(e) => setReplyMessage(e.target.value)}\n                  placeholder=\"Type your reply...\"\n                  rows={3}\n                />\n                <div className=\"flex gap-2\">\n                  <Button\n                    onClick={() => {\n                      if (replyMessage.trim() && selectedTicket) {\n                        sendReplyMutation.mutate({\n                          ticketId: selectedTicket.id,\n                          message: replyMessage,\n                        });\n                      }\n                    }}\n                    disabled={!replyMessage.trim() || sendReplyMutation.isPending}\n                    className=\"bg-finora-primary hover:bg-finora-primary/90\"\n                  >\n                    <i className=\"fas fa-reply mr-2\"></i>\n                    Send Reply\n                  </Button>\n                  \n                  <Select\n                    value={selectedTicket.status}\n                    onValueChange={(status) => {\n                      updateTicketStatusMutation.mutate({\n                        ticketId: selectedTicket.id,\n                        status,\n                      });\n                    }}\n                  >\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"open\">Open</SelectItem>\n                      <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                      <SelectItem value=\"resolved\">Resolved</SelectItem>\n                      <SelectItem value=\"closed\">Closed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\ninterface TicketListProps {\n  tickets: SupportTicket[];\n  onTicketSelect: (ticket: SupportTicket) => void;\n  onStatusUpdate: (params: { ticketId: string; status: string }) => void;\n  onAssign: (params: { ticketId: string; assignedTo: string }) => void;\n}\n\nfunction TicketList({ tickets, onTicketSelect, onStatusUpdate, onAssign }: TicketListProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'open':\n        return 'bg-green-100 text-green-800';\n      case 'in_progress':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'resolved':\n        return 'bg-blue-100 text-blue-800';\n      case 'closed':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'low':\n        return 'bg-green-100 text-green-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (tickets.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"text-center py-8\">\n          <i className=\"fas fa-ticket-alt text-4xl text-gray-300 mb-4\"></i>\n          <p className=\"text-gray-500\">No tickets found</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"grid gap-4\">\n      {tickets.map((ticket) => (\n        <Card key={ticket.id} className=\"hover:shadow-md transition-shadow cursor-pointer\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex justify-between items-start mb-3\">\n              <div className=\"flex-1\">\n                <h3 className=\"font-semibold text-lg text-gray-900 mb-1\">\n                  {ticket.subject}\n                </h3>\n                <p className=\"text-gray-600 text-sm line-clamp-2 mb-2\">\n                  {ticket.description}\n                </p>\n                <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                  <span>Customer: {ticket.userId}</span>\n                  <span>Category: {ticket.category}</span>\n                  <span>\n                    Created: {ticket.createdAt ? new Date(ticket.createdAt).toLocaleDateString() : 'N/A'}\n                  </span>\n                </div>\n              </div>\n              <div className=\"flex flex-col items-end gap-2\">\n                <div className=\"flex gap-2\">\n                  <Badge className={getStatusColor(ticket.status)}>\n                    {ticket.status}\n                  </Badge>\n                  <Badge className={getPriorityColor(ticket.priority)}>\n                    {ticket.priority}\n                  </Badge>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onTicketSelect(ticket)}\n                  data-testid={`button-view-ticket-${ticket.id}`}\n                >\n                  <i className=\"fas fa-eye mr-1\"></i>\n                  View & Reply\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}","size_bytes":16439},"DEVELOPER_DOCS.md":{"content":"# Finora Banking Application - Developer Documentation\n\n## 📚 Technical Documentation\n\nThis document provides detailed technical information for developers working on the Finora banking application.\n\n## 🏗️ Architecture Deep Dive\n\n### Application Architecture\n\n```mermaid\ngraph TB\n    A[Frontend - React/TypeScript] --> B[API Layer - Express.js]\n    B --> C[Authentication Layer]\n    B --> D[Database Layer - PostgreSQL]\n    B --> E[Business Logic Layer]\n    \n    C --> F[Session Management]\n    C --> G[Role-Based Access Control]\n    \n    E --> H[Transfer Processing]\n    E --> I[Account Management]\n    E --> J[Audit Logging]\n    \n    D --> K[Drizzle ORM]\n    K --> L[Database Schema]\n```\n\n### Request Flow\n\n1. **Client Request** → Vite Dev Server/Express Static\n2. **API Request** → Express.js Router\n3. **Authentication** → Session Validation\n4. **Authorization** → Role Permission Check\n5. **Business Logic** → Service Layer Processing\n6. **Data Access** → Drizzle ORM Operations\n7. **Database** → PostgreSQL Queries\n8. **Response** → JSON API Response\n9. **Client Update** → React State Update\n\n## 🔧 Technical Stack Details\n\n### Frontend Technologies\n\n| Technology | Version | Purpose |\n|------------|---------|---------|\n| React | 18.x | UI Component Library |\n| TypeScript | 5.x | Type Safety |\n| Vite | 5.x | Build Tool & Dev Server |\n| Tailwind CSS | 3.x | Styling Framework |\n| shadcn/ui | Latest | Component Library |\n| Radix UI | Latest | Headless UI Primitives |\n| TanStack Query | 5.x | Server State Management |\n| React Hook Form | 7.x | Form Management |\n| Wouter | 3.x | Client-Side Routing |\n| Zod | 3.x | Schema Validation |\n\n### Backend Technologies\n\n| Technology | Version | Purpose |\n|------------|---------|---------|\n| Node.js | 18+ | Runtime Environment |\n| Express.js | 4.x | Web Framework |\n| TypeScript | 5.x | Type Safety |\n| Drizzle ORM | Latest | Database ORM |\n| PostgreSQL | 14+ | Primary Database |\n| bcryptjs | 2.x | Password Hashing |\n| express-session | 1.x | Session Management |\n| connect-pg-simple | 9.x | PostgreSQL Session Store |\n\n## 🗄️ Database Architecture\n\n### Schema Design Principles\n\n1. **Normalized Structure**: Proper foreign key relationships\n2. **Type Safety**: Strong typing with Drizzle ORM\n3. **Audit Trail**: Comprehensive logging for compliance\n4. **Performance**: Indexed columns for fast queries\n5. **Scalability**: UUID primary keys for distributed systems\n\n### Table Relationships\n\n```sql\n-- Core Relationships\nusers (1) -----> (many) accounts\naccounts (1) ---> (many) transactions\ntransfers (1) --> (many) transactions\nusers (1) -----> (many) audit_logs\nusers (1) -----> (many) email_notifications\n\n-- Session Management\nsessions (isolated table for auth)\n```\n\n### Database Schema Details\n\n#### Users Table\n```typescript\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\"), // bcrypt hashed\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").default('customer').notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n```\n\n#### Accounts Table\n```typescript\nexport const accounts = pgTable(\"accounts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  accountNumber: varchar(\"account_number\").unique().notNull(),\n  routingNumber: varchar(\"routing_number\").notNull().default('011075150'),\n  accountType: varchar(\"account_type\").notNull().default('checking'),\n  balance: decimal(\"balance\", { precision: 15, scale: 2 }).notNull().default('0.00'),\n  status: accountStatusEnum(\"status\").default('active').notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n```\n\n#### Transfers Table\n```typescript\nexport const transfers = pgTable(\"transfers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fromAccountId: uuid(\"from_account_id\").references(() => accounts.id).notNull(),\n  toAccountId: uuid(\"to_account_id\").references(() => accounts.id),\n  toAccountNumber: varchar(\"to_account_number\"),\n  toRoutingNumber: varchar(\"to_routing_number\"),\n  toBankName: varchar(\"to_bank_name\"),\n  toAccountHolderName: varchar(\"to_account_holder_name\").notNull(),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  fee: decimal(\"fee\", { precision: 15, scale: 2 }).notNull().default('0.00'),\n  tax: decimal(\"tax\", { precision: 15, scale: 2 }).notNull().default('0.00'),\n  description: text(\"description\"),\n  status: transferStatusEnum(\"status\").default('pending').notNull(),\n  rejectionReason: text(\"rejection_reason\"),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n```\n\n## 🔐 Authentication & Authorization\n\n### Authentication Flow\n\n```typescript\n// 1. Password Verification\nconst isValidPassword = await verifyPassword(password, user.password);\n\n// 2. Session Creation\npassport.authenticate('local', (err, user, info) => {\n  if (user) {\n    req.logIn(user, (err) => {\n      // Session established\n    });\n  }\n});\n\n// 3. Session Storage (PostgreSQL)\nconst sessionStore = new pgStore({\n  conString: process.env.DATABASE_URL,\n  createTableIfMissing: false,\n  ttl: sessionTtl,\n  tableName: \"sessions\",\n});\n```\n\n### Role-Based Access Control\n\n```typescript\n// Middleware for protecting routes\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Unauthorized\" });\n};\n\n// Role-specific middleware\nexport const requireAdmin: RequestHandler = (req, res, next) => {\n  if (req.user?.role === 'admin') {\n    return next();\n  }\n  return res.status(403).json({ message: \"Admin access required\" });\n};\n```\n\n### Security Headers & Policies\n\n```typescript\n// Session Configuration\nsession({\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    httpOnly: true, // Prevent XSS\n    secure: process.env.NODE_ENV === 'production', // HTTPS only in production\n    maxAge: sessionTtl, // Session expiry\n    sameSite: 'strict', // CSRF protection\n  },\n});\n```\n\n## 🔄 API Design Patterns\n\n### RESTful Endpoint Structure\n\n```\nGET    /api/auth/user           # Get current user\nPOST   /api/login              # User login\nPOST   /api/logout             # User logout\n\nGET    /api/accounts           # List user accounts\nGET    /api/accounts/:id       # Get account details\nPOST   /api/accounts           # Create account\n\nGET    /api/transfers          # List transfers\nPOST   /api/transfers          # Create transfer\nPUT    /api/transfers/:id      # Update transfer status\n\nGET    /api/admin/users        # List all users (admin)\nPUT    /api/admin/users/:id    # Update user (admin)\nGET    /api/admin/stats        # System statistics (admin)\n```\n\n### Request/Response Patterns\n\n#### Standard Success Response\n```typescript\n{\n  \"success\": true,\n  \"data\": { /* response data */ },\n  \"message\": \"Operation completed successfully\"\n}\n```\n\n#### Standard Error Response\n```typescript\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid input data\",\n    \"details\": [\n      {\n        \"field\": \"email\",\n        \"message\": \"Invalid email format\"\n      }\n    ]\n  }\n}\n```\n\n### Input Validation\n\n```typescript\n// Zod Schema Example\nconst transferSchema = z.object({\n  fromAccountId: z.string().uuid(),\n  toAccountNumber: z.string().min(10).max(12),\n  amount: z.string().regex(/^\\d+\\.\\d{2}$/),\n  description: z.string().optional(),\n});\n\n// Route Implementation\napp.post('/api/transfers', validateRequest(transferSchema), async (req, res) => {\n  try {\n    const transfer = await storage.createTransfer(req.body);\n    res.json({ success: true, data: transfer });\n  } catch (error) {\n    res.status(500).json({ \n      success: false, \n      error: { message: \"Transfer creation failed\" } \n    });\n  }\n});\n```\n\n## 📊 Data Access Layer\n\n### Storage Interface Pattern\n\n```typescript\n// storage.ts - Abstract interface\ninterface IStorage {\n  // User operations\n  createUser(user: InsertUser): Promise<User>;\n  getUser(id: string): Promise<User | null>;\n  getUserByEmail(email: string): Promise<User | null>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  \n  // Account operations\n  createAccount(account: InsertAccount): Promise<Account>;\n  getAccountsByUser(userId: string): Promise<Account[]>;\n  updateAccountBalance(id: string, balance: string): Promise<Account>;\n  \n  // Transfer operations\n  createTransfer(transfer: InsertTransfer): Promise<Transfer>;\n  getTransfersByAccount(accountId: string): Promise<Transfer[]>;\n  updateTransferStatus(id: string, status: string): Promise<Transfer>;\n}\n```\n\n### Database Queries with Drizzle\n\n```typescript\n// Complex join query example\nconst getUserWithAccounts = async (userId: string) => {\n  return await db\n    .select({\n      user: users,\n      accounts: sql`json_agg(${accounts})`.as('accounts'),\n    })\n    .from(users)\n    .leftJoin(accounts, eq(accounts.userId, users.id))\n    .where(eq(users.id, userId))\n    .groupBy(users.id);\n};\n\n// Transaction example\nconst transferMoney = async (fromId: string, toId: string, amount: string) => {\n  return await db.transaction(async (tx) => {\n    // Debit from account\n    await tx\n      .update(accounts)\n      .set({ balance: sql`${accounts.balance} - ${amount}` })\n      .where(eq(accounts.id, fromId));\n    \n    // Credit to account\n    await tx\n      .update(accounts)\n      .set({ balance: sql`${accounts.balance} + ${amount}` })\n      .where(eq(accounts.id, toId));\n      \n    // Create transfer record\n    const transfer = await tx\n      .insert(transfers)\n      .values({ fromAccountId: fromId, toAccountId: toId, amount })\n      .returning();\n      \n    return transfer[0];\n  });\n};\n```\n\n## 🎨 Frontend Architecture\n\n### Component Structure\n\n```\ncomponents/\n├── ui/                    # Base UI components\n│   ├── button.tsx         # Reusable button component\n│   ├── form.tsx          # Form wrapper components\n│   ├── input.tsx         # Input field components\n│   ├── navbar.tsx        # Navigation bar\n│   └── ...\n├── admin/                # Admin-specific components\n│   ├── user-management.tsx\n│   ├── transfer-approval.tsx\n│   └── ...\n└── customer/            # Customer-specific components\n    ├── account-overview.tsx\n    ├── transaction-history.tsx\n    └── ...\n```\n\n### State Management with TanStack Query\n\n```typescript\n// Custom hook for user data\nconst useAuth = () => {\n  return useQuery({\n    queryKey: ['auth', 'user'],\n    queryFn: async () => {\n      const response = await fetch('/api/auth/user');\n      if (!response.ok) throw new Error('Not authenticated');\n      return response.json();\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    retry: false,\n  });\n};\n\n// Mutation for creating transfers\nconst useCreateTransfer = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (transfer: CreateTransferData) => {\n      const response = await apiRequest('/api/transfers', {\n        method: 'POST',\n        body: JSON.stringify(transfer),\n      });\n      return response;\n    },\n    onSuccess: () => {\n      // Invalidate and refetch related queries\n      queryClient.invalidateQueries({ queryKey: ['transfers'] });\n      queryClient.invalidateQueries({ queryKey: ['accounts'] });\n    },\n  });\n};\n```\n\n### Form Handling Pattern\n\n```typescript\n// Form with validation\nconst TransferForm = () => {\n  const form = useForm<TransferFormData>({\n    resolver: zodResolver(transferFormSchema),\n    defaultValues: {\n      amount: '',\n      toAccountNumber: '',\n      description: '',\n    },\n  });\n  \n  const createTransfer = useCreateTransfer();\n  \n  const onSubmit = (data: TransferFormData) => {\n    createTransfer.mutate(data, {\n      onSuccess: () => {\n        toast.success('Transfer created successfully');\n        form.reset();\n      },\n      onError: (error) => {\n        toast.error('Transfer failed: ' + error.message);\n      },\n    });\n  };\n  \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <FormField\n          control={form.control}\n          name=\"amount\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Amount</FormLabel>\n              <FormControl>\n                <Input placeholder=\"0.00\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        {/* More fields... */}\n        <Button type=\"submit\" disabled={createTransfer.isPending}>\n          {createTransfer.isPending ? 'Processing...' : 'Send Transfer'}\n        </Button>\n      </form>\n    </Form>\n  );\n};\n```\n\n## 📱 Mobile Responsiveness Architecture\n\n### Mobile-First Design Principles\nOur banking application follows a mobile-first approach to ensure optimal user experience across all devices:\n\n#### Responsive Design Strategy\n```css\n/* Mobile-first CSS approach */\n/* Base styles for mobile (375px+) */\n.component {\n  padding: 0.5rem;\n  font-size: 0.875rem;\n}\n\n/* Tablet styles (640px+) */\n@media (min-width: 640px) {\n  .component {\n    padding: 1rem;\n    font-size: 1rem;\n  }\n}\n\n/* Desktop styles (1024px+) */\n@media (min-width: 1024px) {\n  .component {\n    padding: 1.5rem;\n    font-size: 1.125rem;\n  }\n}\n```\n\n#### Navigation Patterns\n```typescript\n// Mobile hamburger navigation implementation\nconst [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\nreturn (\n  <header className=\"bg-white border-b border-gray-200\">\n    <div className=\"max-w-7xl mx-auto px-2 sm:px-4 lg:px-8\">\n      <div className=\"flex justify-between items-center py-3\">\n        {/* Logo - responsive sizing */}\n        <Link href=\"/dashboard\">\n          <Building2 className=\"w-5 h-5 sm:w-6 sm:h-6\" />\n          <span className=\"hidden xs:block font-bold text-sm sm:text-base lg:text-lg\">\n            Global Deposit Protection\n          </span>\n        </Link>\n\n        {/* Desktop Navigation */}\n        <nav className=\"hidden lg:flex items-center space-x-6\">\n          {/* Navigation items */}\n        </nav>\n\n        {/* Mobile Menu Button */}\n        <button\n          onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n          className=\"lg:hidden p-2 rounded-md text-gray-600\"\n        >\n          {isMobileMenuOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n        </button>\n      </div>\n\n      {/* Mobile Navigation Menu */}\n      {isMobileMenuOpen && (\n        <div className=\"lg:hidden border-t border-gray-200\">\n          {/* Mobile navigation items */}\n        </div>\n      )}\n    </div>\n  </header>\n);\n```\n\n#### Tab Layout Optimization\n```typescript\n// Responsive tab navigation for customer dashboard\n<TabsList className=\"grid w-full grid-cols-2 sm:grid-cols-3 md:grid-cols-5 lg:grid-cols-10 gap-1\">\n  <TabsTrigger \n    value=\"overview\" \n    className=\"text-xs sm:text-sm\"\n  >\n    Overview\n  </TabsTrigger>\n  {/* More tabs with responsive sizing */}\n</TabsList>\n```\n\n#### Card Layout Responsiveness\n```typescript\n// Responsive account card layout\n<div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 lg:gap-0\">\n  <div className=\"flex-1\">\n    <div className=\"flex flex-col sm:flex-row sm:items-center sm:space-x-2 mb-2\">\n      <h4 className=\"font-semibold text-base sm:text-lg\">\n        {account.accountType} Account\n      </h4>\n      <Badge className={getStatusColor(account.status)}>\n        {account.status}\n      </Badge>\n    </div>\n    \n    <div className=\"space-y-1 text-xs sm:text-sm text-gray-600\">\n      {/* Account details with responsive text sizing */}\n    </div>\n  </div>\n  \n  <div className=\"text-left lg:text-right\">\n    <p className=\"text-xl sm:text-2xl font-bold\">\n      ${account.balance}\n    </p>\n  </div>\n</div>\n```\n\n#### Touch-Friendly Interactions\n```css\n/* Ensure minimum touch target sizes */\n@media (max-width: 768px) {\n  [role=\"tablist\"] button {\n    font-size: 0.75rem !important;\n    padding: 0.375rem 0.5rem !important;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  \n  .mobile-button-spacing {\n    @apply space-y-2 space-x-0;\n  }\n  \n  .mobile-text-wrap {\n    word-wrap: break-word;\n    overflow-wrap: break-word;\n  }\n}\n```\n\n## 🎭 Component Patterns\n\n### Compound Component Pattern\n\n```typescript\n// Account card with multiple compositions\nconst AccountCard = ({ children, account }) => (\n  <div className=\"account-card\">\n    {children}\n  </div>\n);\n\nAccountCard.Header = ({ account }) => (\n  <div className=\"account-header\">\n    <h3>{account.accountType}</h3>\n    <span>****{account.accountNumber.slice(-4)}</span>\n  </div>\n);\n\nAccountCard.Balance = ({ account }) => (\n  <div className=\"account-balance\">\n    ${parseFloat(account.balance).toLocaleString()}\n  </div>\n);\n\nAccountCard.Actions = ({ account }) => (\n  <div className=\"account-actions\">\n    <Button>Transfer</Button>\n    <Button variant=\"outline\">Details</Button>\n  </div>\n);\n\n// Usage\n<AccountCard account={account}>\n  <AccountCard.Header account={account} />\n  <AccountCard.Balance account={account} />\n  <AccountCard.Actions account={account} />\n</AccountCard>\n```\n\n### Custom Hook Pattern\n\n```typescript\n// useAccountData hook\nconst useAccountData = (userId: string) => {\n  const accountsQuery = useQuery({\n    queryKey: ['accounts', userId],\n    queryFn: () => fetchUserAccounts(userId),\n  });\n  \n  const transactionsQuery = useQuery({\n    queryKey: ['transactions', userId],\n    queryFn: () => fetchUserTransactions(userId),\n    enabled: !!userId,\n  });\n  \n  const totalBalance = useMemo(() => {\n    return accountsQuery.data?.reduce((sum, account) => {\n      return sum + parseFloat(account.balance);\n    }, 0) || 0;\n  }, [accountsQuery.data]);\n  \n  return {\n    accounts: accountsQuery.data || [],\n    transactions: transactionsQuery.data || [],\n    totalBalance,\n    isLoading: accountsQuery.isLoading || transactionsQuery.isLoading,\n    error: accountsQuery.error || transactionsQuery.error,\n  };\n};\n```\n\n## 🔍 Testing Strategies\n\n### Unit Testing\n\n```typescript\n// Component testing with React Testing Library\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { TransferForm } from './TransferForm';\n\ndescribe('TransferForm', () => {\n  it('validates required fields', async () => {\n    render(<TransferForm />);\n    \n    const submitButton = screen.getByRole('button', { name: /send transfer/i });\n    fireEvent.click(submitButton);\n    \n    expect(await screen.findByText('Amount is required')).toBeInTheDocument();\n    expect(await screen.findByText('Account number is required')).toBeInTheDocument();\n  });\n  \n  it('submits form with valid data', async () => {\n    const mockSubmit = jest.fn();\n    render(<TransferForm onSubmit={mockSubmit} />);\n    \n    fireEvent.change(screen.getByLabelText(/amount/i), {\n      target: { value: '100.00' }\n    });\n    fireEvent.change(screen.getByLabelText(/account number/i), {\n      target: { value: '1234567890' }\n    });\n    \n    fireEvent.click(screen.getByRole('button', { name: /send transfer/i }));\n    \n    await waitFor(() => {\n      expect(mockSubmit).toHaveBeenCalledWith({\n        amount: '100.00',\n        toAccountNumber: '1234567890',\n      });\n    });\n  });\n});\n```\n\n### API Testing\n\n```typescript\n// API endpoint testing\nimport request from 'supertest';\nimport app from '../server';\n\ndescribe('POST /api/transfers', () => {\n  it('creates transfer with valid data', async () => {\n    const transferData = {\n      fromAccountId: 'valid-account-id',\n      toAccountNumber: '1234567890',\n      amount: '100.00',\n      description: 'Test transfer',\n    };\n    \n    const response = await request(app)\n      .post('/api/transfers')\n      .set('Cookie', validSessionCookie)\n      .send(transferData)\n      .expect(201);\n      \n    expect(response.body.success).toBe(true);\n    expect(response.body.data.amount).toBe('100.00');\n  });\n  \n  it('rejects transfer with insufficient balance', async () => {\n    const transferData = {\n      fromAccountId: 'low-balance-account',\n      toAccountNumber: '1234567890',\n      amount: '10000.00',\n    };\n    \n    const response = await request(app)\n      .post('/api/transfers')\n      .set('Cookie', validSessionCookie)\n      .send(transferData)\n      .expect(400);\n      \n    expect(response.body.success).toBe(false);\n    expect(response.body.error.message).toContain('insufficient balance');\n  });\n});\n```\n\n## 📈 Performance Optimization\n\n### Frontend Optimizations\n\n1. **Code Splitting**\n   ```typescript\n   // Lazy loading for route components\n   const AdminDashboard = lazy(() => import('@/pages/admin-dashboard'));\n   const CustomerDashboard = lazy(() => import('@/pages/customer-dashboard'));\n   \n   // Usage in router\n   <Suspense fallback={<LoadingSpinner />}>\n     <Switch>\n       <Route path=\"/admin\" component={AdminDashboard} />\n       <Route path=\"/dashboard\" component={CustomerDashboard} />\n     </Switch>\n   </Suspense>\n   ```\n\n2. **Image Optimization**\n   ```typescript\n   // Responsive image component\n   const OptimizedImage = ({ src, alt, ...props }) => (\n     <img\n       src={src}\n       alt={alt}\n       loading=\"lazy\"\n       decoding=\"async\"\n       {...props}\n     />\n   );\n   ```\n\n3. **Memoization**\n   ```typescript\n   // Expensive calculations\n   const ExpensiveComponent = ({ data }) => {\n     const processedData = useMemo(() => {\n       return data.map(item => complexCalculation(item));\n     }, [data]);\n     \n     return <div>{processedData}</div>;\n   };\n   ```\n\n### Backend Optimizations\n\n1. **Database Indexing**\n   ```sql\n   -- Common query patterns\n   CREATE INDEX idx_accounts_user_id ON accounts(user_id);\n   CREATE INDEX idx_transfers_from_account ON transfers(from_account_id);\n   CREATE INDEX idx_transactions_account_date ON transactions(account_id, created_at);\n   ```\n\n2. **Connection Pooling**\n   ```typescript\n   // PostgreSQL connection pool\n   const pool = new Pool({\n     connectionString: process.env.DATABASE_URL,\n     max: 20, // Maximum connections\n     idleTimeoutMillis: 30000,\n     connectionTimeoutMillis: 2000,\n   });\n   ```\n\n3. **Caching Strategy**\n   ```typescript\n   // In-memory caching for frequently accessed data\n   const cache = new Map();\n   \n   const getCachedUserData = async (userId: string) => {\n     if (cache.has(userId)) {\n       return cache.get(userId);\n     }\n     \n     const userData = await fetchUserData(userId);\n     cache.set(userId, userData);\n     \n     // Cache for 5 minutes\n     setTimeout(() => cache.delete(userId), 5 * 60 * 1000);\n     \n     return userData;\n   };\n   ```\n\n## 🚀 Deployment Guide\n\n### Environment-Specific Configurations\n\n```typescript\n// config/environments.ts\nconst environments = {\n  development: {\n    apiUrl: 'http://localhost:5000',\n    dbPool: { max: 5 },\n    logLevel: 'debug',\n    sessionTtl: 24 * 60 * 60 * 1000, // 24 hours\n  },\n  staging: {\n    apiUrl: 'https://staging-api.finora.com',\n    dbPool: { max: 10 },\n    logLevel: 'info',\n    sessionTtl: 8 * 60 * 60 * 1000, // 8 hours\n  },\n  production: {\n    apiUrl: 'https://api.finora.com',\n    dbPool: { max: 20 },\n    logLevel: 'error',\n    sessionTtl: 2 * 60 * 60 * 1000, // 2 hours\n  },\n};\n\nexport const config = environments[process.env.NODE_ENV || 'development'];\n```\n\n### Docker Configuration\n\n```dockerfile\n# Dockerfile\nFROM node:18-alpine\n\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\nRUN npm ci --only=production\n\n# Copy source code\nCOPY . .\n\n# Build application\nRUN npm run build\n\n# Expose port\nEXPOSE 5000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:5000/health || exit 1\n\n# Start application\nCMD [\"npm\", \"start\"]\n```\n\n### Docker Compose for Local Development\n\n```yaml\n# docker-compose.yml\nversion: '3.8'\nservices:\n  app:\n    build: .\n    ports:\n      - \"5000:5000\"\n    environment:\n      - NODE_ENV=development\n      - DATABASE_URL=postgresql://postgres:password@db:5432/finora_dev\n    depends_on:\n      - db\n    volumes:\n      - .:/app\n      - /app/node_modules\n\n  db:\n    image: postgres:14-alpine\n    environment:\n      POSTGRES_DB: finora_dev\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: password\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\n```\n\n## 📊 Monitoring & Observability\n\n### Application Metrics\n\n```typescript\n// metrics.ts\nimport { performance } from 'perf_hooks';\n\nclass MetricsCollector {\n  private metrics = new Map();\n  \n  startTimer(operation: string) {\n    const start = performance.now();\n    return () => {\n      const duration = performance.now() - start;\n      this.recordMetric(`${operation}_duration`, duration);\n    };\n  }\n  \n  recordMetric(name: string, value: number) {\n    if (!this.metrics.has(name)) {\n      this.metrics.set(name, []);\n    }\n    this.metrics.get(name).push({\n      value,\n      timestamp: new Date().toISOString(),\n    });\n  }\n  \n  getMetrics() {\n    const summary = {};\n    for (const [name, values] of this.metrics) {\n      summary[name] = {\n        count: values.length,\n        avg: values.reduce((a, b) => a + b.value, 0) / values.length,\n        min: Math.min(...values.map(v => v.value)),\n        max: Math.max(...values.map(v => v.value)),\n      };\n    }\n    return summary;\n  }\n}\n\nexport const metrics = new MetricsCollector();\n\n// Usage in middleware\napp.use((req, res, next) => {\n  const endTimer = metrics.startTimer(`${req.method}_${req.path}`);\n  res.on('finish', endTimer);\n  next();\n});\n```\n\n### Error Tracking\n\n```typescript\n// error-handler.ts\nexport const errorHandler = (err: Error, req: Request, res: Response, next: NextFunction) => {\n  // Log error details\n  console.error('Error:', {\n    message: err.message,\n    stack: err.stack,\n    url: req.url,\n    method: req.method,\n    userId: req.user?.id,\n    timestamp: new Date().toISOString(),\n  });\n  \n  // Send appropriate response\n  if (err.name === 'ValidationError') {\n    res.status(400).json({\n      success: false,\n      error: {\n        code: 'VALIDATION_ERROR',\n        message: err.message,\n      },\n    });\n  } else if (err.name === 'UnauthorizedError') {\n    res.status(401).json({\n      success: false,\n      error: {\n        code: 'UNAUTHORIZED',\n        message: 'Authentication required',\n      },\n    });\n  } else {\n    res.status(500).json({\n      success: false,\n      error: {\n        code: 'INTERNAL_ERROR',\n        message: 'An unexpected error occurred',\n      },\n    });\n  }\n};\n```\n\n## 🔧 Development Tools & Scripts\n\n### Custom Development Scripts\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"concurrently \\\"npm run dev:server\\\" \\\"npm run dev:client\\\"\",\n    \"dev:server\": \"tsx watch server/index.ts\",\n    \"dev:client\": \"vite\",\n    \"build\": \"npm run build:client && npm run build:server\",\n    \"build:client\": \"vite build\",\n    \"build:server\": \"tsc --project tsconfig.server.json\",\n    \"db:push\": \"drizzle-kit push:pg\",\n    \"db:seed\": \"tsx server/seed.ts\",\n    \"db:studio\": \"drizzle-kit studio\",\n    \"db:reset\": \"npm run db:drop && npm run db:push && npm run db:seed\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\",\n    \"lint\": \"eslint src --ext .ts,.tsx\",\n    \"lint:fix\": \"eslint src --ext .ts,.tsx --fix\",\n    \"type-check\": \"tsc --noEmit\",\n    \"format\": \"prettier --write \\\"src/**/*.{ts,tsx}\\\"\",\n    \"analyze\": \"npm run build && npx vite-bundle-analyzer dist\"\n  }\n}\n```\n\n### Development Helpers\n\n```typescript\n// dev-tools.ts\nexport const devTools = {\n  logPerformance: (name: string, fn: Function) => {\n    if (process.env.NODE_ENV !== 'development') return fn();\n    \n    console.time(name);\n    const result = fn();\n    console.timeEnd(name);\n    return result;\n  },\n  \n  logQuery: (query: string, params?: any[]) => {\n    if (process.env.NODE_ENV !== 'development') return;\n    \n    console.log('🗄️  Database Query:', {\n      query: query.replace(/\\s+/g, ' ').trim(),\n      params,\n      timestamp: new Date().toISOString(),\n    });\n  },\n  \n  mockApiDelay: (ms: number = 1000) => {\n    if (process.env.NODE_ENV !== 'development') return Promise.resolve();\n    \n    return new Promise(resolve => setTimeout(resolve, ms));\n  },\n};\n```\n\n## 🏆 Best Practices\n\n### Code Organization\n\n1. **Feature-based Structure**: Group related components, hooks, and utilities\n2. **Separation of Concerns**: Keep business logic separate from UI components\n3. **Consistent Naming**: Use descriptive, consistent naming conventions\n4. **Type Safety**: Leverage TypeScript for better development experience\n5. **Error Boundaries**: Implement error boundaries for better error handling\n\n### Security Best Practices\n\n1. **Input Validation**: Always validate and sanitize user input\n2. **Output Encoding**: Encode output to prevent XSS attacks\n3. **Authentication**: Use secure session management\n4. **Authorization**: Implement proper role-based access control\n5. **HTTPS**: Use HTTPS in production environments\n6. **Rate Limiting**: Implement rate limiting for API endpoints\n\n### Performance Best Practices\n\n1. **Lazy Loading**: Load components and routes on demand\n2. **Memoization**: Use React.memo and useMemo for expensive operations\n3. **Database Optimization**: Use indexes and optimize queries\n4. **Caching**: Implement appropriate caching strategies\n5. **Bundle Analysis**: Regularly analyze and optimize bundle size\n\n---\n\nThis documentation serves as a comprehensive guide for developers working on the Finora banking application. For specific implementation details, refer to the source code and inline comments.","size_bytes":30085},"README.md":{"content":"# Finora Banking Application\n\nA comprehensive full-stack banking application built with modern web technologies, featuring user authentication, account management, money transfers, and administrative controls.\n\n## 🏦 Overview\n\nFinora is a complete banking solution that provides:\n- **Customer Banking**: Account overview, transaction history, money transfers, bill payments\n- **Admin Dashboard**: User management, transfer approvals, audit logs, system statistics\n- **Public Website**: Marketing pages, branch finder, product information\n- **Security Features**: Role-based authentication, session management, audit trails\n\n## 🚀 Quick Start\n\n### Prerequisites\n\n- Node.js (v18 or higher)\n- PostgreSQL database\n- npm or yarn package manager\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone <repository-url>\n   cd finora-banking-app\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Set up environment variables**\n   Create a `.env` file in the root directory:\n   ```env\n   DATABASE_URL=postgresql://username:password@localhost:5432/finora_db\n   SESSION_SECRET=your-super-secret-session-key\n   NODE_ENV=development\n   ```\n\n4. **Initialize the database**\n   ```bash\n   # Create database tables\n   npm run db:push\n   \n   # Seed with sample data\n   npm run db:seed\n   ```\n\n5. **Start the application**\n   ```bash\n   npm run dev\n   ```\n\n6. **Access the application**\n   - Frontend: http://localhost:5000\n   - Admin login: admin@admin.com / admin123\n   - Customer login: john.doe@email.com / password123\n\n## 🏗️ Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized builds\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state caching\n- **UI Components**: shadcn/ui built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom Finora design system\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for type safety\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: Session-based with bcrypt password hashing\n- **Session Storage**: PostgreSQL-backed sessions\n- **API Design**: RESTful endpoints with proper error handling\n\n### Database Schema\n- **Users**: Authentication and profile information\n- **Accounts**: Bank accounts with balances and status\n- **Transfers**: Money transfer requests and approvals\n- **Transactions**: Detailed transaction history\n- **Audit Logs**: System activity tracking\n- **Email Notifications**: Communication history\n\n## 📁 Project Structure\n\n```\nfinora-banking-app/\n├── client/                     # Frontend React application\n│   ├── src/\n│   │   ├── components/        # Reusable UI components\n│   │   │   ├── ui/           # Base UI components (buttons, forms, etc.)\n│   │   │   ├── admin/        # Admin-specific components\n│   │   │   └── customer/     # Customer-specific components\n│   │   ├── pages/            # Page components and routes\n│   │   ├── hooks/            # Custom React hooks\n│   │   ├── lib/              # Utility functions and configurations\n│   │   └── index.css         # Global styles and Tailwind config\n├── server/                    # Backend Express application\n│   ├── auth.ts               # Authentication configuration\n│   ├── routes.ts             # API route definitions\n│   ├── storage.ts            # Data access layer\n│   ├── db.ts                 # Database connection\n│   ├── seed.ts               # Database seeding script\n│   └── index.ts              # Server entry point\n├── shared/                   # Shared TypeScript definitions\n│   └── schema.ts             # Database schema and validation\n├── package.json              # Dependencies and scripts\n├── tailwind.config.ts        # Tailwind CSS configuration\n├── vite.config.ts           # Vite build configuration\n└── drizzle.config.ts        # Database migration configuration\n```\n\n## 🎨 Design System\n\n### Color Palette\n```css\n/* Primary Finora Colors */\n--finora-primary: #1E3A8A    /* Primary Blue */\n--finora-secondary: #0F766E  /* Teal Green */\n--finora-accent: #0EA5E9     /* Sky Blue */\n--finora-light: #EFF6FF      /* Light Blue */\n--finora-dark: #1E293B       /* Dark Blue */\n```\n\n### Typography\n- **Primary Font**: Inter font family with system font fallback\n- **Headings**: Bold weights (600-700)\n- **Body Text**: Regular weight (400)\n- **UI Text**: Medium weight (500)\n\n### Mobile-First Responsive Design\n- **Breakpoints**: Mobile (375px+), Tablet (640px+), Desktop (1024px+)\n- **Navigation**: Collapsible hamburger menus on mobile\n- **Typography**: Responsive text scaling across all screen sizes\n- **Layouts**: Flexible grid systems that adapt to screen size\n- **Touch Targets**: Minimum 44px for all interactive elements on mobile\n\n## 🛠️ Development\n\n### Available Scripts\n\n```bash\n# Development\nnpm run dev          # Start development server\nnpm run build        # Build for production\nnpm run preview      # Preview production build\n\n# Database\nnpm run db:push      # Apply schema changes to database\nnpm run db:seed      # Seed database with sample data\nnpm run db:studio    # Open database management interface\n\n# Code Quality\nnpm run lint         # Run ESLint\nnpm run type-check   # Run TypeScript type checking\n```\n\n### Development Workflow\n\n1. **Feature Development**\n   ```bash\n   # Create feature branch\n   git checkout -b feature/new-feature\n   \n   # Make changes\n   # Test locally\n   npm run dev\n   \n   # Check for issues\n   npm run lint\n   npm run type-check\n   \n   # Commit and push\n   git add .\n   git commit -m \"feat: add new feature\"\n   git push origin feature/new-feature\n   ```\n\n2. **Database Changes**\n   ```bash\n   # Modify schema in shared/schema.ts\n   # Apply changes\n   npm run db:push\n   \n   # If needed, re-seed data\n   npm run db:seed\n   ```\n\n## 🔐 Authentication & Security\n\n### Authentication Flow\n1. User submits login credentials\n2. Server validates against database (bcrypt)\n3. Session created and stored in PostgreSQL\n4. Session ID returned as HTTP-only cookie\n5. Subsequent requests authenticated via session\n\n### Security Features\n- **Password Hashing**: bcrypt with salt rounds\n- **Session Management**: Secure HTTP-only cookies\n- **CSRF Protection**: SameSite cookie policy\n- **Input Validation**: Zod schema validation\n- **SQL Injection Protection**: Parameterized queries\n- **Rate Limiting**: Request throttling on sensitive endpoints\n\n## 🏦 Banking Features\n\n### Customer Features\n- **Account Overview**: Balance and account information with mobile-optimized layouts\n- **Transaction History**: Detailed transaction records with responsive tables\n- **Money Transfers**: Internal and external transfers with mobile-friendly forms\n- **Bill Payments**: Utility and service payments with touch-optimized interfaces\n- **Card Management**: Debit/credit card controls with mobile card layouts\n- **Investment Dashboard**: Portfolio management with responsive charts\n- **Profile Management**: Personal information updates with mobile forms\n- **Customer Support**: Integrated chat and ticket system\n- **Notifications Center**: Real-time alerts and messaging\n\n### Admin Features\n- **User Management**: Create, update, disable accounts with responsive admin tables\n- **Transfer Approval**: Review and approve large transfers with mobile workflows\n- **Account Controls**: Freeze/unfreeze accounts with simplified mobile interfaces\n- **Audit Logs**: System activity monitoring with mobile-optimized views\n- **Statistics Dashboard**: Key metrics and analytics with responsive charts\n- **Support Tickets**: Customer service management with mobile support tools\n- **Email Configuration**: Notification management system\n- **KYC Management**: Document verification workflows\n\n## 🔧 Configuration\n\n### Environment Variables\n```env\n# Database\nDATABASE_URL=postgresql://username:password@host:port/database\n\n# Authentication\nSESSION_SECRET=your-secret-key-here\n\n# Application\nNODE_ENV=development|production\nPORT=5000\n\n# Optional: Email notifications\nRESEND_API_KEY=your-resend-api-key\n```\n\n### Customization\n\n1. **Branding**: Update colors in `client/src/index.css`\n2. **Logo**: Replace logo assets in `attached_assets/`\n3. **Content**: Modify page content in `client/src/pages/`\n4. **Features**: Add new routes in `client/src/App.tsx` and `server/routes.ts`\n\n## 📊 Database Schema\n\n### Core Tables\n\n**Users Table**\n```sql\nusers (\n  id VARCHAR PRIMARY KEY,\n  email VARCHAR UNIQUE NOT NULL,\n  password VARCHAR,\n  first_name VARCHAR,\n  last_name VARCHAR,\n  role user_role DEFAULT 'customer',\n  created_at TIMESTAMP DEFAULT NOW()\n)\n```\n\n**Accounts Table**\n```sql\naccounts (\n  id UUID PRIMARY KEY,\n  user_id VARCHAR REFERENCES users(id),\n  account_number VARCHAR UNIQUE,\n  account_type VARCHAR DEFAULT 'checking',\n  balance DECIMAL(15,2) DEFAULT 0.00,\n  status account_status DEFAULT 'active'\n)\n```\n\n**Transfers Table**\n```sql\ntransfers (\n  id UUID PRIMARY KEY,\n  from_account_id UUID REFERENCES accounts(id),\n  to_account_id UUID REFERENCES accounts(id),\n  amount DECIMAL(15,2) NOT NULL,\n  status transfer_status DEFAULT 'pending',\n  description TEXT\n)\n```\n\n## 🚀 Deployment\n\n### Production Setup\n\n1. **Environment Setup**\n   ```bash\n   # Set production environment variables\n   export NODE_ENV=production\n   export DATABASE_URL=your-production-db-url\n   export SESSION_SECRET=your-production-secret\n   ```\n\n2. **Build Application**\n   ```bash\n   npm run build\n   ```\n\n3. **Database Migration**\n   ```bash\n   npm run db:push\n   ```\n\n4. **Start Production Server**\n   ```bash\n   npm start\n   ```\n\n### Deployment Platforms\n\n- **Replit**: Fully configured for Replit Deployments\n- **Vercel**: Frontend deployment with API routes\n- **Railway**: Full-stack deployment with PostgreSQL\n- **Heroku**: Traditional PaaS deployment\n- **Docker**: Container-based deployment\n\n## 📈 Performance & Monitoring\n\n### Performance Features\n- **Code Splitting**: Automatic route-based splitting\n- **Image Optimization**: Responsive images with lazy loading\n- **Caching**: TanStack Query for intelligent data caching\n- **Bundle Optimization**: Vite's optimized build process\n\n### Monitoring\n- **Error Handling**: Comprehensive error boundaries\n- **Logging**: Structured request/response logging\n- **Metrics**: Built-in performance monitoring\n- **Health Checks**: Application health endpoints\n\n## 🧪 Testing\n\n### Testing Strategy\n```bash\n# Unit Tests\nnpm run test:unit\n\n# Integration Tests  \nnpm run test:integration\n\n# End-to-End Tests\nnpm run test:e2e\n\n# All Tests\nnpm run test\n```\n\n### Test Accounts\n- **Admin**: admin@admin.com / admin123\n- **Customer 1**: john.doe@email.com / password123\n- **Customer 2**: jane.smith@email.com / password123\n\n## 🤝 Contributing\n\n### Code Style\n- **TypeScript**: Strict mode enabled\n- **ESLint**: Airbnb configuration\n- **Prettier**: Code formatting\n- **Conventional Commits**: Commit message format\n\n### Pull Request Process\n1. Fork the repository\n2. Create feature branch\n3. Make changes with tests\n4. Submit pull request\n5. Code review and approval\n6. Merge to main branch\n\n## 📄 License\n\nThis project is licensed under the MIT License. See LICENSE file for details.\n\n## 🔧 Recent Fixes & Updates\n\n### Latest Improvements ✅\n- **Mobile Responsiveness**: Completely redesigned for mobile-first experience\n  - Customer dashboard tabs now responsive (2-5 columns instead of 10 on mobile)\n  - Added hamburger navigation menus for both main and customer navbars\n  - Optimized text sizes, button spacing, and layouts for mobile devices\n  - Improved account cards and forms for better mobile readability\n  - Enhanced hero section and landing page for mobile optimization\n- **Authentication System**: Fixed session persistence and automatic logout issues \n- **Customer Dashboard**: Resolved redirect loops causing endless login attempts\n- **Profile Updates**: Fixed timestamp conversion errors for date fields (dateOfBirth)\n- **Document Upload**: Added missing `/api/profile/documents` endpoint for KYC documents\n- **Database Schema**: Proper handling of date/timestamp fields in customer profiles\n- **Redirect Issues**: Fixed wrong redirect URLs from `/api/login` to `/login`\n\n### Known Working Features\n- ✅ Admin login (admin@admin.com / admin123)\n- ✅ Customer registration and login\n- ✅ Profile information updates\n- ✅ Document upload for verification\n- ✅ Session persistence across page refreshes\n- ✅ Role-based dashboard access\n- ✅ **Fully responsive mobile design** - Works perfectly on all mobile devices\n- ✅ Account management with real-time balance updates\n- ✅ Money transfer system with approval workflow\n- ✅ Transaction history and analytics\n- ✅ Bill payment functionality\n- ✅ Card management system\n- ✅ Investment dashboard\n- ✅ Customer support system\n- ✅ Administrative controls and user management\n\n## 📞 Support\n\n### Getting Help\n- **Documentation**: Check this README and code comments\n- **Issues**: Create GitHub issue for bugs/features\n- **Discussions**: Use GitHub Discussions for questions\n- **Email**: support@finora.com\n\n### Troubleshooting\n\n**Common Issues:**\n\n1. **Database Connection Errors**\n   ```bash\n   # Check DATABASE_URL format\n   postgresql://username:password@localhost:5432/database_name\n   \n   # Verify PostgreSQL is running\n   pg_ctl status\n   ```\n\n2. **Build Failures**\n   ```bash\n   # Clear node_modules and reinstall\n   rm -rf node_modules package-lock.json\n   npm install\n   ```\n\n3. **Authentication Issues**\n   ```bash\n   # Check SESSION_SECRET is set\n   echo $SESSION_SECRET\n   \n   # Clear browser cookies\n   # Check network tab for session cookie\n   ```\n\n---\n\n**Built with ❤️ using modern web technologies**","size_bytes":14008},"client/src/pages/business.tsx":{"content":"import Navbar from \"@/components/ui/navbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Business() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navbar showLogin={true} />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-finora-secondary to-finora-primary py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center text-white\">\n            <h1 className=\"text-5xl font-bold mb-6\">Power Your Business Forward</h1>\n            <p className=\"text-xl mb-8\">Comprehensive banking solutions designed to help your business grow and thrive</p>\n            <Button className=\"bg-white text-finora-primary hover:bg-gray-100 px-8 py-3 text-lg\">\n              Start Banking With Us\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Business Banking Products */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-4xl font-bold text-center mb-12\">Business Banking Solutions</h2>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-16 h-16 bg-finora-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-briefcase text-white text-2xl\"></i>\n                </div>\n                <CardTitle className=\"text-center\">Business Checking</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"mb-4\">Streamlined business checking accounts with tools to manage your cash flow effectively.</p>\n                <ul className=\"text-sm space-y-2 mb-6\">\n                  <li>✓ No minimum balance options</li>\n                  <li>✓ Free business debit card</li>\n                  <li>✓ Online banking & mobile app</li>\n                  <li>✓ Unlimited electronic transactions</li>\n                </ul>\n                <Button variant=\"outline\" className=\"border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white\">\n                  Open Account\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-16 h-16 bg-finora-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-chart-line text-white text-2xl\"></i>\n                </div>\n                <CardTitle className=\"text-center\">Business Loans</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"mb-4\">Flexible financing options to support your business expansion and working capital needs.</p>\n                <ul className=\"text-sm space-y-2 mb-6\">\n                  <li>✓ SBA loans available</li>\n                  <li>✓ Equipment financing</li>\n                  <li>✓ Lines of credit</li>\n                  <li>✓ Commercial real estate loans</li>\n                </ul>\n                <Button variant=\"outline\" className=\"border-finora-secondary text-finora-secondary hover:bg-finora-secondary hover:text-white\">\n                  Apply Now\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-16 h-16 bg-finora-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-credit-card text-white text-2xl\"></i>\n                </div>\n                <CardTitle className=\"text-center\">Merchant Services</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"mb-4\">Accept payments seamlessly with our comprehensive merchant services and POS solutions.</p>\n                <ul className=\"text-sm space-y-2 mb-6\">\n                  <li>✓ Credit card processing</li>\n                  <li>✓ Mobile payment solutions</li>\n                  <li>✓ Online payment gateway</li>\n                  <li>✓ 24/7 customer support</li>\n                </ul>\n                <Button variant=\"outline\" className=\"border-finora-accent text-finora-accent hover:bg-finora-accent hover:text-white\">\n                  Get Started\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Industry Solutions */}\n      <section className=\"bg-gray-50 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold mb-4\">Industry-Specific Solutions</h2>\n            <p className=\"text-xl text-gray-600\">\n              Tailored banking services for your specific industry needs\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-finora-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-store text-white text-3xl\"></i>\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Retail</h3>\n              <p className=\"text-gray-600\">POS integration and inventory financing</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-finora-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-utensils text-white text-3xl\"></i>\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Restaurants</h3>\n              <p className=\"text-gray-600\">Equipment loans and cash management</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-finora-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-hard-hat text-white text-3xl\"></i>\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Construction</h3>\n              <p className=\"text-gray-600\">Project financing and bonding</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-finora-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-laptop text-white text-3xl\"></i>\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Technology</h3>\n              <p className=\"text-gray-600\">Startup financing and venture solutions</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Digital Tools */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-4xl font-bold mb-6\">Digital Tools for Modern Business</h2>\n              <p className=\"text-xl text-gray-600 mb-8\">\n                Manage your business finances efficiently with our comprehensive digital banking platform\n              </p>\n              <div className=\"space-y-6\">\n                <div className=\"flex items-start\">\n                  <i className=\"fas fa-chart-bar text-finora-primary text-2xl mr-4 mt-1\"></i>\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-2\">Cash Flow Management</h4>\n                    <p className=\"text-gray-600\">Real-time insights into your business finances</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start\">\n                  <i className=\"fas fa-file-invoice text-finora-primary text-2xl mr-4 mt-1\"></i>\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-2\">Digital Invoicing</h4>\n                    <p className=\"text-gray-600\">Create and send professional invoices instantly</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start\">\n                  <i className=\"fas fa-users text-finora-primary text-2xl mr-4 mt-1\"></i>\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-2\">Team Access Controls</h4>\n                    <p className=\"text-gray-600\">Manage permissions for employees and accountants</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div>\n              <img \n                src=\"https://images.unsplash.com/photo-1553484771-371a605b060b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Business team working on digital tools\" \n                className=\"rounded-lg shadow-lg w-full h-auto\" \n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Support Section */}\n      <section className=\"bg-finora-primary py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center text-white\">\n          <h2 className=\"text-4xl font-bold mb-6\">Dedicated Business Support</h2>\n          <p className=\"text-xl mb-8\">\n            Our business banking specialists are here to help you succeed\n          </p>\n          <div className=\"grid md:grid-cols-3 gap-8 mt-12\">\n            <div>\n              <i className=\"fas fa-phone text-4xl mb-4\"></i>\n              <h3 className=\"text-xl font-semibold mb-2\">24/7 Support</h3>\n              <p>Round-the-clock assistance when you need it</p>\n            </div>\n            <div>\n              <i className=\"fas fa-handshake text-4xl mb-4\"></i>\n              <h3 className=\"text-xl font-semibold mb-2\">Relationship Managers</h3>\n              <p>Dedicated advisors who understand your business</p>\n            </div>\n            <div>\n              <i className=\"fas fa-graduation-cap text-4xl mb-4\"></i>\n              <h3 className=\"text-xl font-semibold mb-2\">Business Resources</h3>\n              <p>Educational content and tools for growth</p>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":10466},"client/src/pages/commercial.tsx":{"content":"import Navbar from \"@/components/ui/navbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Commercial() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navbar showLogin={true} />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-finora-dark to-finora-primary py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center text-white\">\n            <h1 className=\"text-5xl font-bold mb-6\">Commercial Banking Excellence</h1>\n            <p className=\"text-xl mb-8\">Sophisticated financial solutions for large enterprises and institutional clients</p>\n            <Button className=\"bg-white text-finora-primary hover:bg-gray-100 px-8 py-3 text-lg\">\n              Explore Our Services\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Overview */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-4xl font-bold text-center mb-12\">Enterprise Financial Solutions</h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-16 h-16 bg-finora-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-building text-white text-2xl\"></i>\n                </div>\n                <CardTitle className=\"text-center\">Corporate Banking</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"mb-4\">Comprehensive banking solutions for large corporations and multinational enterprises.</p>\n                <ul className=\"text-sm space-y-2 mb-6\">\n                  <li>✓ Multi-currency accounts</li>\n                  <li>✓ International wire transfers</li>\n                  <li>✓ Cash concentration services</li>\n                  <li>✓ Liquidity management</li>\n                </ul>\n                <Button variant=\"outline\" className=\"border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white\">\n                  Learn More\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-16 h-16 bg-finora-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-chart-line text-white text-2xl\"></i>\n                </div>\n                <CardTitle className=\"text-center\">Capital Markets</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"mb-4\">Access to capital markets and investment banking services for strategic initiatives.</p>\n                <ul className=\"text-sm space-y-2 mb-6\">\n                  <li>✓ Debt & equity underwriting</li>\n                  <li>✓ Syndicated lending</li>\n                  <li>✓ M&A advisory services</li>\n                  <li>✓ Risk management solutions</li>\n                </ul>\n                <Button variant=\"outline\" className=\"border-finora-secondary text-finora-secondary hover:bg-finora-secondary hover:text-white\">\n                  Get Started\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-16 h-16 bg-finora-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-globe text-white text-2xl\"></i>\n                </div>\n                <CardTitle className=\"text-center\">Trade Finance</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"mb-4\">International trade financing and documentary credit services for global commerce.</p>\n                <ul className=\"text-sm space-y-2 mb-6\">\n                  <li>✓ Letters of credit</li>\n                  <li>✓ Import/export financing</li>\n                  <li>✓ Supply chain financing</li>\n                  <li>✓ Foreign exchange services</li>\n                </ul>\n                <Button variant=\"outline\" className=\"border-finora-accent text-finora-accent hover:bg-finora-accent hover:text-white\">\n                  Explore Options\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Industry Expertise */}\n      <section className=\"bg-gray-50 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold mb-4\">Industry Expertise</h2>\n            <p className=\"text-xl text-gray-600\">\n              Deep sector knowledge across key industries\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-12 items-center mb-16\">\n            <div>\n              <img \n                src=\"https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Modern commercial buildings\" \n                className=\"rounded-lg shadow-lg w-full h-auto\" \n              />\n            </div>\n            <div>\n              <h3 className=\"text-3xl font-bold mb-6\">Real Estate</h3>\n              <p className=\"text-lg text-gray-600 mb-6\">\n                Specialized financing solutions for commercial real estate developers, \n                investors, and property management companies.\n              </p>\n              <ul className=\"space-y-3\">\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-finora-primary mr-3\"></i>\n                  Construction and development loans\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-finora-primary mr-3\"></i>\n                  Permanent commercial mortgages\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-finora-primary mr-3\"></i>\n                  Bridge and interim financing\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h3 className=\"text-3xl font-bold mb-6\">Healthcare</h3>\n              <p className=\"text-lg text-gray-600 mb-6\">\n                Comprehensive banking solutions tailored to healthcare providers, \n                hospitals, and medical practice groups.\n              </p>\n              <ul className=\"space-y-3\">\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-finora-secondary mr-3\"></i>\n                  Practice acquisition financing\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-finora-secondary mr-3\"></i>\n                  Medical equipment loans\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-finora-secondary mr-3\"></i>\n                  Revenue cycle management\n                </li>\n              </ul>\n            </div>\n            <div>\n              <img \n                src=\"https://images.unsplash.com/photo-1519494026892-80bbd2d6fd0d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Modern healthcare facility\" \n                className=\"rounded-lg shadow-lg w-full h-auto\" \n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Technology Solutions */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold mb-4\">Advanced Technology Platform</h2>\n            <p className=\"text-xl text-gray-600\">\n              Cutting-edge digital solutions designed for enterprise-scale operations\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-finora-primary rounded-full flex items-center justify-center mx-auto mb-6\">\n                <i className=\"fas fa-shield-alt text-white text-3xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">Enterprise Security</h3>\n              <p className=\"text-gray-600\">\n                Bank-grade security with multi-factor authentication, \n                encryption, and fraud monitoring systems.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-finora-secondary rounded-full flex items-center justify-center mx-auto mb-6\">\n                <i className=\"fas fa-sync-alt text-white text-3xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">API Integration</h3>\n              <p className=\"text-gray-600\">\n                Seamless integration with your existing ERP, \n                accounting, and treasury management systems.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-finora-accent rounded-full flex items-center justify-center mx-auto mb-6\">\n                <i className=\"fas fa-analytics text-white text-3xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">Advanced Analytics</h3>\n              <p className=\"text-gray-600\">\n                Real-time reporting and business intelligence \n                tools for informed decision-making.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":10172},"client/src/pages/help.tsx":{"content":"import Navbar from \"@/components/ui/navbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, HelpCircle, Book, Phone, MessageCircle, Mail, Download, Shield, CreditCard, Building } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Help() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [location, setLocation] = useLocation();\n\n  const faqData = [\n    {\n      question: \"How do I reset my online banking password?\",\n      answer: \"You can reset your password by clicking 'Forgot Password' on the login page, or call our customer service at 1-800-FINORA-1.\"\n    },\n    {\n      question: \"What are your current interest rates?\",\n      answer: \"Interest rates vary by account type and are updated regularly. Please visit our Products page or contact us for current rates.\"\n    },\n    {\n      question: \"How do I dispute a transaction?\",\n      answer: \"Log into your online banking, select the transaction, and click 'Dispute Transaction', or call customer service immediately.\"\n    },\n    {\n      question: \"What should I do if my card is lost or stolen?\",\n      answer: \"Report lost or stolen cards immediately by calling 1-800-FINORA-1 or using our mobile app's card management feature.\"\n    },\n    {\n      question: \"How do I set up direct deposit?\",\n      answer: \"Provide your employer with your account number and routing number (011075150), or download our direct deposit form.\"\n    },\n    {\n      question: \"What are your branch hours?\",\n      answer: \"Most branches are open Monday-Friday 9AM-5PM, Saturday 9AM-1PM. Use our branch locator for specific hours.\"\n    }\n  ];\n\n  const helpCategories = [\n    {\n      icon: CreditCard,\n      title: \"Account Management\",\n      description: \"Managing your accounts, statements, and personal information\",\n      topics: [\"Account balance\", \"Statements\", \"Profile updates\", \"Account alerts\"]\n    },\n    {\n      icon: Shield,\n      title: \"Security & Fraud\",\n      description: \"Protecting your account and reporting suspicious activity\",\n      topics: [\"Password reset\", \"Fraud reporting\", \"Security tips\", \"Two-factor authentication\"]\n    },\n    {\n      icon: Building,\n      title: \"Banking Services\",\n      description: \"Information about our banking products and services\",\n      topics: [\"Online banking\", \"Mobile app\", \"Bill pay\", \"Transfers\"]\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navbar showLogin={true} />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-finora-accent to-finora-secondary py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center text-white\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">Help Center</h1>\n          <p className=\"text-xl mb-8\">Find answers to your questions and get the support you need</p>\n          \n          {/* Search Bar */}\n          <div className=\"max-w-2xl mx-auto\">\n            <div className=\"relative\">\n              <input\n                type=\"text\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                placeholder=\"Search for help articles, FAQs, or topics...\"\n                className=\"w-full px-6 py-4 pl-12 rounded-lg text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-white\"\n              />\n              <Search className=\"absolute left-4 top-4 w-5 h-5 text-gray-500\" />\n              <Button className=\"absolute right-2 top-2 bg-finora-primary hover:bg-finora-dark\">\n                Search\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Quick Help Options */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-12 text-center\">Get Help Now</h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"text-center p-6 bg-white rounded-lg shadow-lg hover:shadow-xl transition-shadow duration-300 border\">\n              <div className=\"w-16 h-16 bg-finora-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Phone className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Call Support</h3>\n              <p className=\"text-gray-600 mb-4\">Speak with a representative</p>\n              <p className=\"font-semibold text-finora-primary mb-4\">1-800-FINORA-1</p>\n              <Button onClick={() => window.open(\"tel:1-800-346-6721\", \"_self\")} className=\"bg-finora-primary hover:bg-finora-dark\">Call Now</Button>\n            </div>\n            \n            <div className=\"text-center p-6 bg-white rounded-lg shadow-lg hover:shadow-xl transition-shadow duration-300 border\">\n              <div className=\"w-16 h-16 bg-finora-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <MessageCircle className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Live Chat</h3>\n              <p className=\"text-gray-600 mb-4\">Chat with our support team</p>\n              <p className=\"text-sm text-gray-500 mb-4\">Available 24/7</p>\n              <Button onClick={() => alert(\"Live chat feature will be available soon. Please call 1-800-FINORA-1 for immediate assistance.\")} className=\"bg-finora-secondary hover:bg-finora-dark\">Start Chat</Button>\n            </div>\n            \n            <div className=\"text-center p-6 bg-white rounded-lg shadow-lg hover:shadow-xl transition-shadow duration-300 border\">\n              <div className=\"w-16 h-16 bg-finora-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Mail className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Email Support</h3>\n              <p className=\"text-gray-600 mb-4\">Send us a detailed message</p>\n              <p className=\"text-sm text-gray-500 mb-4\">24-48 hour response</p>\n              <Button onClick={() => window.open(\"mailto:support@finora.bank\", \"_self\")} className=\"bg-finora-accent hover:bg-finora-dark\">Send Email</Button>\n            </div>\n            \n            <div className=\"text-center p-6 bg-white rounded-lg shadow-lg hover:shadow-xl transition-shadow duration-300 border\">\n              <div className=\"w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Book className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Help Articles</h3>\n              <p className=\"text-gray-600 mb-4\">Browse our knowledge base</p>\n              <p className=\"text-sm text-gray-500 mb-4\">Step-by-step guides</p>\n              <Button onClick={() => setLocation(\"/services\")} className=\"bg-green-600 hover:bg-green-700\">Browse Articles</Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Help Categories */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-12 text-center\">Help Categories</h2>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {helpCategories.map((category, index) => (\n              <div key={index} className=\"bg-white rounded-lg shadow-lg p-8 hover:shadow-xl transition-shadow duration-300\">\n                <category.icon className=\"w-12 h-12 text-finora-primary mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-4\">{category.title}</h3>\n                <p className=\"text-gray-600 mb-6\">{category.description}</p>\n                <ul className=\"space-y-2 mb-6\">\n                  {category.topics.map((topic, topicIndex) => (\n                    <li key={topicIndex} className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-finora-primary rounded-full mr-3\"></div>\n                      <span className=\"text-gray-600\">{topic}</span>\n                    </li>\n                  ))}\n                </ul>\n                <Button variant=\"outline\" className=\"w-full border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white\">\n                  View Articles\n                </Button>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"py-16\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-12 text-center\">Frequently Asked Questions</h2>\n          \n          <div className=\"space-y-6\">\n            {faqData.map((faq, index) => (\n              <div key={index} className=\"bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-300\">\n                <div className=\"flex items-start\">\n                  <HelpCircle className=\"w-6 h-6 text-finora-primary mr-4 mt-1 flex-shrink-0\" />\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{faq.question}</h3>\n                    <p className=\"text-gray-600\">{faq.answer}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"text-center mt-12\">\n            <Button className=\"bg-finora-primary hover:bg-finora-dark\">\n              View All FAQs\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Resources Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-12 text-center\">Helpful Resources</h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"bg-white rounded-lg shadow-md p-6 text-center hover:shadow-lg transition-shadow duration-300\">\n              <Download className=\"w-12 h-12 text-finora-primary mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Mobile App</h3>\n              <p className=\"text-gray-600 mb-4\">Download our mobile banking app</p>\n              <Button variant=\"outline\" className=\"border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white\">\n                Download\n              </Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-md p-6 text-center hover:shadow-lg transition-shadow duration-300\">\n              <Book className=\"w-12 h-12 text-finora-secondary mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">User Guides</h3>\n              <p className=\"text-gray-600 mb-4\">Step-by-step tutorials</p>\n              <Button variant=\"outline\" className=\"border-finora-secondary text-finora-secondary hover:bg-finora-secondary hover:text-white\">\n                View Guides\n              </Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-md p-6 text-center hover:shadow-lg transition-shadow duration-300\">\n              <Shield className=\"w-12 h-12 text-finora-accent mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Security Center</h3>\n              <p className=\"text-gray-600 mb-4\">Learn about account security</p>\n              <Button variant=\"outline\" className=\"border-finora-accent text-finora-accent hover:bg-finora-accent hover:text-white\">\n                Learn More\n              </Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-md p-6 text-center hover:shadow-lg transition-shadow duration-300\">\n              <Building className=\"w-12 h-12 text-green-600 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Branch Locator</h3>\n              <p className=\"text-gray-600 mb-4\">Find branches and ATMs</p>\n              <Button variant=\"outline\" className=\"border-green-600 text-green-600 hover:bg-green-600 hover:text-white\">\n                Find Locations\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section className=\"py-16 bg-finora-primary\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center text-white\">\n          <h2 className=\"text-3xl font-bold mb-6\">Still Need Help?</h2>\n          <p className=\"text-xl mb-8\">Our customer service team is available 24/7 to assist you</p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button className=\"bg-white text-finora-primary hover:bg-gray-100 font-semibold\">\n              Call 1-800-FINORA-1\n            </Button>\n            <Button variant=\"outline\" className=\"border-white text-white hover:bg-white hover:text-finora-primary\">\n              Schedule Appointment\n            </Button>\n          </div>\n          \n          <div className=\"mt-8 pt-8 border-t border-white border-opacity-20\">\n            <p className=\"text-sm opacity-90\">\n              For emergencies outside business hours, please call our 24/7 fraud hotline or visit your nearest branch.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <p>&copy; 2025 Finora Bank. All rights reserved. Member FDIC.</p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":13654},"client/src/pages/investing.tsx":{"content":"import Navbar from \"@/components/ui/navbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Investing() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navbar showLogin={true} />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-finora-secondary to-finora-accent py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center text-white\">\n            <h1 className=\"text-5xl font-bold mb-6\">Smart Investing Solutions</h1>\n            <p className=\"text-xl mb-8\">Build and protect your wealth with our comprehensive investment services and expert guidance</p>\n            <Button className=\"bg-white text-finora-primary hover:bg-gray-100 px-8 py-3 text-lg\">\n              Start Investing Today\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Investment Products */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-4xl font-bold text-center mb-12\">Investment Products & Services</h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-16 h-16 bg-finora-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-chart-area text-white text-2xl\"></i>\n                </div>\n                <CardTitle className=\"text-center\">Mutual Funds</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"mb-4\">Diversified investment options from leading fund companies with professional management.</p>\n                <ul className=\"text-sm space-y-2 mb-6\">\n                  <li>✓ Broad market index funds</li>\n                  <li>✓ Sector-specific funds</li>\n                  <li>✓ International diversification</li>\n                  <li>✓ Low-cost options available</li>\n                </ul>\n                <Button variant=\"outline\" className=\"border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white\">\n                  Explore Funds\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-16 h-16 bg-finora-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-layer-group text-white text-2xl\"></i>\n                </div>\n                <CardTitle className=\"text-center\">ETFs & Stocks</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"mb-4\">Individual stocks and exchange-traded funds for direct market exposure and control.</p>\n                <ul className=\"text-sm space-y-2 mb-6\">\n                  <li>✓ Commission-free stock trades</li>\n                  <li>✓ Extensive ETF selection</li>\n                  <li>✓ Real-time market data</li>\n                  <li>✓ Advanced trading tools</li>\n                </ul>\n                <Button variant=\"outline\" className=\"border-finora-secondary text-finora-secondary hover:bg-finora-secondary hover:text-white\">\n                  Start Trading\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-16 h-16 bg-finora-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-umbrella text-white text-2xl\"></i>\n                </div>\n                <CardTitle className=\"text-center\">Retirement Planning</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"mb-4\">Tax-advantaged retirement accounts and planning services for long-term financial security.</p>\n                <ul className=\"text-sm space-y-2 mb-6\">\n                  <li>✓ Traditional & Roth IRAs</li>\n                  <li>✓ 401(k) rollovers</li>\n                  <li>✓ Retirement income strategies</li>\n                  <li>✓ Social Security optimization</li>\n                </ul>\n                <Button variant=\"outline\" className=\"border-finora-accent text-finora-accent hover:bg-finora-accent hover:text-white\">\n                  Plan Retirement\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Investment Philosophy */}\n      <section className=\"bg-gray-50 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-4xl font-bold mb-6\">Our Investment Philosophy</h2>\n              <p className=\"text-xl text-gray-600 mb-8\">\n                We believe in disciplined, long-term investing strategies that are \n                tailored to your individual risk tolerance and financial goals.\n              </p>\n              <div className=\"space-y-6\">\n                <div className=\"flex items-start\">\n                  <i className=\"fas fa-compass text-finora-primary text-2xl mr-4 mt-1\"></i>\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-2\">Goal-Based Investing</h4>\n                    <p className=\"text-gray-600\">Strategies aligned with your specific financial objectives</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start\">\n                  <i className=\"fas fa-balance-scale text-finora-primary text-2xl mr-4 mt-1\"></i>\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-2\">Risk Management</h4>\n                    <p className=\"text-gray-600\">Diversification and asset allocation to manage volatility</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start\">\n                  <i className=\"fas fa-chart-line text-finora-primary text-2xl mr-4 mt-1\"></i>\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-2\">Long-term Focus</h4>\n                    <p className=\"text-gray-600\">Patient capital approach for sustained growth</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div>\n              <img \n                src=\"https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Financial advisor reviewing investment portfolio\" \n                className=\"rounded-lg shadow-lg w-full h-auto\" \n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Advisory Services */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold mb-4\">Professional Advisory Services</h2>\n            <p className=\"text-xl text-gray-600\">\n              Work with our experienced investment professionals to create and manage your portfolio\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-finora-primary rounded-full flex items-center justify-center mx-auto mb-6\">\n                <i className=\"fas fa-user-tie text-white text-3xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">Personal Financial Advisors</h3>\n              <p className=\"text-gray-600 mb-6\">\n                Dedicated advisors who understand your unique financial situation and goals.\n              </p>\n              <ul className=\"text-sm space-y-2\">\n                <li>✓ One-on-one consultations</li>\n                <li>✓ Personalized investment strategies</li>\n                <li>✓ Ongoing portfolio monitoring</li>\n              </ul>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-finora-secondary rounded-full flex items-center justify-center mx-auto mb-6\">\n                <i className=\"fas fa-robot text-white text-3xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">Robo-Advisor Platform</h3>\n              <p className=\"text-gray-600 mb-6\">\n                Automated investing with low fees and professional portfolio management.\n              </p>\n              <ul className=\"text-sm space-y-2\">\n                <li>✓ Algorithm-driven rebalancing</li>\n                <li>✓ Tax-loss harvesting</li>\n                <li>✓ Low minimum investments</li>\n              </ul>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-finora-accent rounded-full flex items-center justify-center mx-auto mb-6\">\n                <i className=\"fas fa-graduation-cap text-white text-3xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">Investment Education</h3>\n              <p className=\"text-gray-600 mb-6\">\n                Educational resources and tools to help you make informed investment decisions.\n              </p>\n              <ul className=\"text-sm space-y-2\">\n                <li>✓ Market research and insights</li>\n                <li>✓ Investment webinars</li>\n                <li>✓ Portfolio analysis tools</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Market Insights */}\n      <section className=\"bg-finora-light py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold mb-4\">Market Insights & Research</h2>\n            <p className=\"text-xl text-gray-600\">\n              Stay informed with our latest market analysis and investment insights\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div>\n              <img \n                src=\"https://images.unsplash.com/photo-1590283603385-17ffb3a7f29f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Financial market data and charts\" \n                className=\"rounded-lg shadow-lg w-full h-auto\" \n              />\n            </div>\n            <div>\n              <h3 className=\"text-3xl font-bold mb-6\">Expert Market Analysis</h3>\n              <p className=\"text-lg text-gray-600 mb-6\">\n                Our research team provides regular market commentary, \n                economic outlooks, and investment recommendations.\n              </p>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center\">\n                  <i className=\"fas fa-newspaper text-finora-primary text-xl mr-3\"></i>\n                  <span>Weekly market updates and commentary</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <i className=\"fas fa-chart-bar text-finora-primary text-xl mr-3\"></i>\n                  <span>Quarterly economic and market outlook</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <i className=\"fas fa-lightbulb text-finora-primary text-xl mr-3\"></i>\n                  <span>Investment ideas and sector analysis</span>\n                </div>\n              </div>\n              <Button className=\"bg-finora-primary hover:bg-finora-dark text-white px-8 py-3 mt-6\">\n                Access Research\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":12057},"client/src/pages/personal.tsx":{"content":"import Navbar from \"@/components/ui/navbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport familyFinancialPlanning from \"@assets/generated_images/diverse_family_financial_planning_cece0fd4.png\";\nimport professionalOnlineBanking from \"@assets/generated_images/diverse_professional_online_banking_2a63fb70.png\";\n\nexport default function Personal() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navbar showLogin={true} />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-finora-primary to-finora-secondary py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center text-white\">\n            <h1 className=\"text-5xl font-bold mb-6\">Personal Banking Solutions</h1>\n            <p className=\"text-xl mb-8\">Everything you need to manage your money, reach your goals, and secure your future</p>\n            <Button className=\"bg-white text-finora-primary hover:bg-gray-100 px-8 py-3 text-lg\">\n              Open an Account Today\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Banking Products */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-4xl font-bold text-center mb-12\">Banking That Works For You</h2>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-16 h-16 bg-finora-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-university text-white text-2xl\"></i>\n                </div>\n                <CardTitle className=\"text-center\">Checking Accounts</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"mb-4\">Everyday banking made simple with no minimum balance requirements and online banking tools.</p>\n                <ul className=\"text-sm space-y-2 mb-6\">\n                  <li>✓ Mobile check deposit</li>\n                  <li>✓ Free online banking</li>\n                  <li>✓ Nationwide ATM network</li>\n                  <li>✓ Overdraft protection</li>\n                </ul>\n                <Button variant=\"outline\" className=\"border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white\">\n                  Learn More\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-16 h-16 bg-finora-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-piggy-bank text-white text-2xl\"></i>\n                </div>\n                <CardTitle className=\"text-center\">Savings & CDs</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"mb-4\">Grow your money with competitive rates and flexible terms that fit your financial goals.</p>\n                <ul className=\"text-sm space-y-2 mb-6\">\n                  <li>✓ High-yield savings accounts</li>\n                  <li>✓ Competitive CD rates</li>\n                  <li>✓ No monthly maintenance fees</li>\n                  <li>✓ Automatic savings plans</li>\n                </ul>\n                <Button variant=\"outline\" className=\"border-finora-secondary text-finora-secondary hover:bg-finora-secondary hover:text-white\">\n                  Start Saving\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-16 h-16 bg-finora-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-credit-card text-white text-2xl\"></i>\n                </div>\n                <CardTitle className=\"text-center\">Credit Cards</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"mb-4\">Choose from rewards, cashback, and low-interest credit cards designed for your lifestyle.</p>\n                <ul className=\"text-sm space-y-2 mb-6\">\n                  <li>✓ Rewards and cashback options</li>\n                  <li>✓ Low introductory rates</li>\n                  <li>✓ Fraud protection</li>\n                  <li>✓ Mobile payment compatibility</li>\n                </ul>\n                <Button variant=\"outline\" className=\"border-finora-accent text-finora-accent hover:bg-finora-accent hover:text-white\">\n                  Apply Now\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Loans Section */}\n      <section className=\"bg-gray-50 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-4xl font-bold mb-6\">Home & Personal Loans</h2>\n              <p className=\"text-xl text-gray-600 mb-8\">\n                Whether you're buying your first home or need funds for a major purchase, \n                our loan specialists are here to help you find the right solution.\n              </p>\n              <div className=\"space-y-4 mb-8\">\n                <div className=\"flex items-center\">\n                  <i className=\"fas fa-home text-finora-primary text-2xl mr-4\"></i>\n                  <span className=\"text-lg\">Mortgages & Home Equity Loans</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <i className=\"fas fa-car text-finora-primary text-2xl mr-4\"></i>\n                  <span className=\"text-lg\">Auto Loans with Competitive Rates</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <i className=\"fas fa-money-check-alt text-finora-primary text-2xl mr-4\"></i>\n                  <span className=\"text-lg\">Personal Loans for Any Purpose</span>\n                </div>\n              </div>\n              <Button className=\"bg-finora-primary hover:bg-finora-dark text-white px-8 py-3\">\n                Get Pre-Qualified\n              </Button>\n            </div>\n            <div>\n              <img \n                src={familyFinancialPlanning}\n                alt=\"Happy family in front of their new home\" \n                className=\"rounded-lg shadow-lg w-full h-auto\" \n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Digital Banking */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold mb-4\">Banking on Your Terms</h2>\n            <p className=\"text-xl text-gray-600\">\n              Experience the convenience of digital banking with our award-winning mobile app and online platform\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div>\n              <img \n                src={professionalOnlineBanking}\n                alt=\"Person using mobile banking app\" \n                className=\"rounded-lg shadow-lg mx-auto\" \n              />\n            </div>\n            <div>\n              <h3 className=\"text-3xl font-bold mb-6\">Award-Winning Mobile App</h3>\n              <div className=\"space-y-6\">\n                <div className=\"flex items-start\">\n                  <i className=\"fas fa-mobile-alt text-finora-primary text-2xl mr-4 mt-1\"></i>\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-2\">Mobile Check Deposit</h4>\n                    <p className=\"text-gray-600\">Deposit checks instantly by taking a photo</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start\">\n                  <i className=\"fas fa-bell text-finora-primary text-2xl mr-4 mt-1\"></i>\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-2\">Real-time Alerts</h4>\n                    <p className=\"text-gray-600\">Stay informed about your account activity</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start\">\n                  <i className=\"fas fa-shield-alt text-finora-primary text-2xl mr-4 mt-1\"></i>\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-2\">Advanced Security</h4>\n                    <p className=\"text-gray-600\">Biometric login and fraud monitoring</p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex space-x-4 mt-8\">\n                <img src=\"https://developer.apple.com/assets/elements/badges/download-on-the-app-store.svg\" alt=\"Download on App Store\" className=\"h-12\" />\n                <img src=\"https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png\" alt=\"Get it on Google Play\" className=\"h-12\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":9375},"client/src/pages/private-client.tsx":{"content":"import Navbar from \"@/components/ui/navbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function PrivateClient() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navbar showLogin={true} />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-finora-accent to-finora-secondary py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center text-white\">\n            <h1 className=\"text-5xl font-bold mb-6\">Private Client Services</h1>\n            <p className=\"text-xl mb-8\">Exclusive wealth management and private banking for high-net-worth individuals and families</p>\n            <Button className=\"bg-white text-finora-primary hover:bg-gray-100 px-8 py-3 text-lg\">\n              Schedule Consultation\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Wealth Management Services */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-4xl font-bold text-center mb-12\">Comprehensive Wealth Solutions</h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-16 h-16 bg-finora-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-chart-pie text-white text-2xl\"></i>\n                </div>\n                <CardTitle className=\"text-center\">Investment Management</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"mb-4\">Personalized investment strategies tailored to your financial goals and risk tolerance.</p>\n                <ul className=\"text-sm space-y-2 mb-6\">\n                  <li>✓ Discretionary portfolio management</li>\n                  <li>✓ Alternative investments</li>\n                  <li>✓ ESG investment options</li>\n                  <li>✓ Performance reporting</li>\n                </ul>\n                <Button variant=\"outline\" className=\"border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white\">\n                  Learn More\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-16 h-16 bg-finora-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-balance-scale text-white text-2xl\"></i>\n                </div>\n                <CardTitle className=\"text-center\">Estate Planning</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"mb-4\">Strategic estate planning and wealth transfer solutions for multi-generational wealth preservation.</p>\n                <ul className=\"text-sm space-y-2 mb-6\">\n                  <li>✓ Trust and estate services</li>\n                  <li>✓ Tax optimization strategies</li>\n                  <li>✓ Charitable giving solutions</li>\n                  <li>✓ Family governance consulting</li>\n                </ul>\n                <Button variant=\"outline\" className=\"border-finora-secondary text-finora-secondary hover:bg-finora-secondary hover:text-white\">\n                  Get Started\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-16 h-16 bg-finora-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-handshake text-white text-2xl\"></i>\n                </div>\n                <CardTitle className=\"text-center\">Private Banking</CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"mb-4\">Exclusive banking services with dedicated relationship managers and concierge support.</p>\n                <ul className=\"text-sm space-y-2 mb-6\">\n                  <li>✓ Dedicated relationship manager</li>\n                  <li>✓ Priority customer service</li>\n                  <li>✓ Exclusive event invitations</li>\n                  <li>✓ Global banking access</li>\n                </ul>\n                <Button variant=\"outline\" className=\"border-finora-accent text-finora-accent hover:bg-finora-accent hover:text-white\">\n                  Contact Us\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Personalized Service */}\n      <section className=\"bg-gray-50 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-4xl font-bold mb-6\">Personalized Service Excellence</h2>\n              <p className=\"text-xl text-gray-600 mb-8\">\n                Our private client team consists of seasoned professionals dedicated \n                to understanding and serving your unique financial needs.\n              </p>\n              <div className=\"space-y-6\">\n                <div className=\"flex items-start\">\n                  <i className=\"fas fa-user-tie text-finora-primary text-2xl mr-4 mt-1\"></i>\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-2\">Dedicated Relationship Manager</h4>\n                    <p className=\"text-gray-600\">Your personal advisor who knows your goals</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start\">\n                  <i className=\"fas fa-clock text-finora-primary text-2xl mr-4 mt-1\"></i>\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-2\">24/7 Concierge Service</h4>\n                    <p className=\"text-gray-600\">Round-the-clock support for urgent needs</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start\">\n                  <i className=\"fas fa-globe text-finora-primary text-2xl mr-4 mt-1\"></i>\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-2\">Global Network Access</h4>\n                    <p className=\"text-gray-600\">Worldwide banking privileges and services</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div>\n              <img \n                src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Professional wealth advisor consulting with client\" \n                className=\"rounded-lg shadow-lg w-full h-auto\" \n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Lifestyle Services */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold mb-4\">Lifestyle & Concierge Services</h2>\n            <p className=\"text-xl text-gray-600\">\n              Beyond banking - comprehensive lifestyle support for our valued clients\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-finora-primary rounded-full flex items-center justify-center mx-auto mb-6\">\n                <i className=\"fas fa-plane text-white text-3xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">Travel Services</h3>\n              <p className=\"text-gray-600\">\n                Luxury travel planning, private jet arrangements, \n                and exclusive resort access.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-finora-secondary rounded-full flex items-center justify-center mx-auto mb-6\">\n                <i className=\"fas fa-calendar text-white text-3xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">Event Planning</h3>\n              <p className=\"text-gray-600\">\n                Private event coordination, exclusive venue access, \n                and entertainment booking services.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-finora-accent rounded-full flex items-center justify-center mx-auto mb-6\">\n                <i className=\"fas fa-graduation-cap text-white text-3xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">Education Services</h3>\n              <p className=\"text-gray-600\">\n                Private school placement, university admissions consulting, \n                and educational funding strategies.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-finora-primary rounded-full flex items-center justify-center mx-auto mb-6\">\n                <i className=\"fas fa-heart text-white text-3xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">Philanthropy</h3>\n              <p className=\"text-gray-600\">\n                Charitable foundation setup, impact investing, \n                and philanthropic strategy development.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Exclusive Membership */}\n      <section className=\"bg-finora-primary py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center text-white\">\n          <h2 className=\"text-4xl font-bold mb-6\">Exclusive Client Benefits</h2>\n          <p className=\"text-xl mb-12\">\n            Join our exclusive community of distinguished clients\n          </p>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div>\n              <i className=\"fas fa-star text-4xl mb-4\"></i>\n              <h3 className=\"text-xl font-semibold mb-2\">Exclusive Events</h3>\n              <p>Private art exhibitions, wine tastings, and cultural events</p>\n            </div>\n            <div>\n              <i className=\"fas fa-golf-ball text-4xl mb-4\"></i>\n              <h3 className=\"text-xl font-semibold mb-2\">Premier Golf Access</h3>\n              <p>Access to world-class golf courses and private clubs</p>\n            </div>\n            <div>\n              <i className=\"fas fa-theater-masks text-4xl mb-4\"></i>\n              <h3 className=\"text-xl font-semibold mb-2\">Cultural Privileges</h3>\n              <p>VIP access to theaters, museums, and cultural institutions</p>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":11079},"client/src/pages/products.tsx":{"content":"import Navbar from \"@/components/ui/navbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { CreditCard, Building, PiggyBank, TrendingUp, Shield, Users } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Products() {\n  const [location, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navbar showLogin={true} />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-finora-primary to-finora-dark py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center text-white\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">Banking Products</h1>\n          <p className=\"text-xl mb-8\">Discover the full range of Finora banking products designed for your financial success</p>\n        </div>\n      </section>\n\n      {/* Personal Banking Products */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-12 text-center\">Personal Banking</h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"bg-white rounded-lg shadow-lg p-8 hover:shadow-xl transition-shadow duration-300\">\n              <Building className=\"w-12 h-12 text-finora-primary mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-4\">Checking Accounts</h3>\n              <p className=\"text-gray-600 mb-6\">Flexible checking accounts with online banking, mobile deposit, and fee-free ATM access.</p>\n              <ul className=\"text-sm text-gray-600 mb-6 space-y-2\">\n                <li>• No monthly maintenance fees</li>\n                <li>• Mobile check deposit</li>\n                <li>• Debit card included</li>\n                <li>• Online & mobile banking</li>\n              </ul>\n              <Button onClick={() => setLocation(\"/dashboard\")} className=\"w-full bg-finora-primary hover:bg-finora-dark\">Learn More</Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-lg p-8 hover:shadow-xl transition-shadow duration-300\">\n              <PiggyBank className=\"w-12 h-12 text-finora-secondary mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-4\">Savings Accounts</h3>\n              <p className=\"text-gray-600 mb-6\">High-yield savings accounts to help your money grow with competitive interest rates.</p>\n              <ul className=\"text-sm text-gray-600 mb-6 space-y-2\">\n                <li>• High interest rates</li>\n                <li>• No minimum balance</li>\n                <li>• Automatic savings programs</li>\n                <li>• FDIC insured</li>\n              </ul>\n              <Button onClick={() => setLocation(\"/dashboard\")} className=\"w-full bg-finora-secondary hover:bg-finora-dark\">Open Account</Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-lg p-8 hover:shadow-xl transition-shadow duration-300\">\n              <CreditCard className=\"w-12 h-12 text-finora-accent mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-4\">Credit Cards</h3>\n              <p className=\"text-gray-600 mb-6\">Rewarding credit cards with cashback, travel rewards, and low interest rates.</p>\n              <ul className=\"text-sm text-gray-600 mb-6 space-y-2\">\n                <li>• Up to 5% cashback</li>\n                <li>• No annual fee options</li>\n                <li>• Travel rewards programs</li>\n                <li>• Fraud protection</li>\n              </ul>\n              <Button onClick={() => setLocation(\"/dashboard\")} className=\"w-full bg-finora-accent hover:bg-finora-dark\">Apply Now</Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Business Banking Products */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-12 text-center\">Business Banking</h2>\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div className=\"bg-white rounded-lg shadow-lg p-8\">\n              <Users className=\"w-12 h-12 text-finora-primary mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-4\">Business Checking</h3>\n              <p className=\"text-gray-600 mb-6\">Streamlined business checking accounts with advanced online banking features.</p>\n              <Button onClick={() => setLocation(\"/business\")} className=\"bg-finora-primary hover:bg-finora-dark\">Learn More</Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-lg p-8\">\n              <TrendingUp className=\"w-12 h-12 text-finora-secondary mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-4\">Business Loans</h3>\n              <p className=\"text-gray-600 mb-6\">Flexible financing solutions to help your business grow and succeed.</p>\n              <Button onClick={() => setLocation(\"/business\")} className=\"bg-finora-secondary hover:bg-finora-dark\">Apply Today</Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Investment Products */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-12 text-center\">Investment & Wealth Management</h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"bg-white rounded-lg shadow-lg p-8 text-center\">\n              <Shield className=\"w-12 h-12 text-finora-primary mb-4 mx-auto\" />\n              <h3 className=\"text-xl font-semibold mb-4\">CDs & Money Market</h3>\n              <p className=\"text-gray-600 mb-4\">Secure your savings with competitive rates on certificates of deposit and money market accounts.</p>\n              <Button onClick={() => setLocation(\"/investing\")} variant=\"outline\" className=\"border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white\">\n                View Rates\n              </Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-lg p-8 text-center\">\n              <TrendingUp className=\"w-12 h-12 text-finora-secondary mb-4 mx-auto\" />\n              <h3 className=\"text-xl font-semibold mb-4\">Investment Services</h3>\n              <p className=\"text-gray-600 mb-4\">Professional investment management and financial planning services for your future.</p>\n              <Button onClick={() => setLocation(\"/investing\")} variant=\"outline\" className=\"border-finora-secondary text-finora-secondary hover:bg-finora-secondary hover:text-white\">\n                Get Started\n              </Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-lg p-8 text-center\">\n              <Building className=\"w-12 h-12 text-finora-accent mb-4 mx-auto\" />\n              <h3 className=\"text-xl font-semibold mb-4\">Retirement Planning</h3>\n              <p className=\"text-gray-600 mb-4\">Plan for your retirement with IRAs, 401(k) rollovers, and retirement planning services.</p>\n              <Button onClick={() => setLocation(\"/investing\")} variant=\"outline\" className=\"border-finora-accent text-finora-accent hover:bg-finora-accent hover:text-white\">\n                Plan Now\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <p>&copy; 2025 Finora Bank. All rights reserved. Member FDIC.</p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":7677},"client/src/pages/promotions.tsx":{"content":"import Navbar from \"@/components/ui/navbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Gift, Clock, Star, DollarSign } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Promotions() {\n  const [location, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navbar showLogin={true} />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-green-600 to-green-800 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center text-white\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">Current Promotions</h1>\n          <p className=\"text-xl mb-8\">Take advantage of our limited-time offers and special banking promotions</p>\n        </div>\n      </section>\n\n      {/* Featured Promotions */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-12 text-center\">Featured Offers</h2>\n          \n          <div className=\"grid lg:grid-cols-2 gap-8 mb-12\">\n            <div className=\"bg-gradient-to-r from-finora-primary to-finora-dark rounded-lg shadow-xl p-8 text-white relative overflow-hidden\">\n              <div className=\"absolute top-4 right-4\">\n                <Gift className=\"w-8 h-8 text-white opacity-20\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-4\">New Account Bonus</h3>\n              <p className=\"text-lg mb-6\">Open a new checking account and get $200 when you set up direct deposit</p>\n              <div className=\"flex items-center mb-6\">\n                <Clock className=\"w-5 h-5 mr-2\" />\n                <span className=\"text-sm\">Offer expires December 31, 2025</span>\n              </div>\n              <Button onClick={() => setLocation(\"/dashboard\")} className=\"bg-white text-finora-primary hover:bg-gray-100 font-semibold\">\n                Open Account\n              </Button>\n            </div>\n            \n            <div className=\"bg-gradient-to-r from-green-600 to-green-800 rounded-lg shadow-xl p-8 text-white relative overflow-hidden\">\n              <div className=\"absolute top-4 right-4\">\n                <Star className=\"w-8 h-8 text-white opacity-20\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-4\">High-Yield Savings</h3>\n              <p className=\"text-lg mb-6\">Earn up to 4.50% APY on your savings with our promotional rate</p>\n              <div className=\"flex items-center mb-6\">\n                <Clock className=\"w-5 h-5 mr-2\" />\n                <span className=\"text-sm\">Rate guaranteed for first 12 months</span>\n              </div>\n              <Button onClick={() => setLocation(\"/dashboard\")} className=\"bg-white text-green-700 hover:bg-gray-100 font-semibold\">\n                Start Saving\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* All Promotions */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-12 text-center\">All Current Offers</h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <div className=\"bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-300\">\n              <div className=\"flex items-center mb-4\">\n                <DollarSign className=\"w-8 h-8 text-finora-primary mr-3\" />\n                <h3 className=\"text-xl font-semibold\">Credit Card Rewards</h3>\n              </div>\n              <p className=\"text-gray-600 mb-4\">Get 5% cashback on all purchases for the first 3 months</p>\n              <p className=\"text-sm text-gray-500 mb-4\">Valid until: March 31, 2025</p>\n              <Button onClick={() => setLocation(\"/dashboard\")} variant=\"outline\" className=\"w-full border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white\">\n                Apply Now\n              </Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-300\">\n              <div className=\"flex items-center mb-4\">\n                <Gift className=\"w-8 h-8 text-finora-secondary mr-3\" />\n                <h3 className=\"text-xl font-semibold\">Student Account Special</h3>\n              </div>\n              <p className=\"text-gray-600 mb-4\">Free checking for students with no monthly fees or minimum balance</p>\n              <p className=\"text-sm text-gray-500 mb-4\">Valid with student ID</p>\n              <Button onClick={() => setLocation(\"/help\")} variant=\"outline\" className=\"w-full border-finora-secondary text-finora-secondary hover:bg-finora-secondary hover:text-white\">\n                Learn More\n              </Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-300\">\n              <div className=\"flex items-center mb-4\">\n                <Star className=\"w-8 h-8 text-finora-accent mr-3\" />\n                <h3 className=\"text-xl font-semibold\">Business Banking Deal</h3>\n              </div>\n              <p className=\"text-gray-600 mb-4\">No monthly fees for 6 months on new business checking accounts</p>\n              <p className=\"text-sm text-gray-500 mb-4\">Valid until: June 30, 2025</p>\n              <Button onClick={() => setLocation(\"/business\")} variant=\"outline\" className=\"w-full border-finora-accent text-finora-accent hover:bg-finora-accent hover:text-white\">\n                Open Account\n              </Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-300\">\n              <div className=\"flex items-center mb-4\">\n                <DollarSign className=\"w-8 h-8 text-green-600 mr-3\" />\n                <h3 className=\"text-xl font-semibold\">Mortgage Rate Special</h3>\n              </div>\n              <p className=\"text-gray-600 mb-4\">Get 0.25% off your mortgage rate for first-time homebuyers</p>\n              <p className=\"text-sm text-gray-500 mb-4\">Subject to credit approval</p>\n              <Button onClick={() => setLocation(\"/help\")} variant=\"outline\" className=\"w-full border-green-600 text-green-600 hover:bg-green-600 hover:text-white\">\n                Get Quote\n              </Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-300\">\n              <div className=\"flex items-center mb-4\">\n                <Gift className=\"w-8 h-8 text-purple-600 mr-3\" />\n                <h3 className=\"text-xl font-semibold\">Refer a Friend</h3>\n              </div>\n              <p className=\"text-gray-600 mb-4\">Earn $50 for each friend you refer who opens an account</p>\n              <p className=\"text-sm text-gray-500 mb-4\">No limit on referrals</p>\n              <Button onClick={() => setLocation(\"/dashboard\")} variant=\"outline\" className=\"w-full border-purple-600 text-purple-600 hover:bg-purple-600 hover:text-white\">\n                Refer Now\n              </Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-300\">\n              <div className=\"flex items-center mb-4\">\n                <Star className=\"w-8 h-8 text-orange-600 mr-3\" />\n                <h3 className=\"text-xl font-semibold\">Mobile Banking Bonus</h3>\n              </div>\n              <p className=\"text-gray-600 mb-4\">Get $25 when you sign up for mobile banking and complete 5 transactions</p>\n              <p className=\"text-sm text-gray-500 mb-4\">New customers only</p>\n              <Button onClick={() => setLocation(\"/dashboard\")} variant=\"outline\" className=\"w-full border-orange-600 text-orange-600 hover:bg-orange-600 hover:text-white\">\n                Get Started\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Terms and Conditions */}\n      <section className=\"py-12 bg-gray-100\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h3 className=\"text-2xl font-bold text-gray-900 mb-6 text-center\">Important Information</h3>\n          <div className=\"bg-white rounded-lg p-8 shadow-sm\">\n            <p className=\"text-sm text-gray-600 mb-4\">\n              <strong>Terms and Conditions Apply:</strong> All promotional offers are subject to approval and may be modified or withdrawn at any time. Account opening bonuses require qualifying activities and may take 60-90 days to post to your account.\n            </p>\n            <p className=\"text-sm text-gray-600 mb-4\">\n              Interest rates are variable and subject to change. Fees may apply for certain services. Please consult with a Finora representative for complete terms and conditions.\n            </p>\n            <p className=\"text-sm text-gray-600\">\n              Member FDIC. Equal Housing Lender. All deposits are insured up to applicable limits.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <p>&copy; 2025 Finora Bank. All rights reserved. Member FDIC.</p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":9467},"client/src/pages/services.tsx":{"content":"import Navbar from \"@/components/ui/navbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Phone, MessageCircle, MapPin, Clock, Shield, Headphones, CreditCard, Building, Users, Calculator } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Services() {\n  const [location, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navbar showLogin={true} />\n      \n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-finora-secondary to-finora-primary py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center text-white\">\n          <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">Banking Services</h1>\n          <p className=\"text-xl mb-8\">Comprehensive financial services designed to meet all your banking needs</p>\n        </div>\n      </section>\n\n      {/* Customer Support Services */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-12 text-center\">Customer Support</h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"text-center p-6 bg-white rounded-lg shadow-lg hover:shadow-xl transition-shadow duration-300\">\n              <div className=\"w-16 h-16 bg-finora-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Phone className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">24/7 Phone Support</h3>\n              <p className=\"text-gray-600 mb-4\">Call us anytime at 1-800-FINORA-1</p>\n              <Button onClick={() => window.open(\"tel:1-800-346-6721\", \"_self\")} className=\"bg-finora-primary hover:bg-finora-dark\">Call Now</Button>\n            </div>\n            \n            <div className=\"text-center p-6 bg-white rounded-lg shadow-lg hover:shadow-xl transition-shadow duration-300\">\n              <div className=\"w-16 h-16 bg-finora-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <MessageCircle className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Live Chat</h3>\n              <p className=\"text-gray-600 mb-4\">Chat with our support team online</p>\n              <Button onClick={() => setLocation(\"/help\")} className=\"bg-finora-secondary hover:bg-finora-dark\">Start Chat</Button>\n            </div>\n            \n            <div className=\"text-center p-6 bg-white rounded-lg shadow-lg hover:shadow-xl transition-shadow duration-300\">\n              <div className=\"w-16 h-16 bg-finora-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n                <MapPin className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Branch Locator</h3>\n              <p className=\"text-gray-600 mb-4\">Find the nearest Finora branch</p>\n              <Button onClick={() => setLocation(\"/find-branch\")} className=\"bg-finora-accent hover:bg-finora-dark\">Find Branch</Button>\n            </div>\n            \n            <div className=\"text-center p-6 bg-white rounded-lg shadow-lg hover:shadow-xl transition-shadow duration-300\">\n              <div className=\"w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Clock className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Appointment Booking</h3>\n              <p className=\"text-gray-600 mb-4\">Schedule a meeting with our experts</p>\n              <Button onClick={() => setLocation(\"/help\")} className=\"bg-green-600 hover:bg-green-700\">Book Now</Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Digital Services */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-12 text-center\">Digital Banking Services</h2>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"bg-white rounded-lg shadow-lg p-8 hover:shadow-xl transition-shadow duration-300\">\n              <Shield className=\"w-12 h-12 text-finora-primary mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-4\">Online Banking</h3>\n              <p className=\"text-gray-600 mb-6\">Secure online access to your accounts 24/7 with advanced security features.</p>\n              <ul className=\"text-sm text-gray-600 mb-6 space-y-2\">\n                <li>• Account management</li>\n                <li>• Bill pay and transfers</li>\n                <li>• Mobile check deposit</li>\n                <li>• Transaction history</li>\n              </ul>\n              <Button className=\"w-full bg-finora-primary hover:bg-finora-dark\">Access Online</Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-lg p-8 hover:shadow-xl transition-shadow duration-300\">\n              <CreditCard className=\"w-12 h-12 text-finora-secondary mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-4\">Card Services</h3>\n              <p className=\"text-gray-600 mb-6\">Complete card management services including activation, replacement, and fraud protection.</p>\n              <ul className=\"text-sm text-gray-600 mb-6 space-y-2\">\n                <li>• Card activation</li>\n                <li>• Lost/stolen reporting</li>\n                <li>• PIN changes</li>\n                <li>• Fraud monitoring</li>\n              </ul>\n              <Button className=\"w-full bg-finora-secondary hover:bg-finora-dark\">Manage Cards</Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-lg p-8 hover:shadow-xl transition-shadow duration-300\">\n              <Building className=\"w-12 h-12 text-finora-accent mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-4\">Account Services</h3>\n              <p className=\"text-gray-600 mb-6\">Comprehensive account services including statements, alerts, and account updates.</p>\n              <ul className=\"text-sm text-gray-600 mb-6 space-y-2\">\n                <li>• eStatements</li>\n                <li>• Account alerts</li>\n                <li>• Direct deposit setup</li>\n                <li>• Overdraft protection</li>\n              </ul>\n              <Button className=\"w-full bg-finora-accent hover:bg-finora-dark\">Account Settings</Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Specialized Services */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-12 text-center\">Specialized Services</h2>\n          \n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div className=\"bg-white rounded-lg shadow-lg p-8 hover:shadow-xl transition-shadow duration-300\">\n              <Users className=\"w-12 h-12 text-finora-primary mb-4\" />\n              <h3 className=\"text-2xl font-semibold mb-4\">Wealth Management</h3>\n              <p className=\"text-gray-600 mb-6\">Personal financial planning and investment management services for high-net-worth individuals.</p>\n              <div className=\"space-y-2 mb-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-finora-primary rounded-full mr-3\"></div>\n                  <span className=\"text-gray-600\">Investment portfolio management</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-finora-primary rounded-full mr-3\"></div>\n                  <span className=\"text-gray-600\">Retirement planning</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-finora-primary rounded-full mr-3\"></div>\n                  <span className=\"text-gray-600\">Estate planning</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-finora-primary rounded-full mr-3\"></div>\n                  <span className=\"text-gray-600\">Tax planning strategies</span>\n                </div>\n              </div>\n              <Button className=\"bg-finora-primary hover:bg-finora-dark\">Schedule Consultation</Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-lg p-8 hover:shadow-xl transition-shadow duration-300\">\n              <Calculator className=\"w-12 h-12 text-finora-secondary mb-4\" />\n              <h3 className=\"text-2xl font-semibold mb-4\">Business Solutions</h3>\n              <p className=\"text-gray-600 mb-6\">Comprehensive business banking services including cash management, payroll, and commercial lending.</p>\n              <div className=\"space-y-2 mb-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-finora-secondary rounded-full mr-3\"></div>\n                  <span className=\"text-gray-600\">Cash management services</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-finora-secondary rounded-full mr-3\"></div>\n                  <span className=\"text-gray-600\">Payroll processing</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-finora-secondary rounded-full mr-3\"></div>\n                  <span className=\"text-gray-600\">Commercial lending</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-finora-secondary rounded-full mr-3\"></div>\n                  <span className=\"text-gray-600\">Treasury management</span>\n                </div>\n              </div>\n              <Button className=\"bg-finora-secondary hover:bg-finora-dark\">Learn More</Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Information */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-8\">Contact Information</h2>\n          \n          <div className=\"grid md:grid-cols-3 gap-8 mb-12\">\n            <div>\n              <Phone className=\"w-8 h-8 text-finora-primary mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Customer Service</h3>\n              <p className=\"text-gray-600\">1-800-FINORA-1</p>\n              <p className=\"text-sm text-gray-500\">Available 24/7</p>\n            </div>\n            \n            <div>\n              <Headphones className=\"w-8 h-8 text-finora-secondary mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Technical Support</h3>\n              <p className=\"text-gray-600\">1-800-FINORA-2</p>\n              <p className=\"text-sm text-gray-500\">Mon-Fri 8AM-8PM</p>\n            </div>\n            \n            <div>\n              <MessageCircle className=\"w-8 h-8 text-finora-accent mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Live Chat</h3>\n              <p className=\"text-gray-600\">Available online</p>\n              <p className=\"text-sm text-gray-500\">24/7 Support</p>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg p-8 shadow-lg\">\n            <h3 className=\"text-xl font-semibold mb-4\">Need Help?</h3>\n            <p className=\"text-gray-600 mb-6\">Our customer service team is here to help you with any questions or concerns.</p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button className=\"bg-finora-primary hover:bg-finora-dark\">Contact Support</Button>\n              <Button variant=\"outline\" className=\"border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white\">\n                Schedule Appointment\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <p>&copy; 2025 Finora Bank. All rights reserved. Member FDIC.</p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":12459},"client/src/components/ui/enhanced-hero-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\nimport personalFinancialPlanning from \"@assets/generated_images/diverse_personal_financial_planning_a89c4526.png\";\nimport professionalOnlineBanking from \"@assets/generated_images/diverse_professional_online_banking_2a63fb70.png\";\nimport familyFinancialPlanning from \"@assets/generated_images/diverse_family_financial_planning_cece0fd4.png\";\n\nconst heroSlides = [\n  {\n    image: personalFinancialPlanning,\n    title: \"Banking That Grows With You\",\n    subtitle: \"Experience the future of financial services with Finora's innovative banking solutions\",\n    cta: \"Start Your Journey\"\n  },\n  {\n    image: professionalOnlineBanking,\n    title: \"Invest in Your Tomorrow\",\n    subtitle: \"Build wealth with our comprehensive investment and wealth management services\",\n    cta: \"Explore Investing\"\n  },\n  {\n    image: familyFinancialPlanning,\n    title: \"Business Banking Excellence\",\n    subtitle: \"Power your business forward with tailored commercial banking solutions\",\n    cta: \"Grow Your Business\"\n  }\n];\n\nexport default function EnhancedHeroSection() {\n  const [currentSlide, setCurrentSlide] = useState(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentSlide((prev) => (prev + 1) % heroSlides.length);\n    }, 5000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <section className=\"relative h-screen flex items-center justify-center overflow-hidden\">\n      {/* Background Slideshow */}\n      <div className=\"absolute inset-0 z-0\">\n        {heroSlides.map((slide, index) => (\n          <div\n            key={index}\n            className={`absolute inset-0 transition-opacity duration-1000 ${\n              index === currentSlide ? 'opacity-100' : 'opacity-0'\n            }`}\n          >\n            <img\n              src={slide.image}\n              alt={`Hero slide ${index + 1}`}\n              className=\"w-full h-full object-cover\"\n            />\n            <div className=\"absolute inset-0 bg-black bg-opacity-40\"></div>\n          </div>\n        ))}\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 text-center text-white max-w-4xl mx-auto px-4\">\n        <h1 className=\"text-5xl md:text-7xl font-bold mb-6 animate-fade-in\">\n          {heroSlides[currentSlide].title}\n        </h1>\n        <p className=\"text-xl md:text-2xl mb-8 animate-slide-up\">\n          {heroSlides[currentSlide].subtitle}\n        </p>\n        <Button \n          size=\"lg\"\n          className=\"bg-finora-primary text-white hover:bg-finora-dark px-12 py-4 text-lg font-semibold transform hover:scale-105 transition-transform duration-200\"\n          data-testid=\"button-hero-cta\"\n        >\n          {heroSlides[currentSlide].cta} →\n        </Button>\n      </div>\n\n      {/* Slide Indicators */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-3 z-10\">\n        {heroSlides.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => setCurrentSlide(index)}\n            className={`w-3 h-3 rounded-full transition-all duration-300 ${\n              index === currentSlide \n                ? 'bg-white scale-125' \n                : 'bg-white bg-opacity-50 hover:bg-opacity-75'\n            }`}\n          />\n        ))}\n      </div>\n\n      {/* Video Background Alternative (commented for now) */}\n      {/* \n      <div className=\"absolute inset-0 z-0\">\n        <video\n          autoPlay\n          muted\n          loop\n          playsInline\n          className=\"w-full h-full object-cover\"\n        >\n          <source src=\"/videos/banking-hero.mp4\" type=\"video/mp4\" />\n        </video>\n        <div className=\"absolute inset-0 bg-black bg-opacity-30\"></div>\n      </div>\n      */}\n\n      {/* Floating Elements */}\n      <div className=\"absolute top-1/4 left-1/4 w-20 h-20 bg-finora-accent rounded-full opacity-20 animate-pulse-slow hidden lg:block\"></div>\n      <div className=\"absolute bottom-1/3 right-1/3 w-16 h-16 bg-finora-secondary rounded-full opacity-30 animate-pulse-slow hidden lg:block\"></div>\n      <div className=\"absolute top-1/3 right-1/4 w-12 h-12 bg-finora-primary rounded-full opacity-25 animate-pulse-slow hidden lg:block\"></div>\n    </section>\n  );\n}","size_bytes":4273},"client/src/components/ui/hero-slider.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport modernBankInterior from \"@assets/generated_images/modern_diverse_bank_interior_bcd98c1b.png\";\nimport digitalBankingTeam from \"@assets/generated_images/diverse_digital_banking_team_89132ea5.png\";\nimport investmentConsulting from \"@assets/generated_images/diverse_investment_consulting_meeting_a8d646d1.png\";\nimport businessBankingMeeting from \"@assets/generated_images/diverse_business_banking_meeting_a56d3a4b.png\";\nimport personalFinancialPlanning from \"@assets/generated_images/diverse_personal_financial_planning_a89c4526.png\";\nimport mobileBankingApp from \"@assets/generated_images/mobile_banking_app_professional_e2997bac.png\";\nimport customerService from \"@assets/generated_images/diverse_bank_customer_service_837f286b.png\";\n\nconst heroSlides = [\n  {\n    image: modernBankInterior,\n    title: \"Global Deposit Protection\",\n    subtitle: \"Your deposits are protected with comprehensive insurance coverage, giving you peace of mind with every transaction.\",\n    buttonText: \"KNOW MORE\"\n  },\n  {\n    image: digitalBankingTeam,\n    title: \"Digital Banking Excellence\",\n    subtitle: \"Experience the future of banking with our innovative digital solutions and 24/7 online services.\",\n    buttonText: \"GET STARTED\"\n  },\n  {\n    image: investmentConsulting,\n    title: \"Investment Opportunities\",\n    subtitle: \"Grow your wealth with our comprehensive investment services and expert financial guidance.\",\n    buttonText: \"INVEST NOW\"\n  },\n  {\n    image: businessBankingMeeting,\n    title: \"Business Banking Solutions\",\n    subtitle: \"Power your business forward with tailored commercial banking solutions and expert support.\",\n    buttonText: \"LEARN MORE\"\n  },\n  {\n    image: personalFinancialPlanning,\n    title: \"Personal Financial Planning\",\n    subtitle: \"Secure your financial future with our personalized banking services and wealth management solutions.\",\n    buttonText: \"PLAN TODAY\"\n  },\n  {\n    image: mobileBankingApp,\n    title: \"Mobile Banking App\",\n    subtitle: \"Bank anywhere, anytime with our award-winning mobile app featuring advanced security and convenience.\",\n    buttonText: \"DOWNLOAD NOW\"\n  },\n  {\n    image: customerService,\n    title: \"Exceptional Customer Service\",\n    subtitle: \"Experience personalized banking with our dedicated customer support team available 24/7.\",\n    buttonText: \"CONTACT US\"\n  }\n];\n\nexport default function HeroSlider() {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [location, setLocation] = useLocation();\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentSlide((prev) => (prev + 1) % heroSlides.length);\n    }, 5000); // Change slide every 5 seconds\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const nextSlide = () => {\n    setCurrentSlide((prev) => (prev + 1) % heroSlides.length);\n  };\n\n  const prevSlide = () => {\n    setCurrentSlide((prev) => (prev - 1 + heroSlides.length) % heroSlides.length);\n  };\n\n  const goToSlide = (index: number) => {\n    setCurrentSlide(index);\n  };\n\n  const handleCTAClick = () => {\n    const slide = heroSlides[currentSlide];\n    switch (slide.buttonText) {\n      case \"KNOW MORE\":\n        setLocation(\"/services\");\n        break;\n      case \"GET STARTED\":\n        setLocation(\"/products\");\n        break;\n      case \"INVEST NOW\":\n        setLocation(\"/investing\");\n        break;\n      case \"LEARN MORE\":\n        setLocation(\"/business\");\n        break;\n      case \"PLAN TODAY\":\n        setLocation(\"/personal\");\n        break;\n      case \"DOWNLOAD NOW\":\n        window.open(\"https://apps.apple.com/app/finora-mobile\", \"_blank\");\n        break;\n      case \"CONTACT US\":\n        setLocation(\"/help\");\n        break;\n      default:\n        setLocation(\"/products\");\n    }\n  };\n\n  return (\n    <section className=\"relative h-96 overflow-hidden\">\n      {/* Background Images */}\n      {heroSlides.map((slide, index) => (\n        <div\n          key={index}\n          className={`absolute inset-0 bg-cover bg-center bg-no-repeat transition-opacity duration-1000 ${\n            index === currentSlide ? 'opacity-100' : 'opacity-0'\n          }`}\n          style={{\n            backgroundImage: `url('${slide.image}')`\n          }}\n        >\n          <div className=\"absolute inset-0 bg-black bg-opacity-40\"></div>\n        </div>\n      ))}\n\n      {/* Content */}\n      <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-full flex items-center\">\n        <div className=\"max-w-2xl\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-white mb-6 transition-all duration-500\">\n            {heroSlides[currentSlide].title}\n          </h1>\n          <p className=\"text-lg text-white mb-8 opacity-90 transition-all duration-500\">\n            {heroSlides[currentSlide].subtitle}\n          </p>\n          <Button \n            onClick={handleCTAClick}\n            className=\"bg-green-600 hover:bg-green-700 text-white px-8 py-3 text-sm font-semibold rounded-md transition-all duration-200 transform hover:scale-105\"\n            data-testid=\"button-hero-cta\"\n          >\n            {heroSlides[currentSlide].buttonText}\n          </Button>\n        </div>\n      </div>\n\n      {/* Navigation Arrows */}\n      <button \n        onClick={prevSlide}\n        className=\"absolute left-4 top-1/2 transform -translate-y-1/2 z-10 bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-2 rounded-full transition-all duration-200\"\n        aria-label=\"Previous slide\"\n      >\n        <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n        </svg>\n      </button>\n      \n      <button \n        onClick={nextSlide}\n        className=\"absolute right-4 top-1/2 transform -translate-y-1/2 z-10 bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-2 rounded-full transition-all duration-200\"\n        aria-label=\"Next slide\"\n      >\n        <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n        </svg>\n      </button>\n\n      {/* Carousel Dots */}\n      <div className=\"absolute bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-2 z-10\">\n        {heroSlides.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => goToSlide(index)}\n            className={`w-3 h-3 rounded-full transition-all duration-300 ${\n              index === currentSlide \n                ? 'bg-white scale-125' \n                : 'bg-white bg-opacity-50 hover:bg-opacity-75'\n            }`}\n            aria-label={`Go to slide ${index + 1}`}\n          />\n        ))}\n      </div>\n    </section>\n  );\n}","size_bytes":6853},"client/src/components/admin/email-template-management.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { toast } from '@/hooks/use-toast';\nimport { Mail, Plus, Edit2, Eye, Send, Code, Palette, FileText, CheckCircle2, AlertCircle } from 'lucide-react';\n\ninterface EmailTemplate {\n  id: string;\n  name: string;\n  subject: string;\n  templateType: string;\n  htmlContent: string;\n  variables: string[];\n  isActive: boolean;\n  createdAt: string;\n  updatedAt?: string;\n}\n\nexport default function EmailTemplateManagement() {\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [showPreviewDialog, setShowPreviewDialog] = useState(false);\n  const [editingTemplate, setEditingTemplate] = useState<EmailTemplate | null>(null);\n  const [previewTemplate, setPreviewTemplate] = useState<EmailTemplate | null>(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    subject: '',\n    templateType: 'general',\n    htmlContent: '',\n    variables: [] as string[]\n  });\n\n  const queryClient = useQueryClient();\n\n  // Fetch email templates\n  const { data: templates, isLoading } = useQuery<EmailTemplate[]>({\n    queryKey: ['admin-email-templates'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/email-templates');\n      if (!response.ok) throw new Error('Failed to fetch email templates');\n      return response.json();\n    },\n  });\n\n  // Create template mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/admin/email-templates', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create template');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-email-templates'] });\n      setShowCreateDialog(false);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Email template created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      subject: '',\n      templateType: 'general',\n      htmlContent: '',\n      variables: []\n    });\n  };\n\n  const handleCreateTemplate = () => {\n    if (!formData.name || !formData.subject || !formData.htmlContent) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Extract variables from the content\n    const variableMatches = formData.htmlContent.match(/\\{\\{(\\w+)\\}\\}/g);\n    const variables = variableMatches ? [...new Set(variableMatches.map(match => match.replace(/[{}]/g, '')))] : [];\n\n    createMutation.mutate({\n      ...formData,\n      variables,\n      isActive: true\n    });\n  };\n\n  const openEditDialog = (template: EmailTemplate) => {\n    setEditingTemplate(template);\n    setFormData({\n      name: template.name,\n      subject: template.subject,\n      templateType: template.templateType,\n      htmlContent: template.htmlContent,\n      variables: template.variables || []\n    });\n    setShowEditDialog(true);\n  };\n\n  const openPreview = (template: EmailTemplate) => {\n    setPreviewTemplate(template);\n    setShowPreviewDialog(true);\n  };\n\n  const getTemplateTypeBadge = (type: string) => {\n    const typeConfig = {\n      'welcome': { color: 'bg-blue-100 text-blue-800', label: 'Welcome' },\n      'transfer_confirmation': { color: 'bg-green-100 text-green-800', label: 'Transfer' },\n      'kyc_required': { color: 'bg-yellow-100 text-yellow-800', label: 'KYC' },\n      'ticket_response': { color: 'bg-purple-100 text-purple-800', label: 'Support' },\n      'general': { color: 'bg-gray-100 text-gray-800', label: 'General' }\n    };\n    \n    const config = typeConfig[type as keyof typeof typeConfig] || typeConfig.general;\n    return <Badge className={config.color}>{config.label}</Badge>;\n  };\n\n  const renderPreviewContent = (content: string, variables: string[]) => {\n    let previewContent = content;\n    \n    // Replace variables with sample data for preview\n    const sampleData: { [key: string]: string } = {\n      customerName: 'John Doe',\n      accountNumber: '****1234',\n      amount: '500.00',\n      recipientName: 'Jane Smith',\n      transactionId: 'TXN123456789',\n      transactionDate: new Date().toLocaleDateString(),\n      ticketId: 'TICKET001'\n    };\n    \n    variables.forEach(variable => {\n      const value = sampleData[variable] || `[${variable}]`;\n      previewContent = previewContent.replace(new RegExp(`{{${variable}}}`, 'g'), value);\n    });\n    \n    return previewContent;\n  };\n\n  const activeTemplatesCount = templates?.filter(t => t.isActive).length || 0;\n  const totalTemplatesCount = templates?.length || 0;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-1\">\n          <h2 className=\"text-2xl font-semibold tracking-tight flex items-center gap-2\">\n            <Mail className=\"h-6 w-6 text-blue-600\" />\n            Email Template Management\n          </h2>\n          <p className=\"text-sm text-muted-foreground\">\n            Create and manage email templates for automated customer communications\n          </p>\n        </div>\n        \n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogTrigger asChild>\n            <Button className=\"flex items-center gap-2\">\n              <Plus className=\"h-4 w-4\" />\n              Create Template\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[700px] max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create Email Template</DialogTitle>\n              <DialogDescription>\n                Create a new email template for automated customer communications.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"name\" className=\"text-sm font-medium\">Template Name *</label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"e.g., Account Activation Email\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"templateType\" className=\"text-sm font-medium\">Template Type *</label>\n                  <Select value={formData.templateType} onValueChange={(value) => setFormData(prev => ({ ...prev, templateType: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"welcome\">Welcome Email</SelectItem>\n                      <SelectItem value=\"transfer_confirmation\">Transfer Confirmation</SelectItem>\n                      <SelectItem value=\"kyc_required\">KYC Required</SelectItem>\n                      <SelectItem value=\"ticket_response\">Support Response</SelectItem>\n                      <SelectItem value=\"general\">General Purpose</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label htmlFor=\"subject\" className=\"text-sm font-medium\">Email Subject *</label>\n                <Input\n                  id=\"subject\"\n                  value={formData.subject}\n                  onChange={(e) => setFormData(prev => ({ ...prev, subject: e.target.value }))}\n                  placeholder=\"e.g., Welcome to Your New Account - {{customerName}}\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label htmlFor=\"htmlContent\" className=\"text-sm font-medium\">HTML Content *</label>\n                <Textarea\n                  id=\"htmlContent\"\n                  value={formData.htmlContent}\n                  onChange={(e) => setFormData(prev => ({ ...prev, htmlContent: e.target.value }))}\n                  placeholder=\"Enter your HTML email template here. Use {{variableName}} for dynamic content...\"\n                  rows={12}\n                  className=\"font-mono text-sm\"\n                />\n              </div>\n              \n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <Code className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                  <div>\n                    <h4 className=\"font-medium text-blue-900\">Template Variables</h4>\n                    <p className=\"text-sm text-blue-700 mt-1\">\n                      Use double curly braces to insert variables: <code className=\"bg-blue-100 px-1 rounded\">{'{{customerName}}'}</code>\n                    </p>\n                    <p className=\"text-sm text-blue-700 mt-1\">\n                      Common variables: customerName, accountNumber, amount, transactionId, ticketId\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setShowCreateDialog(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleCreateTemplate} disabled={createMutation.isPending}>\n                {createMutation.isPending ? \"Creating...\" : \"Create Template\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Templates</CardTitle>\n            <FileText className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{totalTemplatesCount}</div>\n            <p className=\"text-xs text-muted-foreground\">Email templates created</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Templates</CardTitle>\n            <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{activeTemplatesCount}</div>\n            <p className=\"text-xs text-muted-foreground\">Ready for use</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Template Types</CardTitle>\n            <Palette className=\"h-4 w-4 text-purple-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {new Set(templates?.map(t => t.templateType)).size || 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Different categories</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Templates List */}\n      <div className=\"grid gap-4\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center p-8\">\n            <div className=\"text-center\">\n              <div className=\"w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n              <p>Loading email templates...</p>\n            </div>\n          </div>\n        ) : templates?.length === 0 ? (\n          <Card className=\"p-8 text-center\">\n            <Mail className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Email Templates</h3>\n            <p className=\"text-gray-600 mb-4\">\n              Create your first email template to start automating customer communications.\n            </p>\n            <Button onClick={() => setShowCreateDialog(true)} className=\"flex items-center gap-2\">\n              <Plus className=\"h-4 w-4\" />\n              Create First Template\n            </Button>\n          </Card>\n        ) : (\n          templates?.map((template) => (\n            <Card key={template.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-2 bg-blue-100 rounded-lg\">\n                      <Mail className=\"h-5 w-5 text-blue-600\" />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-lg\">{template.name}</CardTitle>\n                      <CardDescription>\n                        {template.subject}\n                      </CardDescription>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {getTemplateTypeBadge(template.templateType)}\n                    <Badge variant={template.isActive ? \"default\" : \"secondary\"}>\n                      {template.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mb-4\">\n                  <div>\n                    <p className=\"font-medium text-gray-700\">Template Type</p>\n                    <p className=\"text-gray-600 capitalize\">{template.templateType.replace('_', ' ')}</p>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-700\">Variables</p>\n                    <p className=\"text-gray-600\">{template.variables?.length || 0} variables</p>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-700\">Created</p>\n                    <p className=\"text-gray-600\">\n                      {new Date(template.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-700\">Last Updated</p>\n                    <p className=\"text-gray-600\">\n                      {template.updatedAt \n                        ? new Date(template.updatedAt).toLocaleDateString()\n                        : 'Never'\n                      }\n                    </p>\n                  </div>\n                </div>\n                \n                {/* Variables used */}\n                {template.variables && template.variables.length > 0 && (\n                  <div className=\"mb-4\">\n                    <p className=\"text-sm font-medium text-gray-700 mb-2\">Template Variables:</p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {template.variables.map((variable) => (\n                        <Badge key={variable} variant=\"outline\" className=\"text-xs\">\n                          {`{{${variable}}}`}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"flex items-center justify-end gap-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => openPreview(template)}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <Eye className=\"h-4 w-4\" />\n                    Preview\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => openEditDialog(template)}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <Edit2 className=\"h-4 w-4\" />\n                    Edit\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    className=\"flex items-center gap-2\"\n                    disabled\n                  >\n                    <Send className=\"h-4 w-4\" />\n                    Test Send\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Preview Dialog */}\n      <Dialog open={showPreviewDialog} onOpenChange={setShowPreviewDialog}>\n        <DialogContent className=\"sm:max-w-[800px] max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Email Template Preview</DialogTitle>\n            <DialogDescription>\n              Preview of \"{previewTemplate?.name}\" with sample data\n            </DialogDescription>\n          </DialogHeader>\n          \n          {previewTemplate && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg\">\n                <div>\n                  <p className=\"font-medium text-sm\">Subject Line</p>\n                  <p className=\"text-gray-600\">\n                    {renderPreviewContent(previewTemplate.subject, previewTemplate.variables || [])}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">Template Type</p>\n                  {getTemplateTypeBadge(previewTemplate.templateType)}\n                </div>\n              </div>\n              \n              <div className=\"border rounded-lg p-4 bg-white\">\n                <div \n                  className=\"prose max-w-none\"\n                  dangerouslySetInnerHTML={{\n                    __html: renderPreviewContent(previewTemplate.htmlContent, previewTemplate.variables || [])\n                  }}\n                />\n              </div>\n              \n              <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                <div className=\"flex items-start gap-2\">\n                  <AlertCircle className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                  <div>\n                    <p className=\"font-medium text-blue-900 text-sm\">Preview Note</p>\n                    <p className=\"text-blue-700 text-sm\">\n                      This preview uses sample data. Actual emails will use real customer information.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowPreviewDialog(false)}>\n              Close Preview\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":19851},"client/src/components/admin/inheritance-management.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { toast } from '@/hooks/use-toast';\nimport { Heart, CheckCircle2, XCircle, Clock, AlertTriangle, FileText, User, Crown, Shield, Search, Filter, Gavel, Plus, Eye, Upload, UserCheck, ArrowRightLeft, Scale } from 'lucide-react';\n\ninterface InheritanceProcess {\n  id: string;\n  deceasedUserId: string;\n  deathCertificateUrl?: string;\n  status: string;\n  processedBy?: string;\n  processedAt?: string;\n  notes?: string;\n  deceasedUserEmail?: string;\n  deceasedUserName?: string;\n  processorName?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface InheritanceDispute {\n  id: string;\n  inheritanceProcessId: string;\n  disputantUserId: string;\n  disputeType: string;\n  description: string;\n  status: string;\n  createdAt: string;\n  details?: any;\n}\n\ninterface OwnershipTransferRequest {\n  id: string;\n  accountId: string;\n  requesterId: string;\n  targetUserEmail: string;\n  requestType: string;\n  reason: string;\n  status: string;\n  ownershipPercentage?: string;\n  createdAt: string;\n}\n\ninterface DocumentVerification {\n  id: string;\n  relatedEntityId: string;\n  relatedEntityType: string;\n  documentType: string;\n  documentUrl: string;\n  verificationStatus: string;\n  verifiedBy: string;\n  verificationNotes?: string;\n  rejectionReason?: string;\n  createdAt: string;\n}\n\nexport default function InheritanceManagement() {\n  const [selectedProcess, setSelectedProcess] = useState<InheritanceProcess | null>(null);\n  const [showReviewDialog, setShowReviewDialog] = useState(false);\n  const [showDisputeDialog, setShowDisputeDialog] = useState(false);\n  const [showTransferDialog, setShowTransferDialog] = useState(false);\n  const [showDocumentDialog, setShowDocumentDialog] = useState(false);\n  const [reviewStatus, setReviewStatus] = useState('');\n  const [reviewNotes, setReviewNotes] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [activeTab, setActiveTab] = useState('processes');\n\n  // Form states for new features\n  const [disputeForm, setDisputeForm] = useState({\n    disputeType: '',\n    description: '',\n    disputantUserId: ''\n  });\n  const [transferForm, setTransferForm] = useState({\n    accountId: '',\n    targetUserEmail: '',\n    requestType: '',\n    reason: '',\n    ownershipPercentage: ''\n  });\n  const [documentForm, setDocumentForm] = useState({\n    relatedEntityId: '',\n    relatedEntityType: 'inheritance_process',\n    documentType: '',\n    documentUrl: '',\n    verificationStatus: 'verified',\n    verificationNotes: ''\n  });\n\n  const queryClient = useQueryClient();\n\n  // Fetch inheritance processes\n  const { data: processes, isLoading } = useQuery<InheritanceProcess[]>({\n    queryKey: ['admin-inheritance'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/inheritance');\n      if (!response.ok) throw new Error('Failed to fetch inheritance processes');\n      return response.json();\n    },\n  });\n\n  // Fetch inheritance disputes\n  const { data: disputes } = useQuery<InheritanceDispute[]>({\n    queryKey: ['admin-inheritance-disputes'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/inheritance/disputes');\n      if (!response.ok) throw new Error('Failed to fetch inheritance disputes');\n      return response.json();\n    },\n  });\n\n  // Fetch ownership transfer requests\n  const { data: transferRequests } = useQuery<OwnershipTransferRequest[]>({\n    queryKey: ['admin-ownership-transfers'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/ownership-transfers');\n      if (!response.ok) throw new Error('Failed to fetch ownership transfer requests');\n      return response.json();\n    },\n  });\n\n  // Fetch document verifications\n  const { data: documentVerifications } = useQuery<DocumentVerification[]>({\n    queryKey: ['admin-document-verifications'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/document-verifications');\n      if (!response.ok) throw new Error('Failed to fetch document verifications');\n      return response.json();\n    },\n  });\n\n  // Update inheritance status mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status, notes }: { id: string; status: string; notes: string }) => {\n      const response = await fetch(`/api/admin/inheritance/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status, notes }),\n      });\n      if (!response.ok) throw new Error('Failed to update inheritance process');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-inheritance'] });\n      setShowReviewDialog(false);\n      setSelectedProcess(null);\n      setReviewStatus('');\n      setReviewNotes('');\n      toast({\n        title: \"Success\",\n        description: \"Inheritance process updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update inheritance process\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleReviewProcess = (process: InheritanceProcess) => {\n    setSelectedProcess(process);\n    setReviewStatus(process.status === 'pending' ? 'approved' : process.status);\n    setShowReviewDialog(true);\n  };\n\n  const handleSubmitReview = () => {\n    if (!selectedProcess || !reviewStatus) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a status\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateStatusMutation.mutate({\n      id: selectedProcess.id,\n      status: reviewStatus,\n      notes: reviewNotes\n    });\n  };\n\n  // Enhanced mutation hooks for new features\n  const createDisputeMutation = useMutation({\n    mutationFn: async (disputeData: any) => {\n      const response = await fetch('/api/admin/inheritance/disputes', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(disputeData),\n      });\n      if (!response.ok) throw new Error('Failed to create dispute');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-inheritance-disputes'] });\n      setShowDisputeDialog(false);\n      setDisputeForm({ disputeType: '', description: '', disputantUserId: '' });\n      toast({ title: \"Success\", description: \"Dispute created successfully\" });\n    },\n  });\n\n  const createTransferRequestMutation = useMutation({\n    mutationFn: async (transferData: any) => {\n      const response = await fetch('/api/admin/ownership-transfers', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(transferData),\n      });\n      if (!response.ok) throw new Error('Failed to create transfer request');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-ownership-transfers'] });\n      setShowTransferDialog(false);\n      setTransferForm({ accountId: '', targetUserEmail: '', requestType: '', reason: '', ownershipPercentage: '' });\n      toast({ title: \"Success\", description: \"Transfer request created successfully\" });\n    },\n  });\n\n  const verifyDocumentMutation = useMutation({\n    mutationFn: async (documentData: any) => {\n      const response = await fetch('/api/admin/document-verifications', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(documentData),\n      });\n      if (!response.ok) throw new Error('Failed to verify document');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-document-verifications'] });\n      setShowDocumentDialog(false);\n      setDocumentForm({ relatedEntityId: '', relatedEntityType: 'inheritance_process', documentType: '', documentUrl: '', verificationStatus: 'verified', verificationNotes: '' });\n      toast({ title: \"Success\", description: \"Document verified successfully\" });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'approved':\n      case 'completed':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle2 className=\"h-3 w-3 mr-1\" />Approved</Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\"><XCircle className=\"h-3 w-3 mr-1\" />Rejected</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\"><Clock className=\"h-3 w-3 mr-1\" />Pending Review</Badge>;\n      case 'under_review':\n        return <Badge className=\"bg-blue-100 text-blue-800\"><Shield className=\"h-3 w-3 mr-1\" />Under Review</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  // Filter processes\n  const filteredProcesses = processes?.filter((process) => {\n    const matchesStatus = filterStatus === 'all' || process.status === filterStatus;\n    const matchesSearch = !searchQuery || \n      process.deceasedUserId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      process.id.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    return matchesStatus && matchesSearch;\n  }) || [];\n\n  const pendingCount = processes?.filter(p => p.status === 'pending').length || 0;\n  const approvedCount = processes?.filter(p => p.status === 'approved' || p.status === 'completed').length || 0;\n  const rejectedCount = processes?.filter(p => p.status === 'rejected').length || 0;\n  const underReviewCount = processes?.filter(p => p.status === 'under_review').length || 0;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-1\">\n          <h2 className=\"text-2xl font-semibold tracking-tight flex items-center gap-2\">\n            <Crown className=\"h-6 w-6 text-purple-600\" />\n            Inheritance & Estate Management\n          </h2>\n          <p className=\"text-sm text-muted-foreground\">\n            Comprehensive inheritance processing, document verification, ownership transfers, and dispute resolution\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={() => setShowDisputeDialog(true)} className=\"flex items-center gap-2\">\n            <Scale className=\"h-4 w-4\" />\n            Create Dispute\n          </Button>\n          <Button onClick={() => setShowTransferDialog(true)} className=\"flex items-center gap-2\">\n            <ArrowRightLeft className=\"h-4 w-4\" />\n            Transfer Request\n          </Button>\n          <Button onClick={() => setShowDocumentDialog(true)} className=\"flex items-center gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Verify Document\n          </Button>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"processes\">Inheritance Processes</TabsTrigger>\n          <TabsTrigger value=\"disputes\">Disputes ({disputes?.length || 0})</TabsTrigger>\n          <TabsTrigger value=\"transfers\">Ownership Transfers ({transferRequests?.length || 0})</TabsTrigger>\n          <TabsTrigger value=\"documents\">Document Verification ({documentVerifications?.length || 0})</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"processes\" className=\"space-y-6\">{/* Inheritance Processes Tab */}\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Review</CardTitle>\n            <Clock className=\"h-4 w-4 text-yellow-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">{pendingCount}</div>\n            <p className=\"text-xs text-muted-foreground\">Awaiting legal review</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Under Review</CardTitle>\n            <Shield className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{underReviewCount}</div>\n            <p className=\"text-xs text-muted-foreground\">Active investigation</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Approved</CardTitle>\n            <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{approvedCount}</div>\n            <p className=\"text-xs text-muted-foreground\">Transfer completed</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n            <XCircle className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{rejectedCount}</div>\n            <p className=\"text-xs text-muted-foreground\">Legal issues found</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Filters</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Search Process</label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search by process ID or user ID...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Status</label>\n              <Select value={filterStatus} onValueChange={setFilterStatus}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"pending\">Pending Review</SelectItem>\n                  <SelectItem value=\"under_review\">Under Review</SelectItem>\n                  <SelectItem value=\"approved\">Approved</SelectItem>\n                  <SelectItem value=\"rejected\">Rejected</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Process List */}\n      <div className=\"grid gap-4\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center p-8\">\n            <div className=\"text-center\">\n              <div className=\"w-8 h-8 border-4 border-purple-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n              <p>Loading inheritance processes...</p>\n            </div>\n          </div>\n        ) : filteredProcesses.length === 0 ? (\n          <Card className=\"p-8 text-center\">\n            <Crown className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Inheritance Processes Found</h3>\n            <p className=\"text-gray-600\">\n              {searchQuery || filterStatus !== 'all'\n                ? \"No processes match your current filters.\"\n                : \"No inheritance processes have been submitted yet.\"\n              }\n            </p>\n          </Card>\n        ) : (\n          filteredProcesses.map((process) => (\n            <Card key={process.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-2 bg-purple-100 rounded-lg\">\n                      <Heart className=\"h-5 w-5 text-purple-600\" />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-lg flex items-center gap-2\">\n                        Inheritance Process #{process.id.slice(-6)}\n                      </CardTitle>\n                      <CardDescription>\n                        Deceased User: {process.deceasedUserId.slice(0, 8)}...\n                      </CardDescription>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    {getStatusBadge(process.status)}\n                    <Button \n                      size=\"sm\"\n                      onClick={() => handleReviewProcess(process)}\n                      disabled={updateStatusMutation.isPending}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Gavel className=\"h-4 w-4\" />\n                      Review\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                  <div>\n                    <p className=\"font-medium text-gray-700\">Process ID</p>\n                    <p className=\"text-gray-600 font-mono\">{process.id.slice(-8)}</p>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-700\">Submitted</p>\n                    <p className=\"text-gray-600\">\n                      {new Date(process.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-700\">Status</p>\n                    <p className=\"text-gray-600 capitalize\">{process.status.replace('_', ' ')}</p>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-700\">Last Updated</p>\n                    <p className=\"text-gray-600\">\n                      {new Date(process.updatedAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                  {process.deathCertificateUrl && (\n                    <div className=\"col-span-2\">\n                      <p className=\"font-medium text-gray-700\">Death Certificate</p>\n                      <p className=\"text-blue-600 text-sm flex items-center gap-1\">\n                        <FileText className=\"h-4 w-4\" />\n                        Document provided\n                      </p>\n                    </div>\n                  )}\n                  {process.processedBy && (\n                    <div className=\"col-span-2\">\n                      <p className=\"font-medium text-gray-700\">Processed By</p>\n                      <p className=\"text-gray-600\">{process.processedBy}</p>\n                    </div>\n                  )}\n                </div>\n                \n                {/* Risk Assessment */}\n                <div className=\"mt-4 p-4 bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <AlertTriangle className=\"h-4 w-4 text-amber-600\" />\n                    <span className=\"font-medium text-amber-900\">Risk Assessment</span>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p className=\"text-amber-700\">Documentation Status</p>\n                      <p className=\"font-medium text-amber-900\">\n                        {process.deathCertificateUrl ? 'Complete' : 'Incomplete'}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-amber-700\">Legal Review Required</p>\n                      <p className=\"font-medium text-amber-900\">\n                        {process.status === 'pending' ? 'Yes' : 'Complete'}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n        </TabsContent>\n\n        <TabsContent value=\"disputes\" className=\"space-y-6\">\n          {/* Disputes Tab */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Scale className=\"h-5 w-5 text-orange-600\" />\n                Inheritance Disputes Management\n              </CardTitle>\n              <CardDescription>\n                Handle disputes related to inheritance processes, beneficiary challenges, and document validity\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {disputes && disputes.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Dispute ID</TableHead>\n                      <TableHead>Type</TableHead>\n                      <TableHead>Description</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {disputes.map((dispute) => (\n                      <TableRow key={dispute.id}>\n                        <TableCell className=\"font-mono\">{dispute.id.slice(-8)}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">{dispute.disputeType.replace('_', ' ')}</Badge>\n                        </TableCell>\n                        <TableCell className=\"max-w-md truncate\">{dispute.description}</TableCell>\n                        <TableCell>\n                          <Badge className={dispute.status === 'open' ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}>\n                            {dispute.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>{new Date(dispute.createdAt).toLocaleDateString()}</TableCell>\n                        <TableCell>\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            Review\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Scale className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Disputes Found</h3>\n                  <p className=\"text-gray-600\">No inheritance disputes have been filed yet.</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"transfers\" className=\"space-y-6\">\n          {/* Ownership Transfers Tab */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <ArrowRightLeft className=\"h-5 w-5 text-blue-600\" />\n                Ownership Transfer Management\n              </CardTitle>\n              <CardDescription>\n                Review and process account ownership transfers and joint account requests\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {transferRequests && transferRequests.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Request ID</TableHead>\n                      <TableHead>Account</TableHead>\n                      <TableHead>Target Email</TableHead>\n                      <TableHead>Type</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {transferRequests.map((request) => (\n                      <TableRow key={request.id}>\n                        <TableCell className=\"font-mono\">{request.id.slice(-8)}</TableCell>\n                        <TableCell className=\"font-mono\">{request.accountId.slice(-8)}</TableCell>\n                        <TableCell>{request.targetUserEmail}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">{request.requestType.replace('_', ' ')}</Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={request.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'}>\n                            {request.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>{new Date(request.createdAt).toLocaleDateString()}</TableCell>\n                        <TableCell>\n                          <Button size=\"sm\" variant=\"outline\">\n                            <UserCheck className=\"h-4 w-4 mr-1\" />\n                            Review\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <ArrowRightLeft className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Transfer Requests</h3>\n                  <p className=\"text-gray-600\">No ownership transfer requests have been submitted yet.</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"documents\" className=\"space-y-6\">\n          {/* Document Verification Tab */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5 text-green-600\" />\n                Document Verification Center\n              </CardTitle>\n              <CardDescription>\n                Verify death certificates, wills, probate orders, and other legal documents\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {documentVerifications && documentVerifications.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Document Type</TableHead>\n                      <TableHead>Related Entity</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Verified By</TableHead>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {documentVerifications.map((doc) => (\n                      <TableRow key={doc.id}>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <FileText className=\"h-4 w-4\" />\n                            {doc.documentType.replace('_', ' ')}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"font-mono\">{doc.relatedEntityId.slice(-8)}</TableCell>\n                        <TableCell>\n                          <Badge className={doc.verificationStatus === 'verified' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>\n                            {doc.verificationStatus}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>{doc.verifiedBy}</TableCell>\n                        <TableCell>{new Date(doc.createdAt).toLocaleDateString()}</TableCell>\n                        <TableCell>\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Document Verifications</h3>\n                  <p className=\"text-gray-600\">No document verifications have been processed yet.</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Enhanced Dialog Forms */}\n      {/* Review Dialog */}\n      <Dialog open={showReviewDialog} onOpenChange={setShowReviewDialog}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle>Review Inheritance Process</DialogTitle>\n            <DialogDescription>\n              Review and update the status of inheritance process #{selectedProcess?.id.slice(-6)}\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedProcess && (\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg\">\n                <div>\n                  <p className=\"font-medium text-sm\">Process ID</p>\n                  <p className=\"text-gray-600 font-mono\">{selectedProcess.id}</p>\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">Deceased User</p>\n                  <p className=\"text-gray-600\">{selectedProcess.deceasedUserName || selectedProcess.deceasedUserId}</p>\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">Current Status</p>\n                  {getStatusBadge(selectedProcess.status)}\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">Submitted</p>\n                  <p className=\"text-gray-600\">{new Date(selectedProcess.createdAt).toLocaleDateString()}</p>\n                </div>\n                <div className=\"col-span-2\">\n                  <p className=\"font-medium text-sm\">Documentation</p>\n                  <p className=\"text-gray-600\">\n                    {selectedProcess.deathCertificateUrl ? (\n                      <span className=\"flex items-center gap-1 text-green-600\">\n                        <CheckCircle2 className=\"h-4 w-4\" />\n                        Death certificate provided\n                      </span>\n                    ) : (\n                      <span className=\"flex items-center gap-1 text-red-600\">\n                        <XCircle className=\"h-4 w-4\" />\n                        Death certificate missing\n                      </span>\n                    )}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label htmlFor=\"status\" className=\"text-sm font-medium\">Decision *</label>\n                <Select value={reviewStatus} onValueChange={setReviewStatus}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select decision\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"document_review\">Document Review</SelectItem>\n                    <SelectItem value=\"legal_review\">Legal Review</SelectItem>\n                    <SelectItem value=\"disputed\">Disputed</SelectItem>\n                    <SelectItem value=\"approved\">Approve Inheritance</SelectItem>\n                    <SelectItem value=\"rejected\">Reject Process</SelectItem>\n                    <SelectItem value=\"completed\">Mark as Completed</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label htmlFor=\"notes\" className=\"text-sm font-medium\">Legal Notes & Rationale *</label>\n                <Textarea\n                  id=\"notes\"\n                  placeholder=\"Provide detailed notes about your decision, legal requirements met/unmet, and any follow-up actions needed...\"\n                  value={reviewNotes}\n                  onChange={(e) => setReviewNotes(e.target.value)}\n                  rows={4}\n                />\n              </div>\n            </div>\n          )}\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowReviewDialog(false)}>\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSubmitReview} \n              disabled={updateStatusMutation.isPending || !reviewNotes.trim()}\n            >\n              {updateStatusMutation.isPending ? \"Processing...\" : \"Submit Decision\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Create Dispute Dialog */}\n      <Dialog open={showDisputeDialog} onOpenChange={setShowDisputeDialog}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Create Inheritance Dispute</DialogTitle>\n            <DialogDescription>\n              File a new dispute for an inheritance process\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Dispute Type</label>\n              <Select value={disputeForm.disputeType} onValueChange={(value) => setDisputeForm({...disputeForm, disputeType: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select dispute type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"beneficiary_challenge\">Beneficiary Challenge</SelectItem>\n                  <SelectItem value=\"document_validity\">Document Validity</SelectItem>\n                  <SelectItem value=\"ownership_claim\">Ownership Claim</SelectItem>\n                  <SelectItem value=\"fraud_allegation\">Fraud Allegation</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Description</label>\n              <Textarea\n                placeholder=\"Describe the dispute in detail...\"\n                value={disputeForm.description}\n                onChange={(e) => setDisputeForm({...disputeForm, description: e.target.value})}\n                rows={4}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Disputant User ID</label>\n              <Input\n                placeholder=\"Enter user ID of the disputant\"\n                value={disputeForm.disputantUserId}\n                onChange={(e) => setDisputeForm({...disputeForm, disputantUserId: e.target.value})}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowDisputeDialog(false)}>Cancel</Button>\n            <Button \n              onClick={() => createDisputeMutation.mutate({ inheritanceProcessId: selectedProcess?.id || '', ...disputeForm })}\n              disabled={!disputeForm.disputeType || !disputeForm.description || !disputeForm.disputantUserId}\n            >\n              Create Dispute\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Create Transfer Request Dialog */}\n      <Dialog open={showTransferDialog} onOpenChange={setShowTransferDialog}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Create Ownership Transfer Request</DialogTitle>\n            <DialogDescription>\n              Request ownership transfer or joint account access\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Account ID</label>\n              <Input\n                placeholder=\"Enter account ID\"\n                value={transferForm.accountId}\n                onChange={(e) => setTransferForm({...transferForm, accountId: e.target.value})}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Target User Email</label>\n              <Input\n                placeholder=\"Enter target user email\"\n                value={transferForm.targetUserEmail}\n                onChange={(e) => setTransferForm({...transferForm, targetUserEmail: e.target.value})}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Request Type</label>\n              <Select value={transferForm.requestType} onValueChange={(value) => setTransferForm({...transferForm, requestType: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select request type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"full_transfer\">Full Ownership Transfer</SelectItem>\n                  <SelectItem value=\"add_joint_owner\">Add Joint Owner</SelectItem>\n                  <SelectItem value=\"remove_owner\">Remove Owner</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Reason</label>\n              <Textarea\n                placeholder=\"Explain the reason for this transfer...\"\n                value={transferForm.reason}\n                onChange={(e) => setTransferForm({...transferForm, reason: e.target.value})}\n                rows={3}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowTransferDialog(false)}>Cancel</Button>\n            <Button \n              onClick={() => createTransferRequestMutation.mutate(transferForm)}\n              disabled={!transferForm.accountId || !transferForm.targetUserEmail || !transferForm.requestType || !transferForm.reason}\n            >\n              Create Request\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Document Verification Dialog */}\n      <Dialog open={showDocumentDialog} onOpenChange={setShowDocumentDialog}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Verify Document</DialogTitle>\n            <DialogDescription>\n              Record document verification for inheritance processes\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Related Entity ID</label>\n              <Input\n                placeholder=\"Enter inheritance process ID\"\n                value={documentForm.relatedEntityId}\n                onChange={(e) => setDocumentForm({...documentForm, relatedEntityId: e.target.value})}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Document Type</label>\n              <Select value={documentForm.documentType} onValueChange={(value) => setDocumentForm({...documentForm, documentType: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select document type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"death_certificate\">Death Certificate</SelectItem>\n                  <SelectItem value=\"will\">Will/Testament</SelectItem>\n                  <SelectItem value=\"probate_order\">Probate Court Order</SelectItem>\n                  <SelectItem value=\"identification\">Identification Document</SelectItem>\n                  <SelectItem value=\"other\">Other Legal Document</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Document URL</label>\n              <Input\n                placeholder=\"Enter document URL\"\n                value={documentForm.documentUrl}\n                onChange={(e) => setDocumentForm({...documentForm, documentUrl: e.target.value})}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Verification Status</label>\n              <Select value={documentForm.verificationStatus} onValueChange={(value) => setDocumentForm({...documentForm, verificationStatus: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"verified\">Verified</SelectItem>\n                  <SelectItem value=\"rejected\">Rejected</SelectItem>\n                  <SelectItem value=\"requires_resubmission\">Requires Resubmission</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Verification Notes</label>\n              <Textarea\n                placeholder=\"Add verification notes...\"\n                value={documentForm.verificationNotes}\n                onChange={(e) => setDocumentForm({...documentForm, verificationNotes: e.target.value})}\n                rows={3}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowDocumentDialog(false)}>Cancel</Button>\n            <Button \n              onClick={() => verifyDocumentMutation.mutate(documentForm)}\n              disabled={!documentForm.relatedEntityId || !documentForm.documentType || !documentForm.documentUrl}\n            >\n              Verify Document\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":43793},"client/src/components/admin/kyc-management.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { toast } from '@/hooks/use-toast';\nimport { Shield, CheckCircle2, XCircle, Clock, AlertTriangle, User, FileCheck, Phone, Mail, CreditCard, Search, Filter } from 'lucide-react';\n\ninterface KycVerification {\n  id: string;\n  userId: string;\n  verificationType: string;\n  status: string;\n  createdAt: string;\n  user?: {\n    name: string;\n    email: string;\n  };\n}\n\nexport default function KycManagement() {\n  const [selectedVerification, setSelectedVerification] = useState<KycVerification | null>(null);\n  const [showReviewDialog, setShowReviewDialog] = useState(false);\n  const [reviewStatus, setReviewStatus] = useState('');\n  const [reviewNotes, setReviewNotes] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [filterType, setFilterType] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const queryClient = useQueryClient();\n\n  // Fetch KYC verifications\n  const { data: verifications, isLoading } = useQuery<KycVerification[]>({\n    queryKey: ['admin-kyc-verifications'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/kyc-verifications');\n      if (!response.ok) throw new Error('Failed to fetch KYC verifications');\n      return response.json();\n    },\n  });\n\n  // Update KYC status mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ userId, type, status }: { userId: string; type: string; status: string }) => {\n      const response = await fetch(`/api/admin/kyc-verifications/${userId}/${type}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status }),\n      });\n      if (!response.ok) throw new Error('Failed to update KYC status');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-kyc-verifications'] });\n      setShowReviewDialog(false);\n      setSelectedVerification(null);\n      setReviewStatus('');\n      setReviewNotes('');\n      toast({\n        title: \"Success\",\n        description: \"KYC verification status updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update KYC status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleReviewVerification = (verification: KycVerification) => {\n    setSelectedVerification(verification);\n    setReviewStatus(verification.status === 'pending' ? 'verified' : verification.status);\n    setShowReviewDialog(true);\n  };\n\n  const handleSubmitReview = () => {\n    if (!selectedVerification || !reviewStatus) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a status\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateStatusMutation.mutate({\n      userId: selectedVerification.userId,\n      type: selectedVerification.verificationType,\n      status: reviewStatus\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'verified':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle2 className=\"h-3 w-3 mr-1\" />Verified</Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\"><XCircle className=\"h-3 w-3 mr-1\" />Rejected</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\"><Clock className=\"h-3 w-3 mr-1\" />Pending</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getVerificationIcon = (type: string) => {\n    switch (type) {\n      case 'id_verification':\n        return <CreditCard className=\"h-4 w-4 text-blue-600\" />;\n      case 'kyc_status':\n        return <Shield className=\"h-4 w-4 text-green-600\" />;\n      case 'email':\n        return <Mail className=\"h-4 w-4 text-purple-600\" />;\n      case 'phone':\n        return <Phone className=\"h-4 w-4 text-orange-600\" />;\n      default:\n        return <FileCheck className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const getVerificationLabel = (type: string) => {\n    switch (type) {\n      case 'id_verification':\n        return 'ID Verification';\n      case 'kyc_status':\n        return 'KYC Status';\n      case 'email':\n        return 'Email Verification';\n      case 'phone':\n        return 'Phone Verification';\n      default:\n        return type.replace('_', ' ').toUpperCase();\n    }\n  };\n\n  // Filter verifications\n  const filteredVerifications = verifications?.filter((verification) => {\n    const matchesStatus = filterStatus === 'all' || verification.status === filterStatus;\n    const matchesType = filterType === 'all' || verification.verificationType === filterType;\n    const matchesSearch = !searchQuery || \n      verification.user?.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      verification.user?.email.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    return matchesStatus && matchesType && matchesSearch;\n  }) || [];\n\n  const pendingCount = verifications?.filter(v => v.status === 'pending').length || 0;\n  const verifiedCount = verifications?.filter(v => v.status === 'verified').length || 0;\n  const rejectedCount = verifications?.filter(v => v.status === 'rejected').length || 0;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-1\">\n          <h2 className=\"text-2xl font-semibold tracking-tight flex items-center gap-2\">\n            <Shield className=\"h-6 w-6 text-blue-600\" />\n            KYC Verification Management\n          </h2>\n          <p className=\"text-sm text-muted-foreground\">\n            Review and manage customer identity verification requests\n          </p>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Review</CardTitle>\n            <Clock className=\"h-4 w-4 text-yellow-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">{pendingCount}</div>\n            <p className=\"text-xs text-muted-foreground\">Awaiting verification</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Verified</CardTitle>\n            <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{verifiedCount}</div>\n            <p className=\"text-xs text-muted-foreground\">Successfully verified</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n            <XCircle className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{rejectedCount}</div>\n            <p className=\"text-xs text-muted-foreground\">Verification failed</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total</CardTitle>\n            <FileCheck className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{verifications?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">All verifications</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Filters</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Search Customer</label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search by name or email...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Status</label>\n              <Select value={filterStatus} onValueChange={setFilterStatus}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"verified\">Verified</SelectItem>\n                  <SelectItem value=\"rejected\">Rejected</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Type</label>\n              <Select value={filterType} onValueChange={setFilterType}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"kyc_status\">KYC Status</SelectItem>\n                  <SelectItem value=\"id_verification\">ID Verification</SelectItem>\n                  <SelectItem value=\"email\">Email</SelectItem>\n                  <SelectItem value=\"phone\">Phone</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Verifications List */}\n      <div className=\"grid gap-4\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center p-8\">\n            <div className=\"text-center\">\n              <div className=\"w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n              <p>Loading KYC verifications...</p>\n            </div>\n          </div>\n        ) : filteredVerifications.length === 0 ? (\n          <Card className=\"p-8 text-center\">\n            <Shield className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No KYC Verifications Found</h3>\n            <p className=\"text-gray-600\">\n              {searchQuery || filterStatus !== 'all' || filterType !== 'all'\n                ? \"No verifications match your current filters.\"\n                : \"No KYC verification requests have been submitted yet.\"\n              }\n            </p>\n          </Card>\n        ) : (\n          filteredVerifications.map((verification) => (\n            <Card key={verification.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    {getVerificationIcon(verification.verificationType)}\n                    <div>\n                      <CardTitle className=\"text-lg\">\n                        {verification.user?.name || 'Unknown User'}\n                      </CardTitle>\n                      <CardDescription>\n                        {verification.user?.email} • {getVerificationLabel(verification.verificationType)}\n                      </CardDescription>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    {getStatusBadge(verification.status)}\n                    <Button \n                      size=\"sm\"\n                      onClick={() => handleReviewVerification(verification)}\n                      disabled={updateStatusMutation.isPending}\n                    >\n                      Review\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <p className=\"font-medium text-gray-700\">Verification Type</p>\n                    <p className=\"text-gray-600\">{getVerificationLabel(verification.verificationType)}</p>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-700\">Submitted</p>\n                    <p className=\"text-gray-600\">\n                      {new Date(verification.createdAt).toLocaleString()}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-700\">Current Status</p>\n                    <p className=\"text-gray-600 capitalize\">{verification.status}</p>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-700\">Customer ID</p>\n                    <p className=\"text-gray-600 font-mono text-xs\">{verification.userId.slice(0, 8)}...</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Review Dialog */}\n      <Dialog open={showReviewDialog} onOpenChange={setShowReviewDialog}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Review KYC Verification</DialogTitle>\n            <DialogDescription>\n              Review and update the verification status for {selectedVerification?.user?.name}\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedVerification && (\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg\">\n                <div>\n                  <p className=\"font-medium text-sm\">Customer</p>\n                  <p className=\"text-gray-600\">{selectedVerification.user?.name}</p>\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">Email</p>\n                  <p className=\"text-gray-600\">{selectedVerification.user?.email}</p>\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">Verification Type</p>\n                  <p className=\"text-gray-600\">{getVerificationLabel(selectedVerification.verificationType)}</p>\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">Current Status</p>\n                  {getStatusBadge(selectedVerification.status)}\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label htmlFor=\"status\" className=\"text-sm font-medium\">New Status *</label>\n                <Select value={reviewStatus} onValueChange={setReviewStatus}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select new status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"verified\">\n                      <div className=\"flex items-center gap-2\">\n                        <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n                        Verified\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"rejected\">\n                      <div className=\"flex items-center gap-2\">\n                        <XCircle className=\"h-4 w-4 text-red-600\" />\n                        Rejected\n                      </div>\n                    </SelectItem>\n                    <SelectItem value=\"pending\">\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4 text-yellow-600\" />\n                        Pending Review\n                      </div>\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label htmlFor=\"notes\" className=\"text-sm font-medium\">Review Notes (Optional)</label>\n                <Textarea\n                  id=\"notes\"\n                  placeholder=\"Add any notes about this verification review...\"\n                  value={reviewNotes}\n                  onChange={(e) => setReviewNotes(e.target.value)}\n                  rows={3}\n                />\n              </div>\n              \n              {reviewStatus === 'rejected' && (\n                <div className=\"flex items-start gap-2 p-3 bg-red-50 border border-red-200 rounded-lg\">\n                  <AlertTriangle className=\"h-5 w-5 text-red-600 mt-0.5\" />\n                  <div>\n                    <p className=\"font-medium text-red-900 text-sm\">Rejection Notice</p>\n                    <p className=\"text-red-700 text-sm\">\n                      The customer will be notified that their verification was rejected and may need to resubmit documents.\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowReviewDialog(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleSubmitReview} disabled={updateStatusMutation.isPending}>\n              {updateStatusMutation.isPending ? \"Updating...\" : \"Update Status\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":18525},"client/src/components/customer/beneficiaries.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { toast } from '@/hooks/use-toast';\nimport { Users, UserPlus, Edit2, Trash2, Heart, Shield, AlertCircle } from 'lucide-react';\n\ninterface Beneficiary {\n  id: string;\n  name: string;\n  relationship: string;\n  percentage: string;\n  contactInfo: string;\n  dateOfBirth?: string;\n  address?: string;\n  ssn?: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\nexport default function BeneficiariesManagement() {\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [editingBeneficiary, setEditingBeneficiary] = useState<Beneficiary | null>(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    relationship: '',\n    percentage: '',\n    contactInfo: '',\n    dateOfBirth: '',\n    address: '',\n    ssn: ''\n  });\n\n  const queryClient = useQueryClient();\n\n  // Fetch beneficiaries\n  const { data: beneficiaries, isLoading } = useQuery<Beneficiary[]>({\n    queryKey: ['beneficiaries'],\n    queryFn: async () => {\n      const response = await fetch('/api/beneficiaries');\n      if (!response.ok) throw new Error('Failed to fetch beneficiaries');\n      return response.json();\n    },\n  });\n\n  // Create beneficiary mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/beneficiaries', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create beneficiary');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['beneficiaries'] });\n      setShowAddDialog(false);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Beneficiary added successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create beneficiary\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update beneficiary mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await fetch(`/api/beneficiaries/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to update beneficiary');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['beneficiaries'] });\n      setShowEditDialog(false);\n      setEditingBeneficiary(null);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Beneficiary updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update beneficiary\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete beneficiary mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/beneficiaries/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete beneficiary');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['beneficiaries'] });\n      toast({\n        title: \"Success\",\n        description: \"Beneficiary removed successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete beneficiary\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      relationship: '',\n      percentage: '',\n      contactInfo: '',\n      dateOfBirth: '',\n      address: '',\n      ssn: ''\n    });\n  };\n\n  const handleAddBeneficiary = () => {\n    if (!formData.name || !formData.relationship || !formData.percentage || !formData.contactInfo) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (parseFloat(formData.percentage) <= 0 || parseFloat(formData.percentage) > 100) {\n      toast({\n        title: \"Error\",\n        description: \"Percentage must be between 0 and 100\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createMutation.mutate(formData);\n  };\n\n  const handleEditBeneficiary = () => {\n    if (!editingBeneficiary || !formData.name || !formData.relationship || !formData.percentage || !formData.contactInfo) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (parseFloat(formData.percentage) <= 0 || parseFloat(formData.percentage) > 100) {\n      toast({\n        title: \"Error\",\n        description: \"Percentage must be between 0 and 100\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateMutation.mutate({ id: editingBeneficiary.id, data: formData });\n  };\n\n  const handleDeleteBeneficiary = (beneficiary: Beneficiary) => {\n    if (confirm(`Are you sure you want to remove ${beneficiary.name} as a beneficiary?`)) {\n      deleteMutation.mutate(beneficiary.id);\n    }\n  };\n\n  const openEditDialog = (beneficiary: Beneficiary) => {\n    setEditingBeneficiary(beneficiary);\n    setFormData({\n      name: beneficiary.name,\n      relationship: beneficiary.relationship,\n      percentage: beneficiary.percentage,\n      contactInfo: beneficiary.contactInfo,\n      dateOfBirth: beneficiary.dateOfBirth?.split('T')[0] || '',\n      address: beneficiary.address || '',\n      ssn: beneficiary.ssn || ''\n    });\n    setShowEditDialog(true);\n  };\n\n  const totalPercentage = beneficiaries?.reduce((sum, b) => sum + parseFloat(b.percentage), 0) || 0;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-1\">\n          <h2 className=\"text-2xl font-semibold tracking-tight flex items-center gap-2\">\n            <Users className=\"h-6 w-6 text-blue-600\" />\n            Beneficiaries & Next of Kin\n          </h2>\n          <p className=\"text-sm text-muted-foreground\">\n            Manage your account beneficiaries for inheritance and ownership transfer\n          </p>\n        </div>\n        \n        <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n          <DialogTrigger asChild>\n            <Button className=\"flex items-center gap-2\">\n              <UserPlus className=\"h-4 w-4\" />\n              Add Beneficiary\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>Add New Beneficiary</DialogTitle>\n              <DialogDescription>\n                Add someone who will inherit your accounts or have joint ownership rights.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"name\" className=\"text-sm font-medium\">Full Name *</label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"Enter full name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"relationship\" className=\"text-sm font-medium\">Relationship *</label>\n                  <Select value={formData.relationship} onValueChange={(value) => setFormData(prev => ({ ...prev, relationship: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select relationship\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"spouse\">Spouse</SelectItem>\n                      <SelectItem value=\"child\">Child</SelectItem>\n                      <SelectItem value=\"parent\">Parent</SelectItem>\n                      <SelectItem value=\"sibling\">Sibling</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"percentage\" className=\"text-sm font-medium\">Inheritance % *</label>\n                  <Input\n                    id=\"percentage\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"100\"\n                    value={formData.percentage}\n                    onChange={(e) => setFormData(prev => ({ ...prev, percentage: e.target.value }))}\n                    placeholder=\"e.g., 50\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"dateOfBirth\" className=\"text-sm font-medium\">Date of Birth</label>\n                  <Input\n                    id=\"dateOfBirth\"\n                    type=\"date\"\n                    value={formData.dateOfBirth}\n                    onChange={(e) => setFormData(prev => ({ ...prev, dateOfBirth: e.target.value }))}\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label htmlFor=\"contactInfo\" className=\"text-sm font-medium\">Contact Information *</label>\n                <Input\n                  id=\"contactInfo\"\n                  value={formData.contactInfo}\n                  onChange={(e) => setFormData(prev => ({ ...prev, contactInfo: e.target.value }))}\n                  placeholder=\"Phone number or email\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label htmlFor=\"address\" className=\"text-sm font-medium\">Address</label>\n                <Textarea\n                  id=\"address\"\n                  value={formData.address}\n                  onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}\n                  placeholder=\"Full address\"\n                  rows={2}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label htmlFor=\"ssn\" className=\"text-sm font-medium\">SSN (Optional)</label>\n                <Input\n                  id=\"ssn\"\n                  value={formData.ssn}\n                  onChange={(e) => setFormData(prev => ({ ...prev, ssn: e.target.value }))}\n                  placeholder=\"XXX-XX-XXXX\"\n                  maxLength={11}\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setShowAddDialog(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleAddBeneficiary} disabled={createMutation.isPending}>\n                {createMutation.isPending ? \"Adding...\" : \"Add Beneficiary\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Total Percentage Warning */}\n      <div className=\"flex items-center gap-2 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n        <Shield className=\"h-5 w-5 text-blue-600\" />\n        <div>\n          <p className=\"font-medium text-blue-900\">\n            Total Inheritance Allocation: {totalPercentage.toFixed(1)}%\n          </p>\n          {totalPercentage > 100 && (\n            <p className=\"text-sm text-red-600 flex items-center gap-1 mt-1\">\n              <AlertCircle className=\"h-4 w-4\" />\n              Warning: Total percentage exceeds 100%\n            </p>\n          )}\n          {totalPercentage < 100 && (\n            <p className=\"text-sm text-blue-700 mt-1\">\n              Remaining: {(100 - totalPercentage).toFixed(1)}% unallocated\n            </p>\n          )}\n        </div>\n      </div>\n\n      {/* Beneficiaries List */}\n      <div className=\"grid gap-4\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center p-8\">\n            <div className=\"text-center\">\n              <div className=\"w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n              <p>Loading beneficiaries...</p>\n            </div>\n          </div>\n        ) : beneficiaries?.length === 0 ? (\n          <Card className=\"p-8 text-center\">\n            <Heart className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Beneficiaries Yet</h3>\n            <p className=\"text-gray-600 mb-4\">\n              Add beneficiaries to ensure your assets are properly inherited according to your wishes.\n            </p>\n            <Button onClick={() => setShowAddDialog(true)} className=\"flex items-center gap-2\">\n              <UserPlus className=\"h-4 w-4\" />\n              Add First Beneficiary\n            </Button>\n          </Card>\n        ) : (\n          beneficiaries?.map((beneficiary) => (\n            <Card key={beneficiary.id}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <Heart className=\"h-5 w-5 text-red-500\" />\n                      {beneficiary.name}\n                    </CardTitle>\n                    <CardDescription>\n                      {beneficiary.relationship} • {beneficiary.percentage}% inheritance\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant={beneficiary.isActive ? \"default\" : \"secondary\"}>\n                      {beneficiary.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => openEditDialog(beneficiary)}\n                    >\n                      <Edit2 className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDeleteBeneficiary(beneficiary)}\n                      className=\"text-red-600 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <p className=\"font-medium text-gray-700\">Contact</p>\n                    <p className=\"text-gray-600\">{beneficiary.contactInfo}</p>\n                  </div>\n                  {beneficiary.dateOfBirth && (\n                    <div>\n                      <p className=\"font-medium text-gray-700\">Date of Birth</p>\n                      <p className=\"text-gray-600\">\n                        {new Date(beneficiary.dateOfBirth).toLocaleDateString()}\n                      </p>\n                    </div>\n                  )}\n                  {beneficiary.address && (\n                    <div className=\"col-span-2\">\n                      <p className=\"font-medium text-gray-700\">Address</p>\n                      <p className=\"text-gray-600\">{beneficiary.address}</p>\n                    </div>\n                  )}\n                  <div className=\"col-span-2\">\n                    <p className=\"font-medium text-gray-700\">Added</p>\n                    <p className=\"text-gray-600\">\n                      {new Date(beneficiary.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Edit Beneficiary</DialogTitle>\n            <DialogDescription>\n              Update beneficiary information and inheritance details.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <label htmlFor=\"edit-name\" className=\"text-sm font-medium\">Full Name *</label>\n                <Input\n                  id=\"edit-name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"Enter full name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <label htmlFor=\"edit-relationship\" className=\"text-sm font-medium\">Relationship *</label>\n                <Select value={formData.relationship} onValueChange={(value) => setFormData(prev => ({ ...prev, relationship: value }))}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select relationship\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"spouse\">Spouse</SelectItem>\n                    <SelectItem value=\"child\">Child</SelectItem>\n                    <SelectItem value=\"parent\">Parent</SelectItem>\n                    <SelectItem value=\"sibling\">Sibling</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <label htmlFor=\"edit-percentage\" className=\"text-sm font-medium\">Inheritance % *</label>\n                <Input\n                  id=\"edit-percentage\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"100\"\n                  value={formData.percentage}\n                  onChange={(e) => setFormData(prev => ({ ...prev, percentage: e.target.value }))}\n                  placeholder=\"e.g., 50\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <label htmlFor=\"edit-dateOfBirth\" className=\"text-sm font-medium\">Date of Birth</label>\n                <Input\n                  id=\"edit-dateOfBirth\"\n                  type=\"date\"\n                  value={formData.dateOfBirth}\n                  onChange={(e) => setFormData(prev => ({ ...prev, dateOfBirth: e.target.value }))}\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label htmlFor=\"edit-contactInfo\" className=\"text-sm font-medium\">Contact Information *</label>\n              <Input\n                id=\"edit-contactInfo\"\n                value={formData.contactInfo}\n                onChange={(e) => setFormData(prev => ({ ...prev, contactInfo: e.target.value }))}\n                placeholder=\"Phone number or email\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label htmlFor=\"edit-address\" className=\"text-sm font-medium\">Address</label>\n              <Textarea\n                id=\"edit-address\"\n                value={formData.address}\n                onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}\n                placeholder=\"Full address\"\n                rows={2}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <label htmlFor=\"edit-ssn\" className=\"text-sm font-medium\">SSN (Optional)</label>\n              <Input\n                id=\"edit-ssn\"\n                value={formData.ssn}\n                onChange={(e) => setFormData(prev => ({ ...prev, ssn: e.target.value }))}\n                placeholder=\"XXX-XX-XXXX\"\n                maxLength={11}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowEditDialog(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleEditBeneficiary} disabled={updateMutation.isPending}>\n              {updateMutation.isPending ? \"Updating...\" : \"Update Beneficiary\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":21420},"client/src/components/customer/enhanced-chat.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Avatar, AvatarFallback, AvatarInitials } from '@/components/ui/avatar';\nimport { toast } from '@/hooks/use-toast';\nimport { MessageCircle, Send, User, Headphones, Clock, CheckCircle2, AlertCircle, Refresh } from 'lucide-react';\n\ninterface ChatMessage {\n  id: string;\n  ticketId: string;\n  senderId: string;\n  message: string;\n  isFromAdmin: boolean;\n  createdAt: string;\n  sender?: {\n    name: string;\n    role: string;\n  };\n}\n\ninterface SupportTicket {\n  id: string;\n  subject: string;\n  description: string;\n  status: string;\n  priority: string;\n  createdAt: string;\n  assignedTo?: string;\n}\n\ninterface EnhancedChatProps {\n  ticketId: string;\n  ticket: SupportTicket;\n  onClose?: () => void;\n}\n\nexport default function EnhancedChat({ ticketId, ticket, onClose }: EnhancedChatProps) {\n  const [newMessage, setNewMessage] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'connected' | 'disconnected'>('disconnected');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const queryClient = useQueryClient();\n  const wsRef = useRef<WebSocket | null>(null);\n  const { user } = useAuth();\n\n  // Fetch initial messages (no polling needed with WebSocket)\n  const { data: messages, isLoading, refetch } = useQuery<ChatMessage[]>({\n    queryKey: ['chat-messages', ticketId],\n    queryFn: async () => {\n      const response = await fetch(`/api/chat/messages/${ticketId}`);\n      if (!response.ok) throw new Error('Failed to fetch messages');\n      return response.json();\n    },\n    refetchOnWindowFocus: false,\n  });\n\n  // WebSocket connection setup\n  const connectWebSocket = useCallback(() => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) return;\n    \n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const ws = new WebSocket(`${protocol}//${window.location.host}/ws/chat`);\n    wsRef.current = ws;\n    \n    setConnectionStatus('connecting');\n    \n    ws.onopen = () => {\n      setConnectionStatus('connected');\n      setIsConnected(true);\n      \n      // Send authentication message\n      ws.send(JSON.stringify({\n        type: 'auth',\n        userId: user?.id || 'anonymous'\n      }));\n      \n      toast({\n        title: \"Connected\",\n        description: \"Real-time chat is now active\",\n      });\n    };\n    \n    ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        \n        if (data.type === 'new_message' && data.ticketId === ticketId) {\n          // New message received\n          queryClient.invalidateQueries({ queryKey: ['chat-messages', ticketId] });\n          refetch();\n          \n          // Show notification if message is from admin\n          if (data.message.isFromAdmin && document.hidden && Notification.permission === 'granted') {\n            new Notification('New support response', {\n              body: data.message.message.substring(0, 100) + '...',\n              icon: '/favicon.ico'\n            });\n          }\n        } else if (data.type === 'message_sent') {\n          // Message sent confirmation\n          queryClient.invalidateQueries({ queryKey: ['chat-messages', ticketId] });\n          queryClient.invalidateQueries({ queryKey: ['support-tickets'] });\n          refetch();\n        }\n      } catch (error) {\n        console.error('WebSocket message parse error:', error);\n      }\n    };\n    \n    ws.onclose = () => {\n      setConnectionStatus('disconnected');\n      setIsConnected(false);\n      \n      // Attempt to reconnect after 3 seconds\n      setTimeout(() => {\n        if (wsRef.current?.readyState !== WebSocket.OPEN) {\n          connectWebSocket();\n        }\n      }, 3000);\n    };\n    \n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setConnectionStatus('disconnected');\n      setIsConnected(false);\n    };\n  }, [ticketId, queryClient, refetch]);\n\n  // Send message via WebSocket\n  const sendMessageMutation = useMutation({\n    mutationFn: async (content: string) => {\n      if (wsRef.current?.readyState === WebSocket.OPEN) {\n        // Send via WebSocket for real-time delivery\n        wsRef.current.send(JSON.stringify({\n          type: 'chat_message',\n          ticketId,\n          content,\n          senderId: user?.id || 'anonymous',\n          isFromAdmin: user?.role === 'admin'\n        }));\n        return { success: true };\n      } else {\n        // Fallback to HTTP if WebSocket not available\n        const response = await fetch('/api/chat/messages', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            ticketId,\n            content\n          }),\n        });\n        if (!response.ok) throw new Error('Failed to send message');\n        return response.json();\n      }\n    },\n    onSuccess: () => {\n      setNewMessage('');\n      \n      if (wsRef.current?.readyState !== WebSocket.OPEN) {\n        // Only invalidate queries if not using WebSocket (fallback mode)\n        queryClient.invalidateQueries({ queryKey: ['chat-messages', ticketId] });\n        queryClient.invalidateQueries({ queryKey: ['support-tickets'] });\n        refetch();\n        \n        toast({\n          title: \"Message sent\",\n          description: \"Your message has been delivered to our support team\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) return;\n    \n    if (newMessage.length > 1000) {\n      toast({\n        title: \"Message too long\",\n        description: \"Please keep messages under 1000 characters\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    sendMessageMutation.mutate(newMessage.trim());\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // WebSocket connection management\n  useEffect(() => {\n    connectWebSocket();\n    \n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [connectWebSocket]);\n\n  // Notification for new admin messages\n  useEffect(() => {\n    if (messages && messages.length > 0) {\n      const lastMessage = messages[messages.length - 1];\n      const isNewAdminMessage = lastMessage.isFromAdmin && \n        new Date(lastMessage.createdAt).getTime() > Date.now() - 10000; // Within last 10 seconds\n      \n      if (isNewAdminMessage && document.hidden) {\n        // Show browser notification if page is not visible\n        if (Notification.permission === 'granted') {\n          new Notification('New support response', {\n            body: lastMessage.message.substring(0, 100) + '...',\n            icon: '/favicon.ico'\n          });\n        }\n      }\n    }\n  }, [messages]);\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'open':\n        return <Badge variant=\"default\"><MessageCircle className=\"h-3 w-3 mr-1\" />Open</Badge>;\n      case 'in_progress':\n        return <Badge className=\"bg-blue-100 text-blue-800\"><Clock className=\"h-3 w-3 mr-1\" />In Progress</Badge>;\n      case 'resolved':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle2 className=\"h-3 w-3 mr-1\" />Resolved</Badge>;\n      case 'closed':\n        return <Badge variant=\"secondary\">Closed</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return <Badge variant=\"destructive\"><AlertCircle className=\"h-3 w-3 mr-1\" />Urgent</Badge>;\n      case 'high':\n        return <Badge className=\"bg-orange-100 text-orange-800\">High</Badge>;\n      case 'medium':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Medium</Badge>;\n      case 'low':\n        return <Badge variant=\"outline\">Low</Badge>;\n      default:\n        return <Badge variant=\"outline\">{priority}</Badge>;\n    }\n  };\n\n  return (\n    <Card className=\"flex flex-col h-[600px]\">\n      <CardHeader className=\"pb-3 border-b\">\n        <div className=\"flex items-start justify-between\">\n          <div>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <MessageCircle className=\"h-5 w-5 text-blue-600\" />\n              Live Chat Support\n            </CardTitle>\n            <CardDescription>\n              {ticket.subject} • Ticket #{ticketId.slice(-6)}\n            </CardDescription>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {getStatusBadge(ticket.status)}\n            {getPriorityBadge(ticket.priority)}\n            {onClose && (\n              <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n                ×\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      {/* Messages Area */}\n      <CardContent className=\"flex-1 p-0\">\n        <ScrollArea className=\"h-full p-4\">\n          <div className=\"space-y-4\">\n            {/* Initial ticket message */}\n            <div className=\"flex items-start gap-3\">\n              <Avatar className=\"w-8 h-8\">\n                <AvatarFallback className=\"bg-blue-100 text-blue-600\">\n                  <User className=\"h-4 w-4\" />\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 max-w-[80%]\">\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                  <p className=\"font-medium text-blue-900 text-sm mb-1\">You opened this ticket</p>\n                  <p className=\"text-gray-800\">{ticket.description}</p>\n                  <p className=\"text-xs text-gray-500 mt-2\">\n                    {new Date(ticket.createdAt).toLocaleString()}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <div className=\"w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n                <span className=\"ml-2 text-sm text-gray-600\">Loading messages...</span>\n              </div>\n            ) : (\n              messages?.map((message) => (\n                <div\n                  key={message.id}\n                  className={`flex items-start gap-3 ${\n                    message.isFromAdmin ? 'flex-row' : 'flex-row-reverse'\n                  }`}\n                >\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarFallback \n                      className={\n                        message.isFromAdmin \n                          ? \"bg-green-100 text-green-600\" \n                          : \"bg-blue-100 text-blue-600\"\n                      }\n                    >\n                      {message.isFromAdmin ? (\n                        <Headphones className=\"h-4 w-4\" />\n                      ) : (\n                        <User className=\"h-4 w-4\" />\n                      )}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1 max-w-[80%]\">\n                    <div\n                      className={`rounded-lg p-3 ${\n                        message.isFromAdmin\n                          ? 'bg-green-50 border border-green-200'\n                          : 'bg-gray-50 border border-gray-200'\n                      }`}\n                    >\n                      <p className=\"font-medium text-sm mb-1\">\n                        {message.isFromAdmin ? (\n                          <span className=\"text-green-700\">Support Agent</span>\n                        ) : (\n                          <span className=\"text-blue-700\">You</span>\n                        )}\n                      </p>\n                      <p className=\"text-gray-800 whitespace-pre-wrap\">{message.message}</p>\n                      <p className=\"text-xs text-gray-500 mt-2\">\n                        {new Date(message.createdAt).toLocaleString()}\n                        {message.isFromAdmin && (\n                          <span className=\"ml-2 inline-flex items-center\">\n                            <CheckCircle2 className=\"h-3 w-3 text-green-600\" />\n                          </span>\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n            \n            {/* Typing indicator would go here */}\n            {sendMessageMutation.isPending && (\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n                <span className=\"text-sm text-gray-600\">Sending message...</span>\n              </div>\n            )}\n            \n            <div ref={messagesEndRef} />\n          </div>\n        </ScrollArea>\n      </CardContent>\n\n      {/* Message Input */}\n      <div className=\"border-t p-4\">\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={connectionStatus === 'disconnected' ? connectWebSocket : () => refetch()}\n            className=\"shrink-0\"\n            title={connectionStatus === 'disconnected' ? \"Reconnect\" : \"Refresh messages\"}\n          >\n            <Refresh className=\"h-4 w-4\" />\n          </Button>\n          \n          <div className=\"flex-1 relative\">\n            <Textarea\n              value={newMessage}\n              onChange={(e) => setNewMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={\n                ticket.status === 'closed' \n                  ? \"This ticket is closed. Please open a new ticket for assistance.\"\n                  : \"Type your message here... (Press Enter to send, Shift+Enter for new line)\"\n              }\n              disabled={ticket.status === 'closed' || sendMessageMutation.isPending}\n              className=\"min-h-[80px] resize-none pr-12\"\n              maxLength={1000}\n            />\n            <div className=\"absolute bottom-2 right-2 text-xs text-gray-400\">\n              {newMessage.length}/1000\n            </div>\n          </div>\n          \n          <Button\n            onClick={handleSendMessage}\n            disabled={!newMessage.trim() || ticket.status === 'closed' || sendMessageMutation.isPending}\n            className=\"shrink-0\"\n          >\n            <Send className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        <div className=\"flex items-center justify-between mt-3 text-xs text-gray-500\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-1\">\n              <div className={`w-2 h-2 rounded-full ${\n                connectionStatus === 'connected' ? 'bg-green-500' : \n                connectionStatus === 'connecting' ? 'bg-yellow-500' : 'bg-red-500'\n              }`}></div>\n              <span>\n                {connectionStatus === 'connected' ? 'Real-time chat active' : \n                 connectionStatus === 'connecting' ? 'Connecting...' : 'Disconnected'}\n              </span>\n            </div>\n            \n            {messages && messages.length > 0 && (\n              <span>\n                Last updated: {new Date(messages[messages.length - 1]?.createdAt || '').toLocaleTimeString()}\n              </span>\n            )}\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <span>Press Enter to send</span>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}\n\n// Request notification permission when component mounts\nif (typeof window !== 'undefined' && 'Notification' in window && Notification.permission === 'default') {\n  Notification.requestPermission();\n}","size_bytes":16642},"client/src/components/customer/statements.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { toast } from '@/hooks/use-toast';\nimport { FileText, Download, Calendar, Filter, FileType, Table, Eye, Plus, Clock, CheckCircle2 } from 'lucide-react';\n\ninterface Account {\n  id: string;\n  accountNumber: string;\n  accountType: string;\n  balance: string;\n}\n\ninterface Statement {\n  id: string;\n  accountId: string;\n  statementType: string;\n  periodStart: string;\n  periodEnd: string;\n  status: string;\n  createdAt: string;\n}\n\nexport default function AccountStatements() {\n  const [showGenerateDialog, setShowGenerateDialog] = useState(false);\n  const [selectedAccountId, setSelectedAccountId] = useState('');\n  const [statementType, setStatementType] = useState('monthly');\n  const [periodStart, setPeriodStart] = useState('');\n  const [periodEnd, setPeriodEnd] = useState('');\n\n  const queryClient = useQueryClient();\n\n  // Fetch accounts\n  const { data: accounts } = useQuery<Account[]>({\n    queryKey: ['accounts'],\n    queryFn: async () => {\n      const response = await fetch('/api/accounts');\n      if (!response.ok) throw new Error('Failed to fetch accounts');\n      return response.json();\n    },\n  });\n\n  // Fetch statements\n  const { data: statements, isLoading } = useQuery<Statement[]>({\n    queryKey: ['statements'],\n    queryFn: async () => {\n      const response = await fetch('/api/statements');\n      if (!response.ok) throw new Error('Failed to fetch statements');\n      return response.json();\n    },\n  });\n\n  // Generate statement mutation\n  const generateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/statements/generate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to generate statement');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['statements'] });\n      setShowGenerateDialog(false);\n      toast({\n        title: \"Success\",\n        description: \"Statement generated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to generate statement\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerateStatement = () => {\n    if (!selectedAccountId || !periodStart || !periodEnd) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (new Date(periodStart) >= new Date(periodEnd)) {\n      toast({\n        title: \"Error\",\n        description: \"Start date must be before end date\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateMutation.mutate({\n      accountId: selectedAccountId,\n      periodStart,\n      periodEnd,\n      type: statementType\n    });\n  };\n\n  const handleDownload = async (statementId: string, format: 'pdf' | 'excel') => {\n    try {\n      const response = await fetch(`/api/statements/${statementId}/download/${format}`);\n      if (!response.ok) throw new Error('Failed to download statement');\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = `statement_${statementId}.${format === 'pdf' ? 'pdf' : 'csv'}`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Success\",\n        description: `Statement downloaded as ${format.toUpperCase()}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download statement\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'ready':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle2 className=\"h-3 w-3 mr-1\" />Ready</Badge>;\n      case 'generating':\n        return <Badge variant=\"secondary\"><Clock className=\"h-3 w-3 mr-1\" />Generating</Badge>;\n      case 'error':\n        return <Badge variant=\"destructive\">Error</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  // Set default dates (last month)\n  useEffect(() => {\n    const today = new Date();\n    const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n    const endOfLastMonth = new Date(today.getFullYear(), today.getMonth(), 0);\n    \n    setPeriodStart(lastMonth.toISOString().split('T')[0]);\n    setPeriodEnd(endOfLastMonth.toISOString().split('T')[0]);\n  }, []);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-1\">\n          <h2 className=\"text-2xl font-semibold tracking-tight flex items-center gap-2\">\n            <FileText className=\"h-6 w-6 text-blue-600\" />\n            Account Statements\n          </h2>\n          <p className=\"text-sm text-muted-foreground\">\n            Generate and download account statements in PDF or Excel format\n          </p>\n        </div>\n        \n        <Dialog open={showGenerateDialog} onOpenChange={setShowGenerateDialog}>\n          <DialogTrigger asChild>\n            <Button className=\"flex items-center gap-2\">\n              <Plus className=\"h-4 w-4\" />\n              Generate Statement\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>Generate New Statement</DialogTitle>\n              <DialogDescription>\n                Generate a new account statement for a specific period and account.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"space-y-2\">\n                <label htmlFor=\"account\" className=\"text-sm font-medium\">Select Account *</label>\n                <Select value={selectedAccountId} onValueChange={setSelectedAccountId}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose an account\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {accounts?.map((account) => (\n                      <SelectItem key={account.id} value={account.id}>\n                        {account.accountType} - ****{account.accountNumber.slice(-4)} \n                        (${parseFloat(account.balance).toLocaleString()})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label htmlFor=\"statementType\" className=\"text-sm font-medium\">Statement Type</label>\n                <Select value={statementType} onValueChange={setStatementType}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"monthly\">Monthly</SelectItem>\n                    <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                    <SelectItem value=\"annual\">Annual</SelectItem>\n                    <SelectItem value=\"custom\">Custom Period</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"periodStart\" className=\"text-sm font-medium\">Start Date *</label>\n                  <Input\n                    id=\"periodStart\"\n                    type=\"date\"\n                    value={periodStart}\n                    onChange={(e) => setPeriodStart(e.target.value)}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"periodEnd\" className=\"text-sm font-medium\">End Date *</label>\n                  <Input\n                    id=\"periodEnd\"\n                    type=\"date\"\n                    value={periodEnd}\n                    onChange={(e) => setPeriodEnd(e.target.value)}\n                  />\n                </div>\n              </div>\n              \n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <Eye className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                  <div>\n                    <h4 className=\"font-medium text-blue-900\">Statement Preview</h4>\n                    <p className=\"text-sm text-blue-700 mt-1\">\n                      Your statement will include all transactions, balances, and account activity \n                      for the selected period. Available formats: PDF and Excel.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setShowGenerateDialog(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleGenerateStatement} disabled={generateMutation.isPending}>\n                {generateMutation.isPending ? \"Generating...\" : \"Generate Statement\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statements List */}\n      <div className=\"grid gap-4\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center p-8\">\n            <div className=\"text-center\">\n              <div className=\"w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n              <p>Loading statements...</p>\n            </div>\n          </div>\n        ) : statements?.length === 0 ? (\n          <Card className=\"p-8 text-center\">\n            <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Statements Generated</h3>\n            <p className=\"text-gray-600 mb-4\">\n              Generate your first account statement to view transaction history and account activity.\n            </p>\n            <Button onClick={() => setShowGenerateDialog(true)} className=\"flex items-center gap-2\">\n              <Plus className=\"h-4 w-4\" />\n              Generate First Statement\n            </Button>\n          </Card>\n        ) : (\n          statements?.map((statement) => {\n            const account = accounts?.find(a => a.id === statement.accountId);\n            \n            return (\n              <Card key={statement.id}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg flex items-center gap-2\">\n                        <FileText className=\"h-5 w-5 text-blue-600\" />\n                        {statement.statementType.charAt(0).toUpperCase() + statement.statementType.slice(1)} Statement\n                      </CardTitle>\n                      <CardDescription>\n                        Account: ****{account?.accountNumber.slice(-4)} • \n                        {new Date(statement.periodStart).toLocaleDateString()} - {new Date(statement.periodEnd).toLocaleDateString()}\n                      </CardDescription>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      {getStatusBadge(statement.status)}\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                      <div>\n                        <p className=\"font-medium text-gray-700\">Generated</p>\n                        <p className=\"text-gray-600\">\n                          {new Date(statement.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-700\">Account Type</p>\n                        <p className=\"text-gray-600 capitalize\">{account?.accountType}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-700\">Current Balance</p>\n                        <p className=\"text-gray-600 font-medium\">\n                          ${parseFloat(account?.balance || '0').toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    {statement.status === 'ready' && (\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleDownload(statement.id, 'pdf')}\n                          className=\"flex items-center gap-2\"\n                        >\n                          <FileType className=\"h-4 w-4\" />\n                          Download PDF\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleDownload(statement.id, 'excel')}\n                          className=\"flex items-center gap-2\"\n                        >\n                          <Table className=\"h-4 w-4\" />\n                          Download Excel\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })\n        )}\n      </div>\n\n      {/* Quick Actions */}\n      <Card className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200\">\n        <CardHeader>\n          <CardTitle className=\"text-lg text-blue-900\">Quick Actions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Button \n              variant=\"outline\" \n              className=\"justify-start h-auto p-4 border-blue-200 hover:bg-blue-50\"\n              onClick={() => {\n                // Generate current month statement for first account\n                if (accounts && accounts.length > 0) {\n                  const today = new Date();\n                  const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n                  \n                  setSelectedAccountId(accounts[0].id);\n                  setStatementType('monthly');\n                  setPeriodStart(startOfMonth.toISOString().split('T')[0]);\n                  setPeriodEnd(today.toISOString().split('T')[0]);\n                  setShowGenerateDialog(true);\n                }\n              }}\n            >\n              <div className=\"text-left\">\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <Calendar className=\"h-4 w-4 text-blue-600\" />\n                  <span className=\"font-medium\">Current Month</span>\n                </div>\n                <p className=\"text-sm text-gray-600\">Generate this month's statement</p>\n              </div>\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              className=\"justify-start h-auto p-4 border-blue-200 hover:bg-blue-50\"\n              onClick={() => {\n                // Generate last month statement for first account\n                if (accounts && accounts.length > 0) {\n                  const today = new Date();\n                  const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n                  const endOfLastMonth = new Date(today.getFullYear(), today.getMonth(), 0);\n                  \n                  setSelectedAccountId(accounts[0].id);\n                  setStatementType('monthly');\n                  setPeriodStart(lastMonth.toISOString().split('T')[0]);\n                  setPeriodEnd(endOfLastMonth.toISOString().split('T')[0]);\n                  setShowGenerateDialog(true);\n                }\n              }}\n            >\n              <div className=\"text-left\">\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <Clock className=\"h-4 w-4 text-blue-600\" />\n                  <span className=\"font-medium\">Last Month</span>\n                </div>\n                <p className=\"text-sm text-gray-600\">Generate previous month's statement</p>\n              </div>\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              className=\"justify-start h-auto p-4 border-blue-200 hover:bg-blue-50\"\n              onClick={() => {\n                // Generate quarterly statement for first account\n                if (accounts && accounts.length > 0) {\n                  const today = new Date();\n                  const quarterStart = new Date(today.getFullYear(), Math.floor(today.getMonth() / 3) * 3, 1);\n                  \n                  setSelectedAccountId(accounts[0].id);\n                  setStatementType('quarterly');\n                  setPeriodStart(quarterStart.toISOString().split('T')[0]);\n                  setPeriodEnd(today.toISOString().split('T')[0]);\n                  setShowGenerateDialog(true);\n                }\n              }}\n            >\n              <div className=\"text-left\">\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <Filter className=\"h-4 w-4 text-blue-600\" />\n                  <span className=\"font-medium\">Quarterly</span>\n                </div>\n                <p className=\"text-sm text-gray-600\">Generate quarter statement</p>\n              </div>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":18522},"client/src/components/customer/inheritance-management.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { toast } from '@/hooks/use-toast';\nimport { Crown, FileText, Clock, CheckCircle2, AlertCircle, Scroll, Upload, Download, Shield, Users } from 'lucide-react';\n\ninterface InheritanceProcess {\n  id: string;\n  deceasedUserId: string;\n  initiatorId: string;\n  status: 'pending' | 'in_review' | 'approved' | 'completed' | 'rejected';\n  documents: InheritanceDocument[];\n  beneficiaries: InheritanceBeneficiary[];\n  accounts: InheritanceAccount[];\n  totalValue: string;\n  processingNotes?: string;\n  reviewedBy?: string;\n  createdAt: string;\n  updatedAt: string;\n  deceased: {\n    name: string;\n    email: string;\n  };\n  initiator: {\n    name: string;\n    email: string;\n  };\n}\n\ninterface InheritanceDocument {\n  id: string;\n  inheritanceId: string;\n  documentType: 'death_certificate' | 'will' | 'trust' | 'court_order' | 'power_of_attorney' | 'other';\n  fileName: string;\n  fileUrl: string;\n  uploadedAt: string;\n  verifiedAt?: string;\n  verifiedBy?: string;\n  status: 'pending' | 'verified' | 'rejected';\n}\n\ninterface InheritanceBeneficiary {\n  id: string;\n  inheritanceId: string;\n  beneficiaryId: string;\n  percentage: number;\n  accountIds: string[];\n  status: 'pending' | 'notified' | 'accepted' | 'rejected';\n  notifiedAt?: string;\n  respondedAt?: string;\n  beneficiary: {\n    name: string;\n    email: string;\n  };\n}\n\ninterface InheritanceAccount {\n  id: string;\n  accountNumber: string;\n  accountType: string;\n  balance: string;\n  distributionStatus: 'pending' | 'in_progress' | 'completed';\n  distributedAmount?: string;\n  distributedAt?: string;\n}\n\nexport default function InheritanceManagement() {\n  const [showInitiateDialog, setShowInitiateDialog] = useState(false);\n  const [showUploadDialog, setShowUploadDialog] = useState(false);\n  const [selectedProcess, setSelectedProcess] = useState<InheritanceProcess | null>(null);\n  const [formData, setFormData] = useState({\n    deceasedEmail: '',\n    relationship: '',\n    deathDate: '',\n    notes: '',\n    documents: [] as File[]\n  });\n\n  const queryClient = useQueryClient();\n\n  // Fetch inheritance processes\n  const { data: inheritanceProcesses, isLoading } = useQuery<InheritanceProcess[]>({\n    queryKey: ['inheritance-processes'],\n    queryFn: async () => {\n      const response = await fetch('/api/inheritance/processes');\n      if (!response.ok) throw new Error('Failed to fetch inheritance processes');\n      return response.json();\n    },\n  });\n\n  // Initiate inheritance process mutation\n  const initiateProcessMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/inheritance/initiate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to initiate inheritance process');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['inheritance-processes'] });\n      setShowInitiateDialog(false);\n      resetForm();\n      toast({\n        title: \"Inheritance Process Initiated\",\n        description: \"Your inheritance claim has been submitted for review\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to initiate inheritance process\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Upload documents mutation\n  const uploadDocumentsMutation = useMutation({\n    mutationFn: async ({ processId, documents }: { processId: string; documents: File[] }) => {\n      const formData = new FormData();\n      formData.append('processId', processId);\n      documents.forEach((doc, index) => {\n        formData.append(`documents`, doc);\n      });\n\n      const response = await fetch('/api/inheritance/documents', {\n        method: 'POST',\n        body: formData,\n      });\n      if (!response.ok) throw new Error('Failed to upload documents');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['inheritance-processes'] });\n      setShowUploadDialog(false);\n      setSelectedProcess(null);\n      toast({\n        title: \"Documents Uploaded\",\n        description: \"Your inheritance documents have been uploaded for review\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to upload documents\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Accept inheritance mutation\n  const acceptInheritanceMutation = useMutation({\n    mutationFn: async ({ processId, accept }: { processId: string; accept: boolean }) => {\n      const response = await fetch(`/api/inheritance/respond/${processId}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ accept }),\n      });\n      if (!response.ok) throw new Error('Failed to respond to inheritance');\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['inheritance-processes'] });\n      toast({\n        title: variables.accept ? \"Inheritance Accepted\" : \"Inheritance Declined\",\n        description: variables.accept \n          ? \"You have accepted the inheritance. Processing will continue.\"\n          : \"You have declined the inheritance.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to respond to inheritance\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      deceasedEmail: '',\n      relationship: '',\n      deathDate: '',\n      notes: '',\n      documents: []\n    });\n  };\n\n  const handleInitiateProcess = () => {\n    if (!formData.deceasedEmail || !formData.relationship || !formData.deathDate) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    initiateProcessMutation.mutate({\n      deceasedEmail: formData.deceasedEmail,\n      relationship: formData.relationship,\n      deathDate: formData.deathDate,\n      notes: formData.notes\n    });\n  };\n\n  const handleUploadDocuments = () => {\n    if (!selectedProcess || formData.documents.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please select documents to upload\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    uploadDocumentsMutation.mutate({\n      processId: selectedProcess.id,\n      documents: formData.documents\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\"><Clock className=\"h-3 w-3 mr-1\" />Pending</Badge>;\n      case 'in_review':\n        return <Badge className=\"bg-blue-100 text-blue-800\"><FileText className=\"h-3 w-3 mr-1\" />In Review</Badge>;\n      case 'approved':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle2 className=\"h-3 w-3 mr-1\" />Approved</Badge>;\n      case 'completed':\n        return <Badge variant=\"default\"><CheckCircle2 className=\"h-3 w-3 mr-1\" />Completed</Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\"><AlertCircle className=\"h-3 w-3 mr-1\" />Rejected</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getDocumentStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"outline\"><Clock className=\"h-3 w-3 mr-1\" />Pending</Badge>;\n      case 'verified':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle2 className=\"h-3 w-3 mr-1\" />Verified</Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\"><AlertCircle className=\"h-3 w-3 mr-1\" />Rejected</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const documentTypes = [\n    { value: 'death_certificate', label: 'Death Certificate' },\n    { value: 'will', label: 'Last Will & Testament' },\n    { value: 'trust', label: 'Trust Document' },\n    { value: 'court_order', label: 'Court Order' },\n    { value: 'power_of_attorney', label: 'Power of Attorney' },\n    { value: 'other', label: 'Other Legal Document' }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-1\">\n          <h2 className=\"text-2xl font-semibold tracking-tight flex items-center gap-2\">\n            <Crown className=\"h-6 w-6 text-purple-600\" />\n            Inheritance Management\n          </h2>\n          <p className=\"text-sm text-muted-foreground\">\n            Manage inheritance processes, documentation, and beneficiary claims\n          </p>\n        </div>\n        \n        <Dialog open={showInitiateDialog} onOpenChange={setShowInitiateDialog}>\n          <DialogTrigger asChild>\n            <Button className=\"flex items-center gap-2\">\n              <FileText className=\"h-4 w-4\" />\n              Initiate Inheritance Claim\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>Initiate Inheritance Process</DialogTitle>\n              <DialogDescription>\n                Start the inheritance process for a deceased account holder. Proper documentation will be required.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"space-y-2\">\n                <label htmlFor=\"deceased-email\" className=\"text-sm font-medium\">Deceased Person's Email *</label>\n                <Input\n                  id=\"deceased-email\"\n                  value={formData.deceasedEmail}\n                  onChange={(e) => setFormData(prev => ({ ...prev, deceasedEmail: e.target.value }))}\n                  placeholder=\"Enter deceased person's email\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label htmlFor=\"relationship\" className=\"text-sm font-medium\">Relationship to Deceased *</label>\n                <Select value={formData.relationship} onValueChange={(value) => setFormData(prev => ({ ...prev, relationship: value }))}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select relationship\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"spouse\">Spouse</SelectItem>\n                    <SelectItem value=\"child\">Child</SelectItem>\n                    <SelectItem value=\"parent\">Parent</SelectItem>\n                    <SelectItem value=\"sibling\">Sibling</SelectItem>\n                    <SelectItem value=\"beneficiary\">Named Beneficiary</SelectItem>\n                    <SelectItem value=\"executor\">Estate Executor</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label htmlFor=\"death-date\" className=\"text-sm font-medium\">Date of Death *</label>\n                <Input\n                  id=\"death-date\"\n                  type=\"date\"\n                  value={formData.deathDate}\n                  onChange={(e) => setFormData(prev => ({ ...prev, deathDate: e.target.value }))}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label htmlFor=\"notes\" className=\"text-sm font-medium\">Additional Information</label>\n                <Textarea\n                  id=\"notes\"\n                  value={formData.notes}\n                  onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                  placeholder=\"Provide any additional relevant information\"\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                <div className=\"flex items-center gap-2 text-blue-800\">\n                  <Shield className=\"h-4 w-4\" />\n                  <p className=\"font-medium\">Required Documentation</p>\n                </div>\n                <p className=\"text-sm text-blue-700 mt-1\">\n                  After submitting this claim, you'll need to upload legal documentation including death certificate, \n                  will, trust documents, or court orders as applicable.\n                </p>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setShowInitiateDialog(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleInitiateProcess} disabled={initiateProcessMutation.isPending}>\n                {initiateProcessMutation.isPending ? \"Submitting...\" : \"Submit Claim\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Inheritance Processes List */}\n      <div className=\"grid gap-4\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center p-8\">\n            <div className=\"text-center\">\n              <div className=\"w-8 h-8 border-4 border-purple-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n              <p>Loading inheritance processes...</p>\n            </div>\n          </div>\n        ) : inheritanceProcesses?.length === 0 ? (\n          <Card className=\"p-8 text-center\">\n            <Scroll className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Inheritance Processes</h3>\n            <p className=\"text-gray-600 mb-4\">\n              You don't have any active inheritance processes. If someone has passed away and you believe you're entitled to their assets, you can initiate a claim.\n            </p>\n            <Button onClick={() => setShowInitiateDialog(true)} className=\"flex items-center gap-2\">\n              <FileText className=\"h-4 w-4\" />\n              Initiate First Claim\n            </Button>\n          </Card>\n        ) : (\n          inheritanceProcesses?.map((process) => (\n            <Card key={process.id}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <Crown className=\"h-5 w-5 text-purple-600\" />\n                      Inheritance Process #{process.id.slice(-6)}\n                    </CardTitle>\n                    <CardDescription>\n                      Deceased: {process.deceased.name} • Total Value: ${parseFloat(process.totalValue || '0').toLocaleString()}\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {getStatusBadge(process.status)}\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  \n                  {/* Process Details */}\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p className=\"font-medium text-gray-700\">Initiated By</p>\n                      <p className=\"text-gray-600\">{process.initiator.name}</p>\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-gray-700\">Date Initiated</p>\n                      <p className=\"text-gray-600\">{new Date(process.createdAt).toLocaleDateString()}</p>\n                    </div>\n                  </div>\n\n                  {/* Documents */}\n                  {process.documents && process.documents.length > 0 && (\n                    <div>\n                      <h4 className=\"font-medium mb-2 flex items-center gap-2\">\n                        <FileText className=\"h-4 w-4\" />\n                        Documents ({process.documents.length})\n                      </h4>\n                      <div className=\"space-y-2\">\n                        {process.documents.map((doc) => (\n                          <div key={doc.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2\">\n                                <p className=\"font-medium\">{doc.fileName}</p>\n                                {getDocumentStatusBadge(doc.status)}\n                              </div>\n                              <p className=\"text-sm text-gray-600\">\n                                {documentTypes.find(t => t.value === doc.documentType)?.label || doc.documentType}\n                              </p>\n                              <p className=\"text-xs text-gray-400\">\n                                Uploaded: {new Date(doc.uploadedAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => window.open(doc.fileUrl, '_blank')}\n                            >\n                              <Download className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Beneficiaries */}\n                  {process.beneficiaries && process.beneficiaries.length > 0 && (\n                    <div>\n                      <h4 className=\"font-medium mb-2 flex items-center gap-2\">\n                        <Users className=\"h-4 w-4\" />\n                        Beneficiaries ({process.beneficiaries.length})\n                      </h4>\n                      <div className=\"space-y-2\">\n                        {process.beneficiaries.map((beneficiary) => (\n                          <div key={beneficiary.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2\">\n                                <p className=\"font-medium\">{beneficiary.beneficiary.name}</p>\n                                {getStatusBadge(beneficiary.status)}\n                              </div>\n                              <p className=\"text-sm text-gray-600\">{beneficiary.beneficiary.email}</p>\n                              <p className=\"text-xs text-gray-500\">\n                                {beneficiary.percentage}% of estate • {beneficiary.accountIds.length} accounts\n                              </p>\n                            </div>\n                            {beneficiary.status === 'pending' && (\n                              <div className=\"flex gap-2\">\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => acceptInheritanceMutation.mutate({ processId: process.id, accept: true })}\n                                  className=\"bg-green-600 hover:bg-green-700\"\n                                >\n                                  Accept\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => acceptInheritanceMutation.mutate({ processId: process.id, accept: false })}\n                                  className=\"text-red-600 border-red-300 hover:bg-red-50\"\n                                >\n                                  Decline\n                                </Button>\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Accounts */}\n                  {process.accounts && process.accounts.length > 0 && (\n                    <div>\n                      <h4 className=\"font-medium mb-2 flex items-center gap-2\">\n                        <Shield className=\"h-4 w-4\" />\n                        Affected Accounts ({process.accounts.length})\n                      </h4>\n                      <div className=\"space-y-2\">\n                        {process.accounts.map((account) => (\n                          <div key={account.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2\">\n                                <p className=\"font-medium\">Account #{account.accountNumber}</p>\n                                {getStatusBadge(account.distributionStatus)}\n                              </div>\n                              <p className=\"text-sm text-gray-600\">\n                                {account.accountType} • Balance: ${parseFloat(account.balance).toLocaleString()}\n                              </p>\n                              {account.distributedAmount && (\n                                <p className=\"text-xs text-gray-500\">\n                                  Distributed: ${parseFloat(account.distributedAmount).toLocaleString()} on {account.distributedAt ? new Date(account.distributedAt).toLocaleDateString() : 'N/A'}\n                                </p>\n                              )}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Processing Notes */}\n                  {process.processingNotes && (\n                    <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                      <p className=\"font-medium text-blue-900\">Processing Notes</p>\n                      <p className=\"text-sm text-blue-800 mt-1\">{process.processingNotes}</p>\n                    </div>\n                  )}\n\n                  {/* Action Buttons */}\n                  <div className=\"flex gap-2 pt-4 border-t\">\n                    {(process.status === 'pending' || process.status === 'in_review') && (\n                      <Dialog open={showUploadDialog} onOpenChange={setShowUploadDialog}>\n                        <DialogTrigger asChild>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => setSelectedProcess(process)}\n                            className=\"flex items-center gap-2\"\n                          >\n                            <Upload className=\"h-4 w-4\" />\n                            Upload Documents\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-[500px]\">\n                          <DialogHeader>\n                            <DialogTitle>Upload Inheritance Documents</DialogTitle>\n                            <DialogDescription>\n                              Upload required legal documentation to support your inheritance claim.\n                            </DialogDescription>\n                          </DialogHeader>\n                          <div className=\"grid gap-4 py-4\">\n                            <div className=\"space-y-2\">\n                              <label htmlFor=\"documents\" className=\"text-sm font-medium\">Documents *</label>\n                              <input\n                                id=\"documents\"\n                                type=\"file\"\n                                multiple\n                                accept=\".pdf,.jpg,.jpeg,.png,.doc,.docx\"\n                                onChange={(e) => {\n                                  const files = Array.from(e.target.files || []);\n                                  setFormData(prev => ({ ...prev, documents: files }));\n                                }}\n                                className=\"block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\n                              />\n                              <p className=\"text-xs text-gray-500\">\n                                Accepted formats: PDF, JPEG, PNG, DOC, DOCX. Max 10MB per file.\n                              </p>\n                            </div>\n\n                            <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n                              <div className=\"flex items-center gap-2 text-green-800\">\n                                <FileText className=\"h-4 w-4\" />\n                                <p className=\"font-medium\">Required Documents</p>\n                              </div>\n                              <ul className=\"text-sm text-green-700 mt-1 space-y-1\">\n                                <li>• Death Certificate (certified copy)</li>\n                                <li>• Last Will & Testament (if available)</li>\n                                <li>• Trust Documents (if applicable)</li>\n                                <li>• Court Orders (if applicable)</li>\n                                <li>• Government-issued ID</li>\n                              </ul>\n                            </div>\n\n                            {formData.documents.length > 0 && (\n                              <div>\n                                <p className=\"text-sm font-medium mb-2\">Selected Files:</p>\n                                <ul className=\"text-sm text-gray-600 space-y-1\">\n                                  {formData.documents.map((file, index) => (\n                                    <li key={index} className=\"flex items-center gap-2\">\n                                      <FileText className=\"h-4 w-4\" />\n                                      {file.name} ({Math.round(file.size / 1024)}KB)\n                                    </li>\n                                  ))}\n                                </ul>\n                              </div>\n                            )}\n                          </div>\n                          <DialogFooter>\n                            <Button variant=\"outline\" onClick={() => setShowUploadDialog(false)}>\n                              Cancel\n                            </Button>\n                            <Button onClick={handleUploadDocuments} disabled={uploadDocumentsMutation.isPending}>\n                              {uploadDocumentsMutation.isPending ? \"Uploading...\" : \"Upload Documents\"}\n                            </Button>\n                          </DialogFooter>\n                        </DialogContent>\n                      </Dialog>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":27814},"client/src/components/customer/joint-accounts.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { toast } from '@/hooks/use-toast';\nimport { Users, UserPlus, Crown, Shield, AlertTriangle, CheckCircle2, Clock, UserCheck, UserX } from 'lucide-react';\n\ninterface JointAccount {\n  id: string;\n  accountNumber: string;\n  accountType: string;\n  balance: string;\n  primaryOwnerId: string;\n  jointOwners: JointOwner[];\n  ownershipType: 'joint_tenancy' | 'tenancy_in_common';\n  createdAt: string;\n  status: string;\n}\n\ninterface JointOwner {\n  id: string;\n  userId: string;\n  accountId: string;\n  ownershipPercentage: number;\n  permissions: string[];\n  status: 'active' | 'pending' | 'suspended';\n  addedAt: string;\n  user: {\n    name: string;\n    email: string;\n  };\n}\n\ninterface OwnershipRequest {\n  id: string;\n  accountId: string;\n  requesterId: string;\n  targetUserId: string;\n  requestType: 'add_joint_owner' | 'transfer_ownership' | 'change_permissions';\n  ownershipPercentage?: number;\n  permissions?: string[];\n  status: 'pending' | 'approved' | 'rejected';\n  notes?: string;\n  createdAt: string;\n  requester: {\n    name: string;\n    email: string;\n  };\n  targetUser: {\n    name: string;\n    email: string;\n  };\n}\n\nexport default function JointAccountsManagement() {\n  const [showAddOwnerDialog, setShowAddOwnerDialog] = useState(false);\n  const [showTransferDialog, setShowTransferDialog] = useState(false);\n  const [selectedAccount, setSelectedAccount] = useState<JointAccount | null>(null);\n  const [formData, setFormData] = useState({\n    email: '',\n    ownershipPercentage: '',\n    permissions: [] as string[],\n    notes: ''\n  });\n\n  const queryClient = useQueryClient();\n\n  // Fetch joint accounts\n  const { data: jointAccounts, isLoading } = useQuery<JointAccount[]>({\n    queryKey: ['joint-accounts'],\n    queryFn: async () => {\n      const response = await fetch('/api/accounts/joint');\n      if (!response.ok) throw new Error('Failed to fetch joint accounts');\n      return response.json();\n    },\n  });\n\n  // Fetch ownership requests\n  const { data: ownershipRequests } = useQuery<OwnershipRequest[]>({\n    queryKey: ['ownership-requests'],\n    queryFn: async () => {\n      const response = await fetch('/api/ownership/requests');\n      if (!response.ok) throw new Error('Failed to fetch ownership requests');\n      return response.json();\n    },\n  });\n\n  // Add joint owner mutation\n  const addJointOwnerMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/accounts/joint/add-owner', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to add joint owner');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['joint-accounts'] });\n      queryClient.invalidateQueries({ queryKey: ['ownership-requests'] });\n      setShowAddOwnerDialog(false);\n      resetForm();\n      toast({\n        title: \"Request Sent\",\n        description: \"Joint ownership request has been sent for approval\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add joint owner\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Transfer ownership mutation\n  const transferOwnershipMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/accounts/transfer-ownership', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to initiate ownership transfer');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['joint-accounts'] });\n      queryClient.invalidateQueries({ queryKey: ['ownership-requests'] });\n      setShowTransferDialog(false);\n      resetForm();\n      toast({\n        title: \"Transfer Request Sent\",\n        description: \"Ownership transfer request has been sent for approval\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to initiate ownership transfer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Respond to ownership request mutation\n  const respondToRequestMutation = useMutation({\n    mutationFn: async ({ requestId, action, notes }: { requestId: string; action: 'approve' | 'reject'; notes?: string }) => {\n      const response = await fetch(`/api/ownership/requests/${requestId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ action, notes }),\n      });\n      if (!response.ok) throw new Error(`Failed to ${action} request`);\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['ownership-requests'] });\n      queryClient.invalidateQueries({ queryKey: ['joint-accounts'] });\n      toast({\n        title: variables.action === 'approve' ? \"Request Approved\" : \"Request Rejected\",\n        description: `The ownership request has been ${variables.action}d`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to respond to request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      email: '',\n      ownershipPercentage: '',\n      permissions: [],\n      notes: ''\n    });\n    setSelectedAccount(null);\n  };\n\n  const handleAddJointOwner = () => {\n    if (!selectedAccount || !formData.email || !formData.ownershipPercentage) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (parseFloat(formData.ownershipPercentage) <= 0 || parseFloat(formData.ownershipPercentage) > 100) {\n      toast({\n        title: \"Error\",\n        description: \"Ownership percentage must be between 0 and 100\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addJointOwnerMutation.mutate({\n      accountId: selectedAccount.id,\n      targetUserEmail: formData.email,\n      ownershipPercentage: parseFloat(formData.ownershipPercentage),\n      permissions: formData.permissions,\n      notes: formData.notes\n    });\n  };\n\n  const handleTransferOwnership = () => {\n    if (!selectedAccount || !formData.email) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    transferOwnershipMutation.mutate({\n      accountId: selectedAccount.id,\n      newOwnerEmail: formData.email,\n      notes: formData.notes\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'active':\n        return <Badge variant=\"default\"><CheckCircle2 className=\"h-3 w-3 mr-1\" />Active</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\"><Clock className=\"h-3 w-3 mr-1\" />Pending</Badge>;\n      case 'suspended':\n        return <Badge variant=\"destructive\">Suspended</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const permissions = [\n    { value: 'view_balance', label: 'View Balance' },\n    { value: 'view_transactions', label: 'View Transactions' },\n    { value: 'make_transfers', label: 'Make Transfers' },\n    { value: 'add_beneficiaries', label: 'Add Beneficiaries' },\n    { value: 'manage_account', label: 'Manage Account Settings' }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-1\">\n          <h2 className=\"text-2xl font-semibold tracking-tight flex items-center gap-2\">\n            <Users className=\"h-6 w-6 text-blue-600\" />\n            Joint Accounts & Ownership\n          </h2>\n          <p className=\"text-sm text-muted-foreground\">\n            Manage joint account ownership, permissions, and transfer requests\n          </p>\n        </div>\n      </div>\n\n      {/* Pending Ownership Requests */}\n      {ownershipRequests && ownershipRequests.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-5 w-5 text-orange-500\" />\n              Pending Ownership Requests\n            </CardTitle>\n            <CardDescription>\n              Review and respond to ownership and joint account requests\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {ownershipRequests.filter(req => req.status === 'pending').map((request) => (\n                <div key={request.id} className=\"flex items-center justify-between p-4 bg-orange-50 border border-orange-200 rounded-lg\">\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium\">\n                      {request.requestType === 'add_joint_owner' ? 'Joint Owner Request' : \n                       request.requestType === 'transfer_ownership' ? 'Ownership Transfer' : 'Permission Change'}\n                    </p>\n                    <p className=\"text-sm text-gray-600\">\n                      From: {request.requester.name} ({request.requester.email})\n                    </p>\n                    <p className=\"text-sm text-gray-600\">\n                      Target: {request.targetUser.name} ({request.targetUser.email})\n                    </p>\n                    {request.ownershipPercentage && (\n                      <p className=\"text-sm text-gray-600\">\n                        Ownership: {request.ownershipPercentage}%\n                      </p>\n                    )}\n                    {request.notes && (\n                      <p className=\"text-sm text-gray-500 mt-1\">Notes: {request.notes}</p>\n                    )}\n                    <p className=\"text-xs text-gray-400 mt-1\">\n                      Requested: {new Date(request.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      onClick={() => respondToRequestMutation.mutate({ requestId: request.id, action: 'approve' })}\n                      className=\"bg-green-600 hover:bg-green-700\"\n                    >\n                      <UserCheck className=\"h-4 w-4 mr-1\" />\n                      Approve\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => respondToRequestMutation.mutate({ requestId: request.id, action: 'reject' })}\n                      className=\"text-red-600 border-red-300 hover:bg-red-50\"\n                    >\n                      <UserX className=\"h-4 w-4 mr-1\" />\n                      Reject\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Joint Accounts List */}\n      <div className=\"grid gap-4\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center p-8\">\n            <div className=\"text-center\">\n              <div className=\"w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n              <p>Loading joint accounts...</p>\n            </div>\n          </div>\n        ) : jointAccounts?.length === 0 ? (\n          <Card className=\"p-8 text-center\">\n            <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Joint Accounts</h3>\n            <p className=\"text-gray-600 mb-4\">\n              You don't have any joint accounts yet. Contact support to set up joint account access.\n            </p>\n          </Card>\n        ) : (\n          jointAccounts?.map((account) => (\n            <Card key={account.id}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <Shield className=\"h-5 w-5 text-green-600\" />\n                      Account #{account.accountNumber}\n                    </CardTitle>\n                    <CardDescription>\n                      {account.accountType} • Balance: ${parseFloat(account.balance).toLocaleString()}\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {getStatusBadge(account.status)}\n                    <Badge variant=\"outline\">\n                      {account.ownershipType === 'joint_tenancy' ? 'Joint Tenancy' : 'Tenancy in Common'}\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Joint Owners */}\n                  <div>\n                    <h4 className=\"font-medium mb-2 flex items-center gap-2\">\n                      <Crown className=\"h-4 w-4 text-gold-500\" />\n                      Account Owners\n                    </h4>\n                    <div className=\"space-y-2\">\n                      {account.jointOwners.map((owner) => (\n                        <div key={owner.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2\">\n                              <p className=\"font-medium\">{owner.user.name}</p>\n                              {owner.userId === account.primaryOwnerId && (\n                                <Badge variant=\"default\" className=\"text-xs\">Primary</Badge>\n                              )}\n                              {getStatusBadge(owner.status)}\n                            </div>\n                            <p className=\"text-sm text-gray-600\">{owner.user.email}</p>\n                            <p className=\"text-xs text-gray-500\">\n                              {owner.ownershipPercentage}% ownership • \n                              Permissions: {owner.permissions.join(', ')}\n                            </p>\n                            <p className=\"text-xs text-gray-400\">\n                              Added: {new Date(owner.addedAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Action Buttons */}\n                  <div className=\"flex gap-2 pt-4 border-t\">\n                    <Dialog open={showAddOwnerDialog} onOpenChange={setShowAddOwnerDialog}>\n                      <DialogTrigger asChild>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => setSelectedAccount(account)}\n                          className=\"flex items-center gap-2\"\n                        >\n                          <UserPlus className=\"h-4 w-4\" />\n                          Add Joint Owner\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"sm:max-w-[500px]\">\n                        <DialogHeader>\n                          <DialogTitle>Add Joint Owner</DialogTitle>\n                          <DialogDescription>\n                            Send a request to add someone as a joint owner of this account.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"grid gap-4 py-4\">\n                          <div className=\"space-y-2\">\n                            <label htmlFor=\"email\" className=\"text-sm font-medium\">Email Address *</label>\n                            <Input\n                              id=\"email\"\n                              value={formData.email}\n                              onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                              placeholder=\"Enter email address\"\n                            />\n                          </div>\n                          \n                          <div className=\"space-y-2\">\n                            <label htmlFor=\"percentage\" className=\"text-sm font-medium\">Ownership Percentage *</label>\n                            <Input\n                              id=\"percentage\"\n                              type=\"number\"\n                              min=\"0\"\n                              max=\"100\"\n                              value={formData.ownershipPercentage}\n                              onChange={(e) => setFormData(prev => ({ ...prev, ownershipPercentage: e.target.value }))}\n                              placeholder=\"e.g., 50\"\n                            />\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <label className=\"text-sm font-medium\">Permissions</label>\n                            <div className=\"grid grid-cols-2 gap-2\">\n                              {permissions.map((permission) => (\n                                <label key={permission.value} className=\"flex items-center space-x-2\">\n                                  <input\n                                    type=\"checkbox\"\n                                    checked={formData.permissions.includes(permission.value)}\n                                    onChange={(e) => {\n                                      if (e.target.checked) {\n                                        setFormData(prev => ({\n                                          ...prev,\n                                          permissions: [...prev.permissions, permission.value]\n                                        }));\n                                      } else {\n                                        setFormData(prev => ({\n                                          ...prev,\n                                          permissions: prev.permissions.filter(p => p !== permission.value)\n                                        }));\n                                      }\n                                    }}\n                                    className=\"rounded\"\n                                  />\n                                  <span className=\"text-sm\">{permission.label}</span>\n                                </label>\n                              ))}\n                            </div>\n                          </div>\n                          \n                          <div className=\"space-y-2\">\n                            <label htmlFor=\"notes\" className=\"text-sm font-medium\">Notes (Optional)</label>\n                            <Textarea\n                              id=\"notes\"\n                              value={formData.notes}\n                              onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                              placeholder=\"Additional notes or reason for request\"\n                              rows={3}\n                            />\n                          </div>\n                        </div>\n                        <DialogFooter>\n                          <Button variant=\"outline\" onClick={() => setShowAddOwnerDialog(false)}>\n                            Cancel\n                          </Button>\n                          <Button onClick={handleAddJointOwner} disabled={addJointOwnerMutation.isPending}>\n                            {addJointOwnerMutation.isPending ? \"Sending...\" : \"Send Request\"}\n                          </Button>\n                        </DialogFooter>\n                      </DialogContent>\n                    </Dialog>\n\n                    <Dialog open={showTransferDialog} onOpenChange={setShowTransferDialog}>\n                      <DialogTrigger asChild>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => setSelectedAccount(account)}\n                          className=\"flex items-center gap-2\"\n                        >\n                          <Crown className=\"h-4 w-4\" />\n                          Transfer Ownership\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"sm:max-w-[500px]\">\n                        <DialogHeader>\n                          <DialogTitle>Transfer Account Ownership</DialogTitle>\n                          <DialogDescription>\n                            Transfer primary ownership of this account to another user. This requires approval.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"grid gap-4 py-4\">\n                          <div className=\"space-y-2\">\n                            <label htmlFor=\"transfer-email\" className=\"text-sm font-medium\">New Owner Email *</label>\n                            <Input\n                              id=\"transfer-email\"\n                              value={formData.email}\n                              onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                              placeholder=\"Enter new owner's email address\"\n                            />\n                          </div>\n                          \n                          <div className=\"space-y-2\">\n                            <label htmlFor=\"transfer-notes\" className=\"text-sm font-medium\">Reason for Transfer</label>\n                            <Textarea\n                              id=\"transfer-notes\"\n                              value={formData.notes}\n                              onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                              placeholder=\"Explain why you're transferring ownership\"\n                              rows={3}\n                            />\n                          </div>\n\n                          <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\n                            <div className=\"flex items-center gap-2 text-red-800\">\n                              <AlertTriangle className=\"h-4 w-4\" />\n                              <p className=\"font-medium\">Important</p>\n                            </div>\n                            <p className=\"text-sm text-red-700 mt-1\">\n                              Transferring ownership will remove your primary access to this account. \n                              This action requires admin approval and cannot be easily reversed.\n                            </p>\n                          </div>\n                        </div>\n                        <DialogFooter>\n                          <Button variant=\"outline\" onClick={() => setShowTransferDialog(false)}>\n                            Cancel\n                          </Button>\n                          <Button \n                            onClick={handleTransferOwnership} \n                            disabled={transferOwnershipMutation.isPending}\n                            className=\"bg-red-600 hover:bg-red-700\"\n                          >\n                            {transferOwnershipMutation.isPending ? \"Sending...\" : \"Request Transfer\"}\n                          </Button>\n                        </DialogFooter>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":24477},"client/src/components/notifications/notifications-center.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { toast } from '@/hooks/use-toast';\nimport { Bell, BellRing, CheckCircle2, X, Eye, Trash2, CheckCheck } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface Notification {\n  id: string;\n  userId: string;\n  type: string;\n  title: string;\n  message: string;\n  status: 'unread' | 'read' | 'archived';\n  metadata: any;\n  createdAt: string;\n}\n\nexport default function NotificationsCenter() {\n  const [selectedNotification, setSelectedNotification] = useState<Notification | null>(null);\n  const [showDialog, setShowDialog] = useState(false);\n\n  const queryClient = useQueryClient();\n\n  // Fetch notifications\n  const { data: notifications, isLoading } = useQuery<Notification[]>({\n    queryKey: ['notifications'],\n    queryFn: async () => {\n      const response = await fetch('/api/notifications');\n      if (!response.ok) throw new Error('Failed to fetch notifications');\n      return response.json();\n    },\n  });\n\n  // Fetch unread count\n  const { data: unreadCount } = useQuery<{ count: number }>({\n    queryKey: ['notifications-unread-count'],\n    queryFn: async () => {\n      const response = await fetch('/api/notifications/unread-count');\n      if (!response.ok) throw new Error('Failed to fetch unread count');\n      return response.json();\n    },\n  });\n\n  // Fetch recent admin responses\n  const { data: recentAdminResponses } = useQuery<Notification[]>({\n    queryKey: ['recent-admin-responses'],\n    queryFn: async () => {\n      const response = await fetch('/api/notifications/recent-admin-responses');\n      if (!response.ok) throw new Error('Failed to fetch recent admin responses');\n      return response.json();\n    },\n  });\n\n  // Mark notification as read\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      const response = await fetch(`/api/notifications/${notificationId}/read`, {\n        method: 'PUT',\n      });\n      if (!response.ok) throw new Error('Failed to mark notification as read');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['notifications'] });\n      queryClient.invalidateQueries({ queryKey: ['notifications-unread-count'] });\n      queryClient.invalidateQueries({ queryKey: ['recent-admin-responses'] });\n    },\n  });\n\n  // Mark all as read\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/notifications/mark-all-read', {\n        method: 'PUT',\n      });\n      if (!response.ok) throw new Error('Failed to mark all notifications as read');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['notifications'] });\n      queryClient.invalidateQueries({ queryKey: ['notifications-unread-count'] });\n      toast({ title: \"Success\", description: \"All notifications marked as read\" });\n    },\n  });\n\n  // Delete notification\n  const deleteNotificationMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      const response = await fetch(`/api/notifications/${notificationId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete notification');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['notifications'] });\n      queryClient.invalidateQueries({ queryKey: ['notifications-unread-count'] });\n      toast({ title: \"Success\", description: \"Notification deleted\" });\n    },\n  });\n\n  const handleNotificationClick = (notification: Notification) => {\n    setSelectedNotification(notification);\n    setShowDialog(true);\n    \n    // Mark as read if unread\n    if (notification.status === 'unread') {\n      markAsReadMutation.mutate(notification.id);\n    }\n  };\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'admin_response':\n      case 'admin_announcement':\n      case 'support_response':\n        return <BellRing className=\"h-5 w-5 text-blue-600\" />;\n      case 'account_update':\n        return <CheckCircle2 className=\"h-5 w-5 text-green-600\" />;\n      case 'security':\n        return <Bell className=\"h-5 w-5 text-red-600\" />;\n      default:\n        return <Bell className=\"h-5 w-5 text-gray-600\" />;\n    }\n  };\n\n  const getNotificationBadgeColor = (type: string) => {\n    switch (type) {\n      case 'admin_response':\n      case 'admin_announcement':\n        return 'bg-blue-100 text-blue-800';\n      case 'account_update':\n        return 'bg-green-100 text-green-800';\n      case 'security':\n      case 'fraud_alert':\n        return 'bg-red-100 text-red-800';\n      case 'support_response':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const unreadNotifications = notifications?.filter(n => n.status === 'unread') || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-1\">\n          <h2 className=\"text-2xl font-semibold tracking-tight flex items-center gap-2\">\n            <Bell className=\"h-6 w-6 text-blue-600\" />\n            Notifications Center\n            {unreadCount && unreadCount.count > 0 && (\n              <Badge className=\"bg-red-100 text-red-800 ml-2\">\n                {unreadCount.count} unread\n              </Badge>\n            )}\n          </h2>\n          <p className=\"text-sm text-muted-foreground\">\n            Stay updated with admin responses and important account notifications\n          </p>\n        </div>\n        {unreadNotifications.length > 0 && (\n          <Button onClick={() => markAllAsReadMutation.mutate()} disabled={markAllAsReadMutation.isPending}>\n            <CheckCheck className=\"h-4 w-4 mr-2\" />\n            Mark All Read\n          </Button>\n        )}\n      </div>\n\n      {/* Recent Admin Responses */}\n      {recentAdminResponses && recentAdminResponses.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BellRing className=\"h-5 w-5 text-blue-600\" />\n              Recent Admin Responses\n            </CardTitle>\n            <CardDescription>\n              Latest responses and notifications from our admin team\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {recentAdminResponses.slice(0, 3).map((notification) => (\n                <div\n                  key={notification.id}\n                  className={`p-4 rounded-lg border cursor-pointer transition-colors hover:bg-gray-50 ${\n                    notification.status === 'unread' ? 'border-blue-200 bg-blue-50' : 'border-gray-200'\n                  }`}\n                  onClick={() => handleNotificationClick(notification)}\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start gap-3\">\n                      {getNotificationIcon(notification.type)}\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-sm\">{notification.title}</h4>\n                        <p className=\"text-sm text-gray-600 line-clamp-2\">{notification.message}</p>\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          {formatDistanceToNow(new Date(notification.createdAt), { addSuffix: true })}\n                        </p>\n                      </div>\n                    </div>\n                    <Badge className={getNotificationBadgeColor(notification.type)}>\n                      {notification.type.replace('_', ' ')}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* All Notifications */}\n      <Card>\n        <CardHeader>\n          <CardTitle>All Notifications</CardTitle>\n          <CardDescription>\n            Complete history of all notifications and messages\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {notifications && notifications.length > 0 ? (\n            <div className=\"space-y-3\">\n              {notifications.map((notification) => (\n                <div\n                  key={notification.id}\n                  className={`p-4 rounded-lg border cursor-pointer transition-colors hover:bg-gray-50 ${\n                    notification.status === 'unread' ? 'border-blue-200 bg-blue-50' : 'border-gray-200'\n                  }`}\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start gap-3\" onClick={() => handleNotificationClick(notification)}>\n                      {getNotificationIcon(notification.type)}\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <h4 className=\"font-medium text-sm\">{notification.title}</h4>\n                          {notification.status === 'unread' && (\n                            <div className=\"h-2 w-2 bg-blue-600 rounded-full\"></div>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-gray-600 line-clamp-2\">{notification.message}</p>\n                        <div className=\"flex items-center gap-4 mt-2\">\n                          <Badge className={getNotificationBadgeColor(notification.type)}>\n                            {notification.type.replace('_', ' ')}\n                          </Badge>\n                          <p className=\"text-xs text-gray-500\">\n                            {formatDistanceToNow(new Date(notification.createdAt), { addSuffix: true })}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleNotificationClick(notification);\n                        }}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          deleteNotificationMutation.mutate(notification.id);\n                        }}\n                        disabled={deleteNotificationMutation.isPending}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Bell className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No Notifications</h3>\n              <p className=\"text-gray-600\">You have no notifications at this time.</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Notification Detail Dialog */}\n      <Dialog open={showDialog} onOpenChange={setShowDialog}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              {selectedNotification && getNotificationIcon(selectedNotification.type)}\n              {selectedNotification?.title}\n            </DialogTitle>\n            <DialogDescription>\n              {selectedNotification && (\n                <div className=\"flex items-center gap-2 mt-2\">\n                  <Badge className={selectedNotification ? getNotificationBadgeColor(selectedNotification.type) : ''}>\n                    {selectedNotification?.type.replace('_', ' ')}\n                  </Badge>\n                  <span className=\"text-sm text-gray-500\">\n                    {selectedNotification && formatDistanceToNow(new Date(selectedNotification.createdAt), { addSuffix: true })}\n                  </span>\n                </div>\n              )}\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedNotification && (\n            <div className=\"py-4\">\n              <div className=\"bg-gray-50 rounded-lg p-4\">\n                <p className=\"text-gray-800 leading-relaxed\">{selectedNotification.message}</p>\n                \n                {selectedNotification.metadata && Object.keys(selectedNotification.metadata).length > 0 && (\n                  <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                    <h4 className=\"font-medium text-sm mb-2\">Additional Information:</h4>\n                    <div className=\"text-sm text-gray-600\">\n                      {Object.entries(selectedNotification.metadata).map(([key, value]) => (\n                        <div key={key} className=\"flex justify-between\">\n                          <span className=\"capitalize\">{key.replace('_', ' ')}:</span>\n                          <span className=\"font-mono\">{String(value)}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowDialog(false)}>\n              Close\n            </Button>\n            {selectedNotification?.status === 'unread' && (\n              <Button \n                onClick={() => {\n                  markAsReadMutation.mutate(selectedNotification.id);\n                  setShowDialog(false);\n                }}\n                disabled={markAsReadMutation.isPending}\n              >\n                Mark as Read\n              </Button>\n            )}\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":14801},"client/src/components/admin/notification-management.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { toast } from '@/hooks/use-toast';\nimport { Bell, Send, Users, User, MessageSquare, BellRing, CheckCircle, AlertTriangle } from 'lucide-react';\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n}\n\ninterface NotificationForm {\n  userId: string;\n  title: string;\n  message: string;\n  type: string;\n}\n\ninterface BulkNotificationForm {\n  userIds: string[];\n  title: string;\n  message: string;\n  type: string;\n}\n\ninterface BroadcastForm {\n  title: string;\n  message: string;\n  type: string;\n}\n\nexport default function NotificationManagement() {\n  const [showSingleDialog, setShowSingleDialog] = useState(false);\n  const [showBulkDialog, setShowBulkDialog] = useState(false);\n  const [showBroadcastDialog, setShowBroadcastDialog] = useState(false);\n  \n  const [singleForm, setSingleForm] = useState<NotificationForm>({\n    userId: '',\n    title: '',\n    message: '',\n    type: 'admin_response'\n  });\n  \n  const [bulkForm, setBulkForm] = useState<BulkNotificationForm>({\n    userIds: [],\n    title: '',\n    message: '',\n    type: 'admin_announcement'\n  });\n  \n  const [broadcastForm, setBroadcastForm] = useState<BroadcastForm>({\n    title: '',\n    message: '',\n    type: 'admin_announcement'\n  });\n  \n  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n\n  const queryClient = useQueryClient();\n\n  // Fetch all customers\n  const { data: customers, isLoading: customersLoading } = useQuery<User[]>({\n    queryKey: ['customers'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/users');\n      if (!response.ok) throw new Error('Failed to fetch customers');\n      const users = await response.json();\n      return users.filter((user: User) => user.role === 'customer');\n    },\n  });\n\n  // Send single notification\n  const sendSingleNotificationMutation = useMutation({\n    mutationFn: async (data: NotificationForm) => {\n      const response = await fetch('/api/admin/notifications/send', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to send notification');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Notification sent successfully\" });\n      setShowSingleDialog(false);\n      setSingleForm({ userId: '', title: '', message: '', type: 'admin_response' });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to send notification\", variant: \"destructive\" });\n    },\n  });\n\n  // Send bulk notifications\n  const sendBulkNotificationMutation = useMutation({\n    mutationFn: async (data: BulkNotificationForm) => {\n      const response = await fetch('/api/admin/notifications/send-bulk', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to send bulk notifications');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({ title: \"Success\", description: `${data.notifications.length} notifications sent successfully` });\n      setShowBulkDialog(false);\n      setBulkForm({ userIds: [], title: '', message: '', type: 'admin_announcement' });\n      setSelectedUsers([]);\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to send bulk notifications\", variant: \"destructive\" });\n    },\n  });\n\n  // Send broadcast notification\n  const sendBroadcastNotificationMutation = useMutation({\n    mutationFn: async (data: BroadcastForm) => {\n      const response = await fetch('/api/admin/notifications/send-to-all', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to send broadcast notification');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({ title: \"Success\", description: data.message });\n      setShowBroadcastDialog(false);\n      setBroadcastForm({ title: '', message: '', type: 'admin_announcement' });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to send broadcast notification\", variant: \"destructive\" });\n    },\n  });\n\n  const handleUserSelection = (userId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedUsers([...selectedUsers, userId]);\n    } else {\n      setSelectedUsers(selectedUsers.filter(id => id !== userId));\n    }\n  };\n\n  const handleSelectAll = () => {\n    if (selectedUsers.length === customers?.length) {\n      setSelectedUsers([]);\n    } else {\n      setSelectedUsers(customers?.map(customer => customer.id) || []);\n    }\n  };\n\n  const getNotificationTypeIcon = (type: string) => {\n    switch (type) {\n      case 'admin_response':\n        return <MessageSquare className=\"h-4 w-4\" />;\n      case 'admin_announcement':\n        return <BellRing className=\"h-4 w-4\" />;\n      case 'account_update':\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case 'security':\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      default:\n        return <Bell className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getNotificationTypeBadge = (type: string) => {\n    const colors = {\n      admin_response: 'bg-blue-100 text-blue-800',\n      admin_announcement: 'bg-purple-100 text-purple-800',\n      account_update: 'bg-green-100 text-green-800',\n      security: 'bg-red-100 text-red-800',\n      support_response: 'bg-orange-100 text-orange-800',\n    };\n    return colors[type as keyof typeof colors] || 'bg-gray-100 text-gray-800';\n  };\n\n  if (customersLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-1\">\n          <h2 className=\"text-2xl font-semibold tracking-tight flex items-center gap-2\">\n            <Bell className=\"h-6 w-6 text-blue-600\" />\n            Customer Notification Management\n          </h2>\n          <p className=\"text-sm text-muted-foreground\">\n            Send notifications and responses to customers across the platform\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={() => setShowSingleDialog(true)} className=\"flex items-center gap-2\">\n            <User className=\"h-4 w-4\" />\n            Single Customer\n          </Button>\n          <Button onClick={() => setShowBulkDialog(true)} className=\"flex items-center gap-2\" variant=\"outline\">\n            <Users className=\"h-4 w-4\" />\n            Multiple Customers\n          </Button>\n          <Button onClick={() => setShowBroadcastDialog(true)} className=\"flex items-center gap-2\" variant=\"outline\">\n            <Send className=\"h-4 w-4\" />\n            Broadcast to All\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Customers</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{customers?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">Active customer accounts</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Selected for Bulk</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{selectedUsers.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Customers selected for notifications</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Notification Types</CardTitle>\n            <Bell className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">5</div>\n            <p className=\"text-xs text-muted-foreground\">Available notification categories</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Customer Selection Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Customer Selection</CardTitle>\n          <CardDescription>\n            Select customers to send bulk notifications or view customer information\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <Button \n                variant=\"outline\" \n                onClick={handleSelectAll}\n                disabled={!customers || customers.length === 0}\n              >\n                {selectedUsers.length === customers?.length ? 'Deselect All' : 'Select All'}\n              </Button>\n              <div className=\"text-sm text-gray-600\">\n                {selectedUsers.length} of {customers?.length || 0} customers selected\n              </div>\n            </div>\n\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-[50px]\">Select</TableHead>\n                  <TableHead>Customer Name</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Customer ID</TableHead>\n                  <TableHead>Status</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {customers?.map((customer) => (\n                  <TableRow key={customer.id}>\n                    <TableCell>\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedUsers.includes(customer.id)}\n                        onChange={(e) => handleUserSelection(customer.id, e.target.checked)}\n                        className=\"rounded border-gray-300\"\n                      />\n                    </TableCell>\n                    <TableCell className=\"font-medium\">\n                      {customer.firstName} {customer.lastName}\n                    </TableCell>\n                    <TableCell>{customer.email}</TableCell>\n                    <TableCell className=\"font-mono text-sm\">{customer.id.slice(-8)}</TableCell>\n                    <TableCell>\n                      <Badge className=\"bg-green-100 text-green-800\">Active</Badge>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Single Customer Notification Dialog */}\n      <Dialog open={showSingleDialog} onOpenChange={setShowSingleDialog}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Send Notification to Single Customer\n            </DialogTitle>\n            <DialogDescription>\n              Send a targeted notification to a specific customer\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"customer\">Select Customer</Label>\n              <Select value={singleForm.userId} onValueChange={(value) => setSingleForm({...singleForm, userId: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose a customer\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {customers?.map((customer) => (\n                    <SelectItem key={customer.id} value={customer.id}>\n                      {customer.firstName} {customer.lastName} ({customer.email})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"type\">Notification Type</Label>\n              <Select value={singleForm.type} onValueChange={(value) => setSingleForm({...singleForm, type: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select notification type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"admin_response\">Admin Response</SelectItem>\n                  <SelectItem value=\"admin_announcement\">Admin Announcement</SelectItem>\n                  <SelectItem value=\"account_update\">Account Update</SelectItem>\n                  <SelectItem value=\"security\">Security Alert</SelectItem>\n                  <SelectItem value=\"support_response\">Support Response</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Title</Label>\n              <Input\n                id=\"title\"\n                placeholder=\"Enter notification title\"\n                value={singleForm.title}\n                onChange={(e) => setSingleForm({...singleForm, title: e.target.value})}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"message\">Message</Label>\n              <Textarea\n                id=\"message\"\n                placeholder=\"Enter your message to the customer...\"\n                value={singleForm.message}\n                onChange={(e) => setSingleForm({...singleForm, message: e.target.value})}\n                rows={4}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowSingleDialog(false)}>Cancel</Button>\n            <Button \n              onClick={() => sendSingleNotificationMutation.mutate(singleForm)}\n              disabled={!singleForm.userId || !singleForm.title || !singleForm.message || sendSingleNotificationMutation.isPending}\n            >\n              {sendSingleNotificationMutation.isPending ? \"Sending...\" : \"Send Notification\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Bulk Notification Dialog */}\n      <Dialog open={showBulkDialog} onOpenChange={setShowBulkDialog}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              Send Bulk Notifications\n            </DialogTitle>\n            <DialogDescription>\n              Send notifications to {selectedUsers.length} selected customers\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>{selectedUsers.length}</strong> customers selected for bulk notification.\n                {selectedUsers.length === 0 && \" Please select customers from the table above first.\"}\n              </p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"bulk-type\">Notification Type</Label>\n              <Select value={bulkForm.type} onValueChange={(value) => setBulkForm({...bulkForm, type: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select notification type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"admin_announcement\">Admin Announcement</SelectItem>\n                  <SelectItem value=\"account_update\">Account Update</SelectItem>\n                  <SelectItem value=\"security\">Security Alert</SelectItem>\n                  <SelectItem value=\"system\">System Notification</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"bulk-title\">Title</Label>\n              <Input\n                id=\"bulk-title\"\n                placeholder=\"Enter notification title\"\n                value={bulkForm.title}\n                onChange={(e) => setBulkForm({...bulkForm, title: e.target.value})}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"bulk-message\">Message</Label>\n              <Textarea\n                id=\"bulk-message\"\n                placeholder=\"Enter your message to customers...\"\n                value={bulkForm.message}\n                onChange={(e) => setBulkForm({...bulkForm, message: e.target.value})}\n                rows={4}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowBulkDialog(false)}>Cancel</Button>\n            <Button \n              onClick={() => sendBulkNotificationMutation.mutate({...bulkForm, userIds: selectedUsers})}\n              disabled={selectedUsers.length === 0 || !bulkForm.title || !bulkForm.message || sendBulkNotificationMutation.isPending}\n            >\n              {sendBulkNotificationMutation.isPending ? \"Sending...\" : `Send to ${selectedUsers.length} Customers`}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Broadcast Notification Dialog */}\n      <Dialog open={showBroadcastDialog} onOpenChange={setShowBroadcastDialog}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Send className=\"h-5 w-5\" />\n              Broadcast to All Customers\n            </DialogTitle>\n            <DialogDescription>\n              Send a notification to all {customers?.length || 0} customers simultaneously\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\n              <p className=\"text-sm text-orange-800\">\n                <strong>Warning:</strong> This will send the notification to all {customers?.length || 0} customers.\n                Use this feature responsibly for important announcements only.\n              </p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"broadcast-type\">Notification Type</Label>\n              <Select value={broadcastForm.type} onValueChange={(value) => setBroadcastForm({...broadcastForm, type: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select notification type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"admin_announcement\">Admin Announcement</SelectItem>\n                  <SelectItem value=\"system\">System Notification</SelectItem>\n                  <SelectItem value=\"security\">Security Alert</SelectItem>\n                  <SelectItem value=\"marketing\">Marketing Message</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"broadcast-title\">Title</Label>\n              <Input\n                id=\"broadcast-title\"\n                placeholder=\"Enter notification title\"\n                value={broadcastForm.title}\n                onChange={(e) => setBroadcastForm({...broadcastForm, title: e.target.value})}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"broadcast-message\">Message</Label>\n              <Textarea\n                id=\"broadcast-message\"\n                placeholder=\"Enter your broadcast message...\"\n                value={broadcastForm.message}\n                onChange={(e) => setBroadcastForm({...broadcastForm, message: e.target.value})}\n                rows={4}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowBroadcastDialog(false)}>Cancel</Button>\n            <Button \n              onClick={() => sendBroadcastNotificationMutation.mutate(broadcastForm)}\n              disabled={!broadcastForm.title || !broadcastForm.message || sendBroadcastNotificationMutation.isPending}\n              className=\"bg-orange-600 hover:bg-orange-700\"\n            >\n              {sendBroadcastNotificationMutation.isPending ? \"Broadcasting...\" : `Broadcast to All ${customers?.length || 0} Customers`}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":22034},"client/src/components/ui/admin-navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Shield, \n  Users, \n  Activity, \n  Settings, \n  FileText,\n  Building2,\n  Bell,\n  BarChart3\n} from \"lucide-react\";\n\nexport default function AdminNavbar() {\n  const { user } = useAuth();\n  const [location, setLocation] = useLocation();\n\n  const handleLogout = async () => {\n    try {\n      await fetch(\"/api/logout\", { method: \"POST\" });\n      window.location.href = \"/\";\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n      window.location.href = \"/\";\n    }\n  };\n\n  return (\n    <header className=\"bg-white border-b border-gray-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center py-3\">\n          <div className=\"flex items-center space-x-6\">\n            <Link href=\"/admin\" className=\"flex items-center text-finora-primary hover:text-finora-dark transition-colors duration-200\">\n              <Building2 className=\"w-6 h-6 mr-2\" />\n              <span className=\"font-bold text-lg\">Global Deposit Protection</span>\n              <Shield className=\"w-5 h-5 ml-2 text-amber-600\" />\n            </Link>\n          </div>\n          \n          <nav className=\"hidden md:flex items-center space-x-6\">\n            <Link href=\"/admin\" className=\"text-gray-700 hover:text-finora-primary transition-colors duration-200 text-sm font-medium flex items-center gap-1\">\n              <BarChart3 className=\"w-4 h-4\" />\n              Dashboard\n            </Link>\n            <Link href=\"/admin/users\" className=\"text-gray-700 hover:text-finora-primary transition-colors duration-200 text-sm font-medium flex items-center gap-1\">\n              <Users className=\"w-4 h-4\" />\n              Users\n            </Link>\n            <Link href=\"/admin?tab=transfers\" className=\"text-gray-700 hover:text-finora-primary transition-colors duration-200 text-sm font-medium flex items-center gap-1\">\n              <Activity className=\"w-4 h-4\" />\n              Transfers\n            </Link>\n            <Link href=\"/admin?tab=support\" className=\"text-gray-700 hover:text-finora-primary transition-colors duration-200 text-sm font-medium flex items-center gap-1\">\n              <FileText className=\"w-4 h-4\" />\n              Support\n            </Link>\n          </nav>\n          \n          <div className=\"flex items-center space-x-4\">\n            <span className=\"text-gray-700 text-sm flex items-center gap-2\">\n              <Shield className=\"w-4 h-4 text-amber-600\" />\n              Admin: {user?.firstName || 'User'}\n            </span>\n            <Button \n              onClick={handleLogout}\n              variant=\"outline\"\n              className=\"border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white\"\n              data-testid=\"button-logout\"\n            >\n              Logout\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":3018},"client/src/components/ui/customer-navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useState } from \"react\";\nimport { \n  Home, \n  CreditCard, \n  Send, \n  Bell, \n  User, \n  HeadphonesIcon,\n  TrendingUp,\n  Receipt,\n  Building2,\n  FileText,\n  Menu,\n  X,\n  Wallet,\n  Shield,\n  Banknote\n} from \"lucide-react\";\n\nexport default function CustomerNavbar() {\n  const { user } = useAuth();\n  const [location, setLocation] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const handleLogout = async () => {\n    try {\n      await fetch(\"/api/logout\", { method: \"POST\" });\n      window.location.href = \"/\";\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n      window.location.href = \"/\";\n    }\n  };\n\n  return (\n    <header className=\"bg-white border-b border-gray-200 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-2 sm:px-4 lg:px-8\">\n        <div className=\"flex justify-between items-center py-3\">\n          <div className=\"flex items-center space-x-2\">\n            <Link href=\"/dashboard\" className=\"flex items-center text-finora-primary hover:text-finora-dark transition-colors duration-200\">\n              <Building2 className=\"w-5 h-5 sm:w-6 sm:h-6 mr-1 sm:mr-2\" />\n              <span className=\"font-bold text-sm sm:text-base lg:text-lg hidden xs:block\">Global Deposit Protection</span>\n              <span className=\"font-bold text-sm xs:hidden\">GDP</span>\n            </Link>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <nav className=\"hidden lg:flex items-center space-x-4\">\n            <Link href=\"/dashboard\" className=\"text-gray-700 hover:text-finora-primary transition-colors duration-200 text-sm font-medium flex items-center gap-1\">\n              <Home className=\"w-4 h-4\" />\n              Overview\n            </Link>\n            <Link href=\"/dashboard?tab=accounts\" className=\"text-gray-700 hover:text-finora-primary transition-colors duration-200 text-sm font-medium flex items-center gap-1\">\n              <Wallet className=\"w-4 h-4\" />\n              Accounts\n            </Link>\n            <button \n              onClick={() => setLocation(\"/dashboard?tab=transfers\")} \n              className=\"text-gray-700 hover:text-finora-primary transition-colors duration-200 text-sm font-medium flex items-center gap-1\"\n            >\n              <Send className=\"w-4 h-4\" />\n              Transfer\n            </button>\n            <Link href=\"/dashboard?tab=bills\" className=\"text-gray-700 hover:text-finora-primary transition-colors duration-200 text-sm font-medium flex items-center gap-1\">\n              <Receipt className=\"w-4 h-4\" />\n              Bills\n            </Link>\n            <Link href=\"/dashboard?tab=cards\" className=\"text-gray-700 hover:text-finora-primary transition-colors duration-200 text-sm font-medium flex items-center gap-1\">\n              <CreditCard className=\"w-4 h-4\" />\n              Cards\n            </Link>\n            <Link href=\"/dashboard?tab=investments\" className=\"text-gray-700 hover:text-finora-primary transition-colors duration-200 text-sm font-medium flex items-center gap-1\">\n              <TrendingUp className=\"w-4 h-4\" />\n              Investing\n            </Link>\n          </nav>\n          \n          <div className=\"flex items-center space-x-2 sm:space-x-4\">\n            {/* Notifications Icon (Desktop) */}\n            <Link \n              href=\"/dashboard?tab=notifications\" \n              className=\"hidden lg:flex p-2 rounded-md text-gray-600 hover:text-finora-primary hover:bg-gray-100 relative\"\n            >\n              <Bell className=\"w-5 h-5\" />\n            </Link>\n            \n            {/* Profile Icon (Desktop) */}\n            <Link \n              href=\"/dashboard?tab=profile\" \n              className=\"hidden lg:flex p-2 rounded-md text-gray-600 hover:text-finora-primary hover:bg-gray-100\"\n            >\n              <User className=\"w-5 h-5\" />\n            </Link>\n\n            {/* Mobile menu button */}\n            <button\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              className=\"lg:hidden p-2 rounded-md text-gray-600 hover:text-finora-primary hover:bg-gray-100\"\n            >\n              {isMobileMenuOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n            </button>\n            \n            <span className=\"text-gray-700 text-xs sm:text-sm hidden sm:block\">\n              Welcome, {user?.firstName || 'User'}\n            </span>\n            <Button \n              onClick={handleLogout}\n              variant=\"outline\"\n              className=\"border-finora-primary text-finora-primary hover:bg-finora-primary hover:text-white text-xs sm:text-sm px-2 sm:px-4 py-1 sm:py-2\"\n              data-testid=\"button-logout\"\n            >\n              Logout\n            </Button>\n          </div>\n        </div>\n        \n        {/* Mobile Navigation Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"lg:hidden border-t border-gray-200\">\n            <div className=\"px-2 pt-3 pb-4 space-y-2 bg-white\">\n              {/* Primary Banking Actions */}\n              <div className=\"space-y-1\">\n                <Link \n                  href=\"/dashboard\" \n                  className=\"block px-4 py-3 text-base font-medium text-gray-700 hover:text-finora-primary hover:bg-gray-50 rounded-md flex items-center gap-3\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  <Home className=\"w-5 h-5\" />\n                  Overview\n                </Link>\n                <Link \n                  href=\"/dashboard?tab=accounts\" \n                  className=\"block px-4 py-3 text-base font-medium text-gray-700 hover:text-finora-primary hover:bg-gray-50 rounded-md flex items-center gap-3\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  <Wallet className=\"w-5 h-5\" />\n                  My Accounts\n                </Link>\n                <button \n                  onClick={() => {\n                    setLocation(\"/dashboard?tab=transfers\");\n                    setIsMobileMenuOpen(false);\n                  }}\n                  className=\"w-full text-left block px-4 py-3 text-base font-medium text-gray-700 hover:text-finora-primary hover:bg-gray-50 rounded-md flex items-center gap-3\"\n                >\n                  <Send className=\"w-5 h-5\" />\n                  Send Money\n                </button>\n                <Link \n                  href=\"/dashboard?tab=bills\" \n                  className=\"block px-4 py-3 text-base font-medium text-gray-700 hover:text-finora-primary hover:bg-gray-50 rounded-md flex items-center gap-3\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  <Receipt className=\"w-5 h-5\" />\n                  Pay Bills\n                </Link>\n              </div>\n\n              {/* Secondary Services */}\n              <div className=\"border-t border-gray-200 pt-2 space-y-1\">\n                <Link \n                  href=\"/dashboard?tab=cards\" \n                  className=\"block px-4 py-3 text-base font-medium text-gray-700 hover:text-finora-primary hover:bg-gray-50 rounded-md flex items-center gap-3\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  <CreditCard className=\"w-5 h-5\" />\n                  Cards & Banking\n                </Link>\n                <Link \n                  href=\"/dashboard?tab=investments\" \n                  className=\"block px-4 py-3 text-base font-medium text-gray-700 hover:text-finora-primary hover:bg-gray-50 rounded-md flex items-center gap-3\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  <TrendingUp className=\"w-5 h-5\" />\n                  Investments\n                </Link>\n                <Link \n                  href=\"/dashboard?tab=inheritance\" \n                  className=\"block px-4 py-3 text-base font-medium text-gray-700 hover:text-finora-primary hover:bg-gray-50 rounded-md flex items-center gap-3\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  <Shield className=\"w-5 h-5\" />\n                  Estate Planning\n                </Link>\n              </div>\n\n              {/* Account & Support */}\n              <div className=\"border-t border-gray-200 pt-2 space-y-1\">\n                <Link \n                  href=\"/dashboard?tab=notifications\" \n                  className=\"block px-4 py-3 text-base font-medium text-gray-700 hover:text-finora-primary hover:bg-gray-50 rounded-md flex items-center gap-3\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  <Bell className=\"w-5 h-5\" />\n                  Notifications\n                </Link>\n                <Link \n                  href=\"/dashboard?tab=profile\" \n                  className=\"block px-4 py-3 text-base font-medium text-gray-700 hover:text-finora-primary hover:bg-gray-50 rounded-md flex items-center gap-3\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  <User className=\"w-5 h-5\" />\n                  Profile & Settings\n                </Link>\n                <Link \n                  href=\"/dashboard?tab=support\" \n                  className=\"block px-4 py-3 text-base font-medium text-gray-700 hover:text-finora-primary hover:bg-gray-50 rounded-md flex items-center gap-3\"\n                  onClick={() => setIsMobileMenuOpen(false)}\n                >\n                  <HeadphonesIcon className=\"w-5 h-5\" />\n                  Customer Support\n                </Link>\n              </div>\n\n              {/* User Info */}\n              <div className=\"border-t border-gray-200 pt-3 mt-3\">\n                <div className=\"px-4 py-2 text-sm text-gray-600 flex items-center gap-2\">\n                  <User className=\"w-4 h-4\" />\n                  Welcome, {user?.firstName || 'User'}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}","size_bytes":10157},"client/src/components/admin/email-configuration.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { Settings, Plus, Mail, Trash2, Edit, TestTube, CheckCircle } from 'lucide-react';\n\ninterface EmailConfiguration {\n  id: string;\n  configName: string;\n  resendApiKey: string;\n  senderEmail: string;\n  senderName: string;\n  isActive: boolean;\n  createdBy: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nfunction EmailConfiguration() {\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [editingConfig, setEditingConfig] = useState<EmailConfiguration | null>(null);\n  const [formData, setFormData] = useState({\n    configName: '',\n    resendApiKey: '',\n    senderEmail: '',\n    senderName: '',\n    isActive: false\n  });\n  const [testEmail, setTestEmail] = useState('');\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch email configurations\n  const { data: configurations, isLoading } = useQuery<EmailConfiguration[]>({\n    queryKey: ['admin-email-configurations'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/email-configuration');\n      if (!response.ok) throw new Error('Failed to fetch email configurations');\n      return response.json();\n    },\n  });\n\n  // Create configuration mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/admin/email-configuration', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create email configuration');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-email-configurations'] });\n      setShowCreateDialog(false);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Email configuration created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create email configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update configuration mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await fetch(`/api/admin/email-configuration/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to update email configuration');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-email-configurations'] });\n      setShowEditDialog(false);\n      setEditingConfig(null);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Email configuration updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update email configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete configuration mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/admin/email-configuration/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete email configuration');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin-email-configurations'] });\n      toast({\n        title: \"Success\",\n        description: \"Email configuration deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete email configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Test email mutation\n  const testEmailMutation = useMutation({\n    mutationFn: async ({ configId, testEmail }: { configId: string; testEmail: string }) => {\n      const response = await fetch('/api/admin/email-configuration/test', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ configId, testEmail }),\n      });\n      if (!response.ok) throw new Error('Failed to send test email');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Test email sent successfully\",\n      });\n      setTestEmail('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send test email\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      configName: '',\n      resendApiKey: '',\n      senderEmail: '',\n      senderName: '',\n      isActive: false\n    });\n  };\n\n  const handleCreateConfiguration = () => {\n    if (!formData.configName || !formData.resendApiKey || !formData.senderEmail || !formData.senderName) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createMutation.mutate(formData);\n  };\n\n  const handleEditConfiguration = () => {\n    if (!editingConfig || !formData.configName || !formData.resendApiKey || !formData.senderEmail || !formData.senderName) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateMutation.mutate({ id: editingConfig.id, data: formData });\n  };\n\n  const openEditDialog = (config: EmailConfiguration) => {\n    setEditingConfig(config);\n    setFormData({\n      configName: config.configName,\n      resendApiKey: config.resendApiKey,\n      senderEmail: config.senderEmail,\n      senderName: config.senderName,\n      isActive: config.isActive\n    });\n    setShowEditDialog(true);\n  };\n\n  const handleActivateConfig = (id: string) => {\n    updateMutation.mutate({ id, data: { isActive: true } });\n  };\n\n  const sendTestEmail = (configId: string) => {\n    if (!testEmail) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a test email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    testEmailMutation.mutate({ configId, testEmail });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-red-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Email Configuration</h2>\n          <p className=\"text-gray-600\">Manage Resend.com API settings for sending customer notifications</p>\n        </div>\n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Configuration\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create Email Configuration</DialogTitle>\n              <DialogDescription>\n                Set up a new Resend.com API configuration for sending emails to customers.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"configName\">Configuration Name</Label>\n                <Input\n                  id=\"configName\"\n                  value={formData.configName}\n                  onChange={(e) => setFormData({...formData, configName: e.target.value})}\n                  placeholder=\"e.g., Production, Development\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"resendApiKey\">Resend API Key</Label>\n                <Input\n                  id=\"resendApiKey\"\n                  type=\"password\"\n                  value={formData.resendApiKey}\n                  onChange={(e) => setFormData({...formData, resendApiKey: e.target.value})}\n                  placeholder=\"re_...\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"senderEmail\">Sender Email</Label>\n                <Input\n                  id=\"senderEmail\"\n                  type=\"email\"\n                  value={formData.senderEmail}\n                  onChange={(e) => setFormData({...formData, senderEmail: e.target.value})}\n                  placeholder=\"noreply@yourdomain.com\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"senderName\">Sender Name</Label>\n                <Input\n                  id=\"senderName\"\n                  value={formData.senderName}\n                  onChange={(e) => setFormData({...formData, senderName: e.target.value})}\n                  placeholder=\"Your Bank Name\"\n                />\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"isActive\"\n                  checked={formData.isActive}\n                  onCheckedChange={(checked) => setFormData({...formData, isActive: checked})}\n                />\n                <Label htmlFor=\"isActive\">Set as active configuration</Label>\n              </div>\n            </div>\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button variant=\"outline\" onClick={() => setShowCreateDialog(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleCreateConfiguration} disabled={createMutation.isPending}>\n                {createMutation.isPending ? 'Creating...' : 'Create Configuration'}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-6\">\n        {configurations?.map((config) => (\n          <Card key={config.id} className={config.isActive ? 'border-green-200 bg-green-50' : ''}>\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Mail className=\"h-5 w-5\" />\n                    {config.configName}\n                    {config.isActive && (\n                      <Badge variant=\"default\" className=\"bg-green-600\">\n                        <CheckCircle className=\"h-3 w-3 mr-1\" />\n                        Active\n                      </Badge>\n                    )}\n                  </CardTitle>\n                  <CardDescription>\n                    {config.senderName} &lt;{config.senderEmail}&gt;\n                  </CardDescription>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => openEditDialog(config)}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  {!config.isActive && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleActivateConfig(config.id)}\n                    >\n                      <Settings className=\"h-4 w-4 mr-1\" />\n                      Activate\n                    </Button>\n                  )}\n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button variant=\"outline\" size=\"sm\" className=\"text-red-600 hover:text-red-800\">\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>Delete Email Configuration</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          Are you sure you want to delete this email configuration? This action cannot be undone.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={() => deleteMutation.mutate(config.id)}\n                          className=\"bg-red-600 hover:bg-red-700\"\n                        >\n                          Delete\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"font-medium text-gray-500\">API Key:</span>\n                    <p className=\"font-mono\">\n                      {config.resendApiKey.substring(0, 8)}...{config.resendApiKey.slice(-4)}\n                    </p>\n                  </div>\n                  <div>\n                    <span className=\"font-medium text-gray-500\">Created:</span>\n                    <p>{new Date(config.createdAt).toLocaleDateString()}</p>\n                  </div>\n                </div>\n                \n                {config.isActive && (\n                  <div className=\"flex items-center space-x-2 pt-4 border-t\">\n                    <Input\n                      type=\"email\"\n                      placeholder=\"test@example.com\"\n                      value={testEmail}\n                      onChange={(e) => setTestEmail(e.target.value)}\n                      className=\"flex-1\"\n                    />\n                    <Button\n                      onClick={() => sendTestEmail(config.id)}\n                      disabled={testEmailMutation.isPending}\n                      size=\"sm\"\n                    >\n                      <TestTube className=\"h-4 w-4 mr-1\" />\n                      {testEmailMutation.isPending ? 'Sending...' : 'Test Email'}\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n\n        {configurations?.length === 0 && (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\n              <Mail className=\"h-12 w-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Email Configurations</h3>\n              <p className=\"text-gray-500 text-center mb-4\">\n                Get started by adding your first Resend.com API configuration to enable email notifications.\n              </p>\n              <Button onClick={() => setShowCreateDialog(true)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Configuration\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Email Configuration</DialogTitle>\n            <DialogDescription>\n              Update the Resend.com API configuration settings.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"editConfigName\">Configuration Name</Label>\n              <Input\n                id=\"editConfigName\"\n                value={formData.configName}\n                onChange={(e) => setFormData({...formData, configName: e.target.value})}\n                placeholder=\"e.g., Production, Development\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"editResendApiKey\">Resend API Key</Label>\n              <Input\n                id=\"editResendApiKey\"\n                type=\"password\"\n                value={formData.resendApiKey}\n                onChange={(e) => setFormData({...formData, resendApiKey: e.target.value})}\n                placeholder=\"re_...\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"editSenderEmail\">Sender Email</Label>\n              <Input\n                id=\"editSenderEmail\"\n                type=\"email\"\n                value={formData.senderEmail}\n                onChange={(e) => setFormData({...formData, senderEmail: e.target.value})}\n                placeholder=\"noreply@yourdomain.com\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"editSenderName\">Sender Name</Label>\n              <Input\n                id=\"editSenderName\"\n                value={formData.senderName}\n                onChange={(e) => setFormData({...formData, senderName: e.target.value})}\n                placeholder=\"Your Bank Name\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"editIsActive\"\n                checked={formData.isActive}\n                onCheckedChange={(checked) => setFormData({...formData, isActive: checked})}\n              />\n              <Label htmlFor=\"editIsActive\">Set as active configuration</Label>\n            </div>\n          </div>\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button variant=\"outline\" onClick={() => setShowEditDialog(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleEditConfiguration} disabled={updateMutation.isPending}>\n              {updateMutation.isPending ? 'Updating...' : 'Update Configuration'}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default EmailConfiguration;","size_bytes":18878}},"version":1}