{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Replit.md\n\n## Overview\n\nThis is a full-stack banking application built with Express.js, React, and PostgreSQL. The application provides a complete banking system with user authentication, account management, money transfers, and administrative controls. It features a modern UI built with shadcn/ui components and implements proper security measures for financial transactions.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript and Vite for build tooling\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom Santander brand colors and design system\n- **Routing**: Wouter for client-side routing with role-based access control\n- **State Management**: TanStack Query for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation\n\nThe frontend follows a component-based architecture with clear separation between customer and admin interfaces. The application uses a responsive design that works across desktop and mobile devices.\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for type safety\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: Replit Auth with OpenID Connect integration\n- **Session Management**: PostgreSQL-backed sessions with connect-pg-simple\n- **Email Service**: Resend API integration for notifications\n\nThe backend implements a RESTful API structure with proper error handling, request logging, and middleware for authentication and authorization.\n\n### Database Design\n- **Primary Database**: PostgreSQL (Neon serverless)\n- **Schema Management**: Drizzle migrations with schema defined in shared TypeScript files\n- **Key Tables**:\n  - Users with role-based access (admin/customer)\n  - Accounts with status management (active/frozen/closed)\n  - Transfers with approval workflow and status tracking\n  - Transactions for detailed financial history\n  - Audit logs for compliance and security tracking\n  - Email notifications for communication history\n\nThe database schema enforces referential integrity and includes proper indexing for performance.\n\n### Authentication & Authorization\n- **Provider**: Replit Auth (OpenID Connect)\n- **Session Storage**: PostgreSQL with automatic cleanup\n- **Authorization**: Role-based access control (admin vs customer)\n- **Security**: HTTPS enforcement, secure cookies, CSRF protection\n\n### Business Logic\n- **Transfer Workflow**: Multi-step approval process with admin oversight\n- **Account Management**: Creation, status updates, balance tracking\n- **Audit Trail**: Comprehensive logging of all financial operations\n- **Email Notifications**: Automated alerts for important events\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon PostgreSQL serverless database\n- **Authentication**: Replit Auth service for user management\n- **Email Service**: Resend API for transactional emails\n- **Session Storage**: PostgreSQL-based session management\n\n### Development Tools\n- **Build System**: Vite for fast development and optimized production builds\n- **Type Safety**: TypeScript across the entire stack\n- **Database Migrations**: Drizzle Kit for schema management\n- **UI Components**: Radix UI primitives with shadcn/ui styling\n\n### Third-Party Libraries\n- **Frontend**: React Query for data fetching, Wouter for routing, React Hook Form for forms\n- **Backend**: Express.js web framework, Passport.js for authentication middleware\n- **Database**: Drizzle ORM with Neon driver\n- **Styling**: Tailwind CSS with custom design tokens\n\nThe application is designed to be deployed on Replit with minimal configuration, leveraging Replit's built-in authentication and database provisioning.","size_bytes":3865},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        // Santander brand colors\n        \"santander-red\": \"#EC0000\",\n        \"santander-dark\": \"#B91C1C\",\n        \"santander-light\": \"#FEF2F2\",\n        // Additional semantic colors\n        \"gray-50\": \"#F8F9FA\",\n        \"gray-900\": \"#111827\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          \"0%\": {\n            opacity: \"0\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n          },\n        },\n        \"slide-up\": {\n          \"0%\": {\n            transform: \"translateY(10px)\",\n            opacity: \"0\",\n          },\n          \"100%\": {\n            transform: \"translateY(0)\",\n            opacity: \"1\",\n          },\n        },\n        \"pulse-slow\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \".8\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-in-out\",\n        \"slide-up\": \"slide-up 0.3s ease-out\",\n        \"pulse-slow\": \"pulse-slow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n      },\n      spacing: {\n        \"18\": \"4.5rem\",\n        \"88\": \"22rem\",\n        \"128\": \"32rem\",\n      },\n      maxWidth: {\n        \"8xl\": \"88rem\",\n        \"9xl\": \"96rem\",\n      },\n      zIndex: {\n        \"60\": \"60\",\n        \"70\": \"70\",\n        \"80\": \"80\",\n        \"90\": \"90\",\n        \"100\": \"100\",\n      },\n      backdropBlur: {\n        xs: \"2px\",\n      },\n      fontSize: {\n        \"2xs\": [\"0.625rem\", { lineHeight: \"0.75rem\" }],\n      },\n      screens: {\n        \"3xl\": \"1920px\",\n      },\n      boxShadow: {\n        \"inner-lg\": \"inset 0 10px 15px -3px rgba(0, 0, 0, 0.1), inset 0 4px 6px -2px rgba(0, 0, 0, 0.05)\",\n        \"glow\": \"0 0 20px rgba(236, 0, 0, 0.3)\",\n      },\n      backgroundImage: {\n        \"gradient-radial\": \"radial-gradient(var(--tw-gradient-stops))\",\n        \"gradient-conic\": \"conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))\",\n      },\n      transitionProperty: {\n        \"width\": \"width\",\n        \"spacing\": \"margin, padding\",\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"), \n    require(\"@tailwindcss/typography\"),\n    // Custom plugin for Santander-specific utilities\n    function({ addUtilities }: { addUtilities: any }) {\n      const newUtilities = {\n        '.text-balance': {\n          'text-wrap': 'balance',\n        },\n        '.bg-glass': {\n          'background': 'rgba(255, 255, 255, 0.1)',\n          'backdrop-filter': 'blur(10px)',\n          'border': '1px solid rgba(255, 255, 255, 0.2)',\n        },\n        '.bg-glass-dark': {\n          'background': 'rgba(0, 0, 0, 0.1)',\n          'backdrop-filter': 'blur(10px)',\n          'border': '1px solid rgba(0, 0, 0, 0.2)',\n        },\n        '.santander-gradient': {\n          'background': 'linear-gradient(135deg, #EC0000 0%, #B91C1C 100%)',\n        },\n        '.santander-shadow': {\n          'box-shadow': '0 4px 14px 0 rgba(236, 0, 0, 0.15)',\n        },\n      }\n      addUtilities(newUtilities)\n    }\n  ],\n} satisfies Config;\n","size_bytes":5154},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import bcrypt from \"bcryptjs\";\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\nimport { loginSchema } from \"@shared/schema\";\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || 'fallback-secret-for-development-only-' + Math.random().toString(36),\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production', // Enable in production\n      maxAge: sessionTtl,\n      sameSite: 'strict', // CSRF protection\n    },\n    name: 'sessionId', // Hide default session name\n  });\n}\n\n// Hash password helper\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 12;\n  return await bcrypt.hash(password, saltRounds);\n}\n\n// Verify password helper\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return await bcrypt.compare(password, hashedPassword);\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Configure local strategy\n  passport.use(new LocalStrategy(\n    {\n      usernameField: 'email',\n      passwordField: 'password'\n    },\n    async (email, password, done) => {\n      try {\n        const user = await storage.getUserByEmail(email);\n        \n        if (!user || !user.password) {\n          return done(null, false, { message: 'Invalid email or password' });\n        }\n\n        const isValidPassword = await verifyPassword(password, user.password);\n        \n        if (!isValidPassword) {\n          return done(null, false, { message: 'Invalid email or password' });\n        }\n\n        // Remove password from user object before returning\n        const { password: _, ...userWithoutPassword } = user;\n        return done(null, userWithoutPassword);\n      } catch (error) {\n        return done(error);\n      }\n    }\n  ));\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      if (user) {\n        const { password: _, ...userWithoutPassword } = user;\n        done(null, userWithoutPassword);\n      } else {\n        done(null, false);\n      }\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Login route\n  app.post(\"/api/login\", (req, res, next) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      passport.authenticate('local', (err: any, user: any, info: any) => {\n        if (err) {\n          return res.status(500).json({ message: \"Internal server error\" });\n        }\n        if (!user) {\n          return res.status(401).json({ message: info?.message || \"Invalid credentials\" });\n        }\n        \n        req.logIn(user, (err) => {\n          if (err) {\n            return res.status(500).json({ message: \"Login failed\" });\n          }\n          return res.json({ message: \"Login successful\", user });\n        });\n      })(req, res, next);\n    } catch (error) {\n      return res.status(400).json({ message: \"Invalid input\" });\n    }\n  });\n\n  // Logout route\n  app.post(\"/api/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      req.session.destroy((err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Session destruction failed\" });\n        }\n        res.clearCookie('connect.sid');\n        res.json({ message: \"Logout successful\" });\n      });\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Unauthorized\" });\n};","size_bytes":4305},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/emailService.ts":{"content":"import { storage } from \"./storage\";\nimport type { InsertEmailNotification } from \"@shared/schema\";\n\ninterface EmailOptions {\n  to: string;\n  subject: string;\n  html: string;\n  userId?: string;\n}\n\nexport class EmailService {\n  private apiKey: string;\n  private baseUrl = 'https://api.resend.com';\n\n  constructor() {\n    this.apiKey = process.env.RESEND_API_KEY || process.env.EMAIL_API_KEY || '';\n    if (!this.apiKey) {\n      console.warn('No email API key provided. Email notifications will be logged but not sent.');\n    }\n  }\n\n  async sendEmail(options: EmailOptions): Promise<boolean> {\n    try {\n      // Log email notification to database\n      if (options.userId) {\n        await storage.createEmailNotification({\n          userId: options.userId,\n          subject: options.subject,\n          body: options.html,\n          status: this.apiKey ? 'sent' : 'not_configured',\n        });\n      }\n\n      // If no API key, just log and return success\n      if (!this.apiKey) {\n        console.log(`Email would be sent to ${options.to}: ${options.subject}`);\n        return true;\n      }\n\n      // Send actual email via Resend\n      const response = await fetch(`${this.baseUrl}/emails`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          from: 'Santander Bank <noreply@santanderbank.com>',\n          to: [options.to],\n          subject: options.subject,\n          html: options.html,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to send email: ${response.statusText}`);\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to send email:', error);\n      \n      // Update email notification status to failed\n      if (options.userId) {\n        await storage.createEmailNotification({\n          userId: options.userId,\n          subject: options.subject,\n          body: options.html,\n          status: 'failed',\n        });\n      }\n      \n      return false;\n    }\n  }\n\n  async sendTransferNotification(\n    userEmail: string,\n    userId: string,\n    transferAmount: string,\n    transferStatus: string,\n    transferId: string\n  ): Promise<boolean> {\n    const subject = `Transfer ${transferStatus.charAt(0).toUpperCase() + transferStatus.slice(1)} - $${transferAmount}`;\n    \n    const html = `\n      <div style=\"font-family: Inter, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"background-color: #EC0000; color: white; padding: 20px; border-radius: 8px 8px 0 0;\">\n          <h1 style=\"margin: 0; font-size: 24px;\">Santander Bank</h1>\n        </div>\n        \n        <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 0 0 8px 8px;\">\n          <h2 style=\"color: #111827; margin: 0 0 20px 0;\">Transfer Update</h2>\n          \n          <p style=\"color: #374151; margin: 0 0 15px 0;\">\n            Your transfer of <strong>$${transferAmount}</strong> is now <strong>${transferStatus}</strong>.\n          </p>\n          \n          <div style=\"background-color: white; padding: 15px; border-radius: 6px; margin: 20px 0;\">\n            <p style=\"margin: 0; color: #6b7280;\"><strong>Transfer ID:</strong> ${transferId}</p>\n            <p style=\"margin: 5px 0 0 0; color: #6b7280;\"><strong>Status:</strong> ${transferStatus}</p>\n          </div>\n          \n          <p style=\"color: #374151; margin: 20px 0 0 0;\">\n            Thank you for banking with Santander.\n          </p>\n        </div>\n      </div>\n    `;\n\n    return await this.sendEmail({\n      to: userEmail,\n      subject,\n      html,\n      userId,\n    });\n  }\n\n  async sendAccountStatusNotification(\n    userEmail: string,\n    userId: string,\n    accountNumber: string,\n    newStatus: string,\n    reason?: string\n  ): Promise<boolean> {\n    const subject = `Account Status Update - ${accountNumber}`;\n    \n    const html = `\n      <div style=\"font-family: Inter, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"background-color: #EC0000; color: white; padding: 20px; border-radius: 8px 8px 0 0;\">\n          <h1 style=\"margin: 0; font-size: 24px;\">Santander Bank</h1>\n        </div>\n        \n        <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 0 0 8px 8px;\">\n          <h2 style=\"color: #111827; margin: 0 0 20px 0;\">Account Status Update</h2>\n          \n          <p style=\"color: #374151; margin: 0 0 15px 0;\">\n            The status of your account <strong>${accountNumber}</strong> has been updated to <strong>${newStatus}</strong>.\n          </p>\n          \n          ${reason ? `\n            <div style=\"background-color: white; padding: 15px; border-radius: 6px; margin: 20px 0;\">\n              <p style=\"margin: 0; color: #6b7280;\"><strong>Reason:</strong> ${reason}</p>\n            </div>\n          ` : ''}\n          \n          <p style=\"color: #374151; margin: 20px 0 0 0;\">\n            If you have any questions, please contact customer service at 1-877-768-2265.\n          </p>\n        </div>\n      </div>\n    `;\n\n    return await this.sendEmail({\n      to: userEmail,\n      subject,\n      html,\n      userId,\n    });\n  }\n\n  async sendBalanceChangeNotification(\n    userEmail: string,\n    userId: string,\n    accountNumber: string,\n    changeType: 'credit' | 'debit',\n    amount: string,\n    newBalance: string,\n    description: string\n  ): Promise<boolean> {\n    const subject = `Account ${changeType === 'credit' ? 'Credit' : 'Debit'} - $${amount}`;\n    \n    const html = `\n      <div style=\"font-family: Inter, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"background-color: #EC0000; color: white; padding: 20px; border-radius: 8px 8px 0 0;\">\n          <h1 style=\"margin: 0; font-size: 24px;\">Santander Bank</h1>\n        </div>\n        \n        <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 0 0 8px 8px;\">\n          <h2 style=\"color: #111827; margin: 0 0 20px 0;\">Account Activity</h2>\n          \n          <p style=\"color: #374151; margin: 0 0 15px 0;\">\n            A ${changeType} of <strong>$${amount}</strong> has been applied to your account.\n          </p>\n          \n          <div style=\"background-color: white; padding: 15px; border-radius: 6px; margin: 20px 0;\">\n            <p style=\"margin: 0; color: #6b7280;\"><strong>Account:</strong> ${accountNumber}</p>\n            <p style=\"margin: 5px 0; color: #6b7280;\"><strong>Amount:</strong> $${amount}</p>\n            <p style=\"margin: 5px 0; color: #6b7280;\"><strong>Description:</strong> ${description}</p>\n            <p style=\"margin: 5px 0 0 0; color: #6b7280;\"><strong>New Balance:</strong> $${newBalance}</p>\n          </div>\n          \n          <p style=\"color: #374151; margin: 20px 0 0 0;\">\n            Thank you for banking with Santander.\n          </p>\n        </div>\n      </div>\n    `;\n\n    return await this.sendEmail({\n      to: userEmail,\n      subject,\n      html,\n      userId,\n    });\n  }\n\n  async sendCustomEmail(\n    userEmail: string,\n    userId: string,\n    subject: string,\n    message: string\n  ): Promise<boolean> {\n    const html = `\n      <div style=\"font-family: Inter, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"background-color: #EC0000; color: white; padding: 20px; border-radius: 8px 8px 0 0;\">\n          <h1 style=\"margin: 0; font-size: 24px;\">Santander Bank</h1>\n        </div>\n        \n        <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 0 0 8px 8px;\">\n          <div style=\"color: #374151; line-height: 1.6;\">\n            ${message.replace(/\\n/g, '<br>')}\n          </div>\n          \n          <p style=\"color: #374151; margin: 20px 0 0 0;\">\n            Best regards,<br>\n            Santander Bank Team\n          </p>\n        </div>\n      </div>\n    `;\n\n    return await this.sendEmail({\n      to: userEmail,\n      subject,\n      html,\n      userId,\n    });\n  }\n}\n\nexport const emailService = new EmailService();\n","size_bytes":8027},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || 'fallback-secret-for-development-only-' + Math.random().toString(36),\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to false for development\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  // Create the user data without the ID since it's omitted in the insert schema\n  const userData = {\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"], \n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n    role: 'customer' as const, // Default role\n  };\n  \n  // First, check if user exists by ID\n  const existingUser = await storage.getUser(claims[\"sub\"]);\n  if (existingUser) {\n    // Update existing user\n    return await storage.updateUser(claims[\"sub\"], userData);\n  } else {\n    // Create new user with explicit ID\n    return await storage.createUserWithId(claims[\"sub\"], userData);\n  }\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4760},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { emailService } from \"./emailService\";\nimport { setupAuth, isAuthenticated } from \"./auth\";\nimport { insertTransferSchema, insertAccountSchema, insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { hashPassword } from \"./auth\";\n\n// Rate limiting store\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>();\n\n// Rate limiting middleware\nfunction rateLimit(maxRequests: number, windowMs: number) {\n  return (req: any, res: any, next: any) => {\n    const key = `${req.ip}-${req.route.path}`;\n    const now = Date.now();\n    \n    // Clean expired entries\n    for (const [k, v] of Array.from(rateLimitStore.entries())) {\n      if (v.resetTime < now) {\n        rateLimitStore.delete(k);\n      }\n    }\n    \n    const record = rateLimitStore.get(key);\n    \n    if (!record) {\n      rateLimitStore.set(key, { count: 1, resetTime: now + windowMs });\n      return next();\n    }\n    \n    if (record.count >= maxRequests) {\n      return res.status(429).json({ \n        message: \"Too many requests. Please try again later.\",\n        retryAfter: Math.ceil((record.resetTime - now) / 1000)\n      });\n    }\n    \n    record.count++;\n    next();\n  };\n}\n\n// Input sanitization\nfunction sanitizeInput(obj: any): any {\n  if (typeof obj === 'string') {\n    return obj.trim().replace(/[<>]/g, '');\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(sanitizeInput);\n  }\n  if (obj && typeof obj === 'object') {\n    const sanitized: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      sanitized[key] = sanitizeInput(value);\n    }\n    return sanitized;\n  }\n  return obj;\n}\n\n// Validation middleware\nfunction validateRequest(schema: z.ZodSchema) {\n  return (req: any, res: any, next: any) => {\n    try {\n      req.body = sanitizeInput(req.body);\n      req.body = schema.parse(req.body);\n      next();\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: error.errors.map(e => ({\n            field: e.path.join('.'),\n            message: e.message\n          }))\n        });\n      }\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  };\n}\n\n// Admin role check\nfunction requireAdmin(req: any, res: any, next: any) {\n  if (!req.user || req.user.role !== 'admin') {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = req.user;\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Account routes\n  app.get('/api/accounts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const accounts = await storage.getAccountsByUserId(userId);\n      res.json(accounts);\n    } catch (error) {\n      console.error(\"Error fetching accounts:\", error);\n      res.status(500).json({ message: \"Failed to fetch accounts\" });\n    }\n  });\n\n  app.post('/api/accounts', isAuthenticated, rateLimit(5, 60000), validateRequest(insertAccountSchema.omit({ userId: true, accountNumber: true, balance: true })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Generate unique account number\n      // Generate more secure account number\n      const accountNumber = Math.floor(Math.random() * 9000000000 + 1000000000).toString();\n      \n      const accountData = insertAccountSchema.parse({\n        userId,\n        accountNumber,\n        accountType: req.body.accountType || 'checking',\n        balance: '0.00',\n      });\n\n      const account = await storage.createAccount(accountData);\n      \n      // Send welcome email\n      if (user.email) {\n        await emailService.sendCustomEmail(\n          user.email,\n          userId,\n          'Welcome to Santander Bank',\n          `Your new ${account.accountType} account has been created successfully.\\n\\nAccount Number: ${account.accountNumber}\\nRouting Number: ${account.routingNumber}\\n\\nThank you for choosing Santander Bank.`\n        );\n      }\n\n      res.json(account);\n    } catch (error) {\n      console.error(\"Error creating account:\", error);\n      res.status(500).json({ message: \"Failed to create account\" });\n    }\n  });\n\n  // Transfer routes\n  app.get('/api/transfers', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const accounts = await storage.getAccountsByUserId(userId);\n      \n      let allTransfers: any[] = [];\n      for (const account of accounts) {\n        const transfers = await storage.getTransfersByAccountId(account.id);\n        allTransfers = [...allTransfers, ...transfers];\n      }\n      \n      // Remove duplicates and sort by date\n      const uniqueTransfers = allTransfers.filter((transfer, index, self) => \n        index === self.findIndex(t => t.id === transfer.id)\n      ).sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      \n      res.json(uniqueTransfers);\n    } catch (error) {\n      console.error(\"Error fetching transfers:\", error);\n      res.status(500).json({ message: \"Failed to fetch transfers\" });\n    }\n  });\n\n  app.post('/api/transfers', isAuthenticated, rateLimit(10, 60000), validateRequest(insertTransferSchema.omit({ status: true, fee: true, tax: true })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const transferData = insertTransferSchema.parse(req.body);\n      \n      // Validate from account belongs to user\n      const fromAccount = await storage.getAccountById(transferData.fromAccountId);\n      if (!fromAccount || fromAccount.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied to source account\" });\n      }\n\n      // Check account status\n      if (fromAccount.status !== 'active') {\n        return res.status(400).json({ message: \"Source account is not active\" });\n      }\n\n      // Calculate fees and taxes\n      const amount = parseFloat(transferData.amount);\n      const fee = amount > 1000 ? (amount * 0.001).toFixed(2) : '0.00'; // 0.1% fee for transfers over $1000\n      const tax = (amount * 0.001).toFixed(2); // 0.1% tax\n      const totalAmount = amount + parseFloat(fee) + parseFloat(tax);\n\n      // Check sufficient funds\n      if (parseFloat(fromAccount.balance) < totalAmount) {\n        return res.status(400).json({ message: \"Insufficient funds\" });\n      }\n\n      // Create transfer with verification required status\n      const transfer = await storage.createTransfer({\n        ...transferData,\n        fee,\n        tax,\n        status: 'verification_required',\n      });\n\n      // Send notification email\n      if (user.email) {\n        await emailService.sendTransferNotification(\n          user.email,\n          userId,\n          transferData.amount,\n          'pending verification',\n          transfer.id\n        );\n      }\n\n      res.json(transfer);\n    } catch (error) {\n      console.error(\"Error creating transfer:\", error);\n      res.status(500).json({ message: \"Failed to create transfer\" });\n    }\n  });\n\n  app.get('/api/transfers/:id/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const transferId = req.params.id;\n      const transfer = await storage.getTransferById(transferId);\n      \n      if (!transfer) {\n        return res.status(404).json({ message: \"Transfer not found\" });\n      }\n\n      res.json({ status: transfer.status, rejectionReason: transfer.rejectionReason });\n    } catch (error) {\n      console.error(\"Error fetching transfer status:\", error);\n      res.status(500).json({ message: \"Failed to fetch transfer status\" });\n    }\n  });\n\n  // Transaction routes\n  app.get('/api/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const accounts = await storage.getAccountsByUserId(userId);\n      \n      let allTransactions: any[] = [];\n      for (const account of accounts) {\n        const transactions = await storage.getTransactionsByAccountId(account.id);\n        allTransactions = [...allTransactions, ...transactions.map(t => ({ ...t, accountNumber: account.accountNumber }))];\n      }\n      \n      allTransactions.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      \n      res.json(allTransactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  // Admin routes\n  app.get('/api/admin/users', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get('/api/admin/accounts', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const accounts = await storage.getAllAccounts();\n      res.json(accounts);\n    } catch (error) {\n      console.error(\"Error fetching accounts:\", error);\n      res.status(500).json({ message: \"Failed to fetch accounts\" });\n    }\n  });\n\n  app.get('/api/admin/transfers/pending', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const transfers = await storage.getPendingTransfers();\n      res.json(transfers);\n    } catch (error) {\n      console.error(\"Error fetching pending transfers:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending transfers\" });\n    }\n  });\n\n  app.post('/api/admin/transfers/:id/approve', isAuthenticated, requireAdmin, rateLimit(20, 60000), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n\n      const transferId = req.params.id;\n      const transfer = await storage.getTransferById(transferId);\n      \n      if (!transfer) {\n        return res.status(404).json({ message: \"Transfer not found\" });\n      }\n\n      // Process the transfer\n      const fromAccount = await storage.getAccountById(transfer.fromAccountId);\n      if (!fromAccount) {\n        return res.status(404).json({ message: \"Source account not found\" });\n      }\n\n      const totalAmount = parseFloat(transfer.amount) + parseFloat(transfer.fee) + parseFloat(transfer.tax);\n      const newBalance = (parseFloat(fromAccount.balance) - totalAmount).toFixed(2);\n\n      // Update account balance\n      await storage.updateAccountBalance(transfer.fromAccountId, newBalance);\n\n      // Create transaction records\n      await storage.createTransaction({\n        accountId: transfer.fromAccountId,\n        transferId: transfer.id,\n        type: 'debit',\n        amount: transfer.amount,\n        description: `Transfer to ${transfer.toAccountHolderName}`,\n        balanceAfter: (parseFloat(newBalance) + parseFloat(transfer.fee) + parseFloat(transfer.tax)).toFixed(2),\n      });\n\n      if (parseFloat(transfer.fee) > 0) {\n        await storage.createTransaction({\n          accountId: transfer.fromAccountId,\n          transferId: transfer.id,\n          type: 'fee',\n          amount: transfer.fee,\n          description: 'Transfer fee',\n          balanceAfter: (parseFloat(newBalance) + parseFloat(transfer.tax)).toFixed(2),\n        });\n      }\n\n      if (parseFloat(transfer.tax) > 0) {\n        await storage.createTransaction({\n          accountId: transfer.fromAccountId,\n          transferId: transfer.id,\n          type: 'tax',\n          amount: transfer.tax,\n          description: 'Transfer tax',\n          balanceAfter: newBalance,\n        });\n      }\n\n      // Update transfer status\n      await storage.updateTransferStatus(transferId, 'completed', undefined, userId);\n\n      // Create audit log\n      await storage.createAuditLog({\n        adminId: userId,\n        targetUserId: fromAccount.userId,\n        action: 'transfer_approved',\n        details: {\n          transferId,\n          amount: transfer.amount,\n          fee: transfer.fee,\n          tax: transfer.tax,\n        },\n      });\n\n      // Send notification email\n      const transferUser = await storage.getUser(fromAccount.userId);\n      if (transferUser?.email) {\n        await emailService.sendTransferNotification(\n          transferUser.email,\n          fromAccount.userId,\n          transfer.amount,\n          'completed',\n          transfer.id\n        );\n      }\n\n      res.json({ message: \"Transfer approved successfully\" });\n    } catch (error) {\n      console.error(\"Error approving transfer:\", error);\n      res.status(500).json({ message: \"Failed to approve transfer\" });\n    }\n  });\n\n  app.post('/api/admin/transfers/:id/reject', isAuthenticated, requireAdmin, rateLimit(20, 60000), validateRequest(z.object({ reason: z.string().min(1).max(500) })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n\n      const transferId = req.params.id;\n      const { reason } = req.body;\n      \n      if (!reason) {\n        return res.status(400).json({ message: \"Rejection reason is required\" });\n      }\n\n      const transfer = await storage.getTransferById(transferId);\n      if (!transfer) {\n        return res.status(404).json({ message: \"Transfer not found\" });\n      }\n\n      // Update transfer status\n      await storage.updateTransferStatus(transferId, 'rejected', reason, userId);\n\n      // Create audit log\n      const fromAccount = await storage.getAccountById(transfer.fromAccountId);\n      await storage.createAuditLog({\n        adminId: userId,\n        targetUserId: fromAccount?.userId || '',\n        action: 'transfer_rejected',\n        details: {\n          transferId,\n          reason,\n          amount: transfer.amount,\n        },\n      });\n\n      // Send notification email\n      if (fromAccount) {\n        const transferUser = await storage.getUser(fromAccount.userId);\n        if (transferUser?.email) {\n          await emailService.sendTransferNotification(\n            transferUser.email,\n            fromAccount.userId,\n            transfer.amount,\n            'rejected',\n            transfer.id\n          );\n        }\n      }\n\n      res.json({ message: \"Transfer rejected successfully\" });\n    } catch (error) {\n      console.error(\"Error rejecting transfer:\", error);\n      res.status(500).json({ message: \"Failed to reject transfer\" });\n    }\n  });\n\n  app.post('/api/admin/accounts/:id/credit', isAuthenticated, requireAdmin, rateLimit(10, 60000), validateRequest(z.object({ amount: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, \"Invalid amount format\"), description: z.string().min(1).max(200) })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n\n      const accountId = req.params.id;\n      const { amount, description } = req.body;\n\n      // Amount already validated by middleware\n      await storage.creditAccount(accountId, amount, description, userId);\n\n      // Send notification email\n      const account = await storage.getAccountById(accountId);\n      if (account) {\n        const accountUser = await storage.getUser(account.userId);\n        if (accountUser?.email) {\n          await emailService.sendBalanceChangeNotification(\n            accountUser.email,\n            account.userId,\n            account.accountNumber,\n            'credit',\n            amount,\n            account.balance,\n            description\n          );\n        }\n      }\n\n      res.json({ message: \"Account credited successfully\" });\n    } catch (error) {\n      console.error(\"Error crediting account:\", error);\n      res.status(500).json({ message: \"Failed to credit account\" });\n    }\n  });\n\n  app.post('/api/admin/accounts/:id/debit', isAuthenticated, requireAdmin, rateLimit(10, 60000), validateRequest(z.object({ amount: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, \"Invalid amount format\"), description: z.string().min(1).max(200) })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n\n      const accountId = req.params.id;\n      const { amount, description } = req.body;\n\n      // Amount already validated by middleware\n      await storage.debitAccount(accountId, amount, description, userId);\n\n      // Send notification email\n      const account = await storage.getAccountById(accountId);\n      if (account) {\n        const accountUser = await storage.getUser(account.userId);\n        if (accountUser?.email) {\n          await emailService.sendBalanceChangeNotification(\n            accountUser.email,\n            account.userId,\n            account.accountNumber,\n            'debit',\n            amount,\n            account.balance,\n            description\n          );\n        }\n      }\n\n      res.json({ message: \"Account debited successfully\" });\n    } catch (error) {\n      console.error(\"Error debiting account:\", error);\n      res.status(500).json({ message: \"Failed to debit account\" });\n    }\n  });\n\n  app.post('/api/admin/accounts/:id/status', isAuthenticated, requireAdmin, rateLimit(20, 60000), validateRequest(z.object({ status: z.enum(['active', 'frozen', 'closed']), reason: z.string().min(1).max(500) })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n\n      const accountId = req.params.id;\n      const { status, reason } = req.body;\n\n      await storage.updateAccountStatus(accountId, status);\n\n      // Create audit log\n      const account = await storage.getAccountById(accountId);\n      await storage.createAuditLog({\n        adminId: userId,\n        targetUserId: account?.userId || '',\n        action: status === 'frozen' ? 'account_frozen' : status === 'closed' ? 'account_closed' : 'account_unfrozen',\n        details: {\n          accountId,\n          status,\n          reason,\n        },\n      });\n\n      // Send notification email\n      if (account) {\n        const accountUser = await storage.getUser(account.userId);\n        if (accountUser?.email) {\n          await emailService.sendAccountStatusNotification(\n            accountUser.email,\n            account.userId,\n            account.accountNumber,\n            status,\n            reason\n          );\n        }\n      }\n\n      res.json({ message: \"Account status updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating account status:\", error);\n      res.status(500).json({ message: \"Failed to update account status\" });\n    }\n  });\n\n  app.post('/api/admin/email', isAuthenticated, requireAdmin, rateLimit(5, 60000), validateRequest(z.object({ userIds: z.array(z.string()).min(1), subject: z.string().min(1).max(200), message: z.string().min(1).max(2000) })), async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n\n      const { userIds, subject, message } = req.body;\n\n      if (!Array.isArray(userIds) || userIds.length === 0) {\n        return res.status(400).json({ message: \"At least one user must be selected\" });\n      }\n\n      let emailsSent = 0;\n      for (const targetUserId of userIds) {\n        const targetUser = await storage.getUser(targetUserId);\n        if (targetUser?.email) {\n          const success = await emailService.sendCustomEmail(\n            targetUser.email,\n            targetUserId,\n            subject,\n            message\n          );\n          if (success) emailsSent++;\n        }\n      }\n\n      // Create audit log\n      await storage.createAuditLog({\n        adminId: userId,\n        action: 'email_sent',\n        details: {\n          subject,\n          recipientCount: userIds.length,\n          emailsSent,\n        },\n      });\n\n      res.json({ message: `Email sent to ${emailsSent} users successfully` });\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      res.status(500).json({ message: \"Failed to send email\" });\n    }\n  });\n\n  app.get('/api/admin/audit-logs', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const auditLogs = await storage.getAuditLogs();\n      res.json(auditLogs);\n    } catch (error) {\n      console.error(\"Error fetching audit logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  // Create new user route (admin only)\n  app.post('/api/admin/users', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const createUserSchema = insertUserSchema.extend({\n        password: z.string().min(6, \"Password must be at least 6 characters\"),\n      });\n\n      const userData = createUserSchema.parse(req.body);\n      \n      // Check if email already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      // Hash the password\n      const hashedPassword = await hashPassword(userData.password);\n      \n      // Create user with hashed password\n      const newUser = await storage.upsertUser({\n        ...userData,\n        password: hashedPassword,\n      });\n\n      // Create audit log\n      await storage.createAuditLog({\n        adminId: userId,\n        targetUserId: newUser.id,\n        action: 'account_created',\n        details: {\n          email: newUser.email,\n          role: newUser.role,\n        },\n      });\n\n      // Remove password from response\n      const { password: _, ...userResponse } = newUser;\n      res.json(userResponse);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\" });\n      }\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":22450},"server/seed.ts":{"content":"import { db } from './db';\nimport { users, accounts, transfers, transactions, auditLogs, emailNotifications } from '@shared/schema';\nimport { hashPassword } from './auth';\nimport { storage } from './storage';\nimport { eq } from 'drizzle-orm';\n\nexport async function seedDatabase() {\n  console.log('🌱 Starting database seed...');\n\n  try {\n    // Get existing admin user data before clearing\n    const existingAdmins = await db.select().from(users).where(eq(users.role, 'admin'));\n    \n    // Clear existing data completely\n    await db.delete(emailNotifications);\n    await db.delete(auditLogs);\n    await db.delete(transactions);\n    await db.delete(transfers);\n    await db.delete(accounts);\n    await db.delete(users);\n    \n    // Recreate admin user\n    let adminUserId: string;\n    if (existingAdmins.length > 0) {\n      // Recreate the existing admin\n      const [admin] = await db.insert(users).values(existingAdmins[0]).returning();\n      adminUserId = admin.id;\n      console.log('✅ Recreated existing admin user');\n    } else {\n      // Create new admin user\n      const hashedPassword = await hashPassword('admin123');\n      const [newAdmin] = await db.insert(users).values({\n        email: 'admin@admin.com',\n        password: hashedPassword,\n        firstName: 'Admin',\n        lastName: 'User',\n        role: 'admin',\n      }).returning();\n      adminUserId = newAdmin.id;\n      console.log('✅ Created new admin user');\n    }\n\n    // Create realistic customer data\n    const customerData = [\n      {\n        email: 'john.doe@email.com',\n        password: await hashPassword('password123'),\n        firstName: 'John',\n        lastName: 'Doe',\n        role: 'customer' as const,\n      },\n      {\n        email: 'jane.smith@email.com',\n        password: await hashPassword('password123'),\n        firstName: 'Jane',\n        lastName: 'Smith',\n        role: 'customer' as const,\n      },\n      {\n        email: 'michael.johnson@email.com',\n        password: await hashPassword('password123'),\n        firstName: 'Michael',\n        lastName: 'Johnson',\n        role: 'customer' as const,\n      },\n      {\n        email: 'sarah.williams@email.com',\n        password: await hashPassword('password123'),\n        firstName: 'Sarah',\n        lastName: 'Williams',\n        role: 'customer' as const,\n      },\n      {\n        email: 'david.brown@email.com',\n        password: await hashPassword('password123'),\n        firstName: 'David',\n        lastName: 'Brown',\n        role: 'customer' as const,\n      }\n    ];\n\n    // Insert customers and capture their IDs\n    const createdCustomers = [];\n    for (const customer of customerData) {\n      const [newCustomer] = await db.insert(users).values(customer).returning();\n      createdCustomers.push(newCustomer);\n    }\n    console.log('✅ Created customer users');\n\n    // Create bank accounts with realistic balances using actual customer IDs\n    const accountData = [\n      {\n        userId: createdCustomers[0].id, // John Doe\n        accountNumber: '1234567890',\n        accountType: 'checking',\n        balance: '15420.75',\n        status: 'active' as const,\n      },\n      {\n        userId: createdCustomers[0].id, // John Doe\n        accountNumber: '1234567891',\n        accountType: 'savings',\n        balance: '45230.25',\n        status: 'active' as const,\n      },\n      {\n        userId: createdCustomers[1].id, // Jane Smith\n        accountNumber: '2345678901',\n        accountType: 'checking',\n        balance: '8750.50',\n        status: 'active' as const,\n      },\n      {\n        userId: createdCustomers[1].id, // Jane Smith\n        accountNumber: '2345678902',\n        accountType: 'savings',\n        balance: '23100.00',\n        status: 'frozen' as const,\n      },\n      {\n        userId: createdCustomers[2].id, // Michael Johnson\n        accountNumber: '3456789012',\n        accountType: 'checking',\n        balance: '2890.35',\n        status: 'active' as const,\n      },\n      {\n        userId: createdCustomers[3].id, // Sarah Williams\n        accountNumber: '4567890123',\n        accountType: 'checking',\n        balance: '67890.80',\n        status: 'active' as const,\n      },\n      {\n        userId: createdCustomers[3].id, // Sarah Williams\n        accountNumber: '4567890124',\n        accountType: 'savings',\n        balance: '125000.00',\n        status: 'active' as const,\n      },\n      {\n        userId: createdCustomers[4].id, // David Brown\n        accountNumber: '5678901234',\n        accountType: 'checking',\n        balance: '0.00',\n        status: 'closed' as const,\n      },\n    ];\n\n    const createdAccounts = [];\n    for (const account of accountData) {\n      const [newAccount] = await db.insert(accounts).values(account).returning();\n      createdAccounts.push(newAccount);\n    }\n    console.log('✅ Created bank accounts');\n\n    // Create realistic transaction history\n    const transactionData = [];\n    \n    // Transactions for John Doe (customer-001)\n    const johnCheckingAccount = createdAccounts.find(a => a.accountNumber === '1234567890');\n    const johnSavingsAccount = createdAccounts.find(a => a.accountNumber === '1234567891');\n    \n    if (johnCheckingAccount) {\n      transactionData.push(\n        {\n          accountId: johnCheckingAccount.id,\n          type: 'credit',\n          amount: '2500.00',\n          description: 'Salary Deposit',\n          balanceAfter: '15420.75',\n          createdAt: new Date('2024-08-20T10:00:00Z'),\n        },\n        {\n          accountId: johnCheckingAccount.id,\n          type: 'debit',\n          amount: '1200.00',\n          description: 'Rent Payment',\n          balanceAfter: '14220.75',\n          createdAt: new Date('2024-08-19T14:30:00Z'),\n        },\n        {\n          accountId: johnCheckingAccount.id,\n          type: 'debit',\n          amount: '85.50',\n          description: 'Grocery Store',\n          balanceAfter: '15306.25',\n          createdAt: new Date('2024-08-18T18:45:00Z'),\n        },\n        {\n          accountId: johnCheckingAccount.id,\n          type: 'debit',\n          amount: '45.00',\n          description: 'Gas Station',\n          balanceAfter: '15351.25',\n          createdAt: new Date('2024-08-17T12:15:00Z'),\n        }\n      );\n    }\n\n    if (johnSavingsAccount) {\n      transactionData.push(\n        {\n          accountId: johnSavingsAccount.id,\n          type: 'credit',\n          amount: '5000.00',\n          description: 'Investment Dividend',\n          balanceAfter: '45230.25',\n          createdAt: new Date('2024-08-15T09:00:00Z'),\n        }\n      );\n    }\n\n    // Transactions for Jane Smith (customer-002)\n    const janeCheckingAccount = createdAccounts.find(a => a.accountNumber === '2345678901');\n    if (janeCheckingAccount) {\n      transactionData.push(\n        {\n          accountId: janeCheckingAccount.id,\n          type: 'credit',\n          amount: '3200.00',\n          description: 'Salary Deposit',\n          balanceAfter: '8750.50',\n          createdAt: new Date('2024-08-21T08:00:00Z'),\n        },\n        {\n          accountId: janeCheckingAccount.id,\n          type: 'debit',\n          amount: '950.00',\n          description: 'Credit Card Payment',\n          balanceAfter: '7800.50',\n          createdAt: new Date('2024-08-20T16:20:00Z'),\n        }\n      );\n    }\n\n    // Transactions for Michael Johnson (customer-003)\n    const michaelAccount = createdAccounts.find(a => a.accountNumber === '3456789012');\n    if (michaelAccount) {\n      transactionData.push(\n        {\n          accountId: michaelAccount.id,\n          type: 'credit',\n          amount: '1800.00',\n          description: 'Freelance Payment',\n          balanceAfter: '2890.35',\n          createdAt: new Date('2024-08-22T11:30:00Z'),\n        },\n        {\n          accountId: michaelAccount.id,\n          type: 'debit',\n          amount: '125.75',\n          description: 'Utility Bill',\n          balanceAfter: '2764.60',\n          createdAt: new Date('2024-08-21T13:45:00Z'),\n        }\n      );\n    }\n\n    // Insert transactions\n    for (const transaction of transactionData) {\n      await db.insert(transactions).values(transaction);\n    }\n    console.log('✅ Created transaction history');\n\n    // Create sample transfers with different statuses\n    const transferData = [\n      {\n        fromAccountId: johnCheckingAccount?.id || '',\n        toAccountNumber: '9876543210',\n        toRoutingNumber: '011075150',\n        toBankName: 'Chase Bank',\n        toAccountHolderName: 'Alice Wilson',\n        amount: '500.00',\n        fee: '2.50',\n        tax: '5.00',\n        description: 'Birthday gift',\n        status: 'verification_required' as const,\n        createdAt: new Date('2024-08-23T14:20:00Z'),\n      },\n      {\n        fromAccountId: janeCheckingAccount?.id || '',\n        toAccountNumber: '1111222233',\n        toRoutingNumber: '021000021',\n        toBankName: 'Bank of America',\n        toAccountHolderName: 'Robert Taylor',\n        amount: '1500.00',\n        fee: '7.50',\n        tax: '15.00',\n        description: 'Loan repayment',\n        status: 'completed' as const,\n        approvedBy: adminUserId,\n        approvedAt: new Date('2024-08-22T10:00:00Z'),\n        completedAt: new Date('2024-08-22T10:05:00Z'),\n        createdAt: new Date('2024-08-22T09:45:00Z'),\n      },\n      {\n        fromAccountId: michaelAccount?.id || '',\n        toAccountNumber: '5555666677',\n        toRoutingNumber: '031000503',\n        toBankName: 'Wells Fargo',\n        toAccountHolderName: 'Emma Davis',\n        amount: '2000.00',\n        fee: '10.00',\n        tax: '20.00',\n        description: 'Contract payment',\n        status: 'rejected' as const,\n        rejectionReason: 'Insufficient documentation provided',\n        approvedBy: adminUserId,\n        approvedAt: new Date('2024-08-21T15:30:00Z'),\n        createdAt: new Date('2024-08-21T14:00:00Z'),\n      }\n    ];\n\n    for (const transfer of transferData) {\n      if (transfer.fromAccountId) {\n        await db.insert(transfers).values(transfer);\n      }\n    }\n    console.log('✅ Created sample transfers');\n\n    // Create audit logs using actual customer IDs\n    const auditData = [\n      {\n        adminId: adminUserId,\n        targetUserId: createdCustomers[1].id, // Jane Smith\n        action: 'account_frozen' as const,\n        details: {\n          accountId: createdAccounts.find(a => a.accountNumber === '2345678902')?.id,\n          reason: 'Suspicious activity detected',\n        },\n        createdAt: new Date('2024-08-21T16:45:00Z'),\n      },\n      {\n        adminId: adminUserId,\n        targetUserId: createdCustomers[4].id, // David Brown\n        action: 'account_closed' as const,\n        details: {\n          accountId: createdAccounts.find(a => a.accountNumber === '5678901234')?.id,\n          reason: 'Account closed at customer request',\n        },\n        createdAt: new Date('2024-08-20T11:20:00Z'),\n      },\n      {\n        adminId: adminUserId,\n        targetUserId: createdCustomers[0].id, // John Doe\n        action: 'balance_credited' as const,\n        details: {\n          accountId: johnSavingsAccount?.id,\n          amount: '5000.00',\n          description: 'Investment Dividend',\n          newBalance: '45230.25',\n        },\n        createdAt: new Date('2024-08-15T09:05:00Z'),\n      }\n    ];\n\n    for (const audit of auditData) {\n      await db.insert(auditLogs).values(audit);\n    }\n    console.log('✅ Created audit logs');\n\n    // Create email notifications using actual customer IDs\n    const emailData = [\n      {\n        userId: createdCustomers[0].id, // John Doe\n        subject: 'Welcome to Santander Bank',\n        body: 'Your new checking account has been created successfully.\\n\\nAccount Number: 1234567890\\nRouting Number: 011075150\\n\\nThank you for choosing Santander Bank.',\n        status: 'sent',\n        sentAt: new Date('2024-08-01T12:00:00Z'),\n      },\n      {\n        userId: createdCustomers[1].id, // Jane Smith\n        subject: 'Account Status Update',\n        body: 'Your savings account (2345678902) has been temporarily frozen due to suspicious activity. Please contact customer service.',\n        status: 'sent',\n        sentAt: new Date('2024-08-21T16:50:00Z'),\n      },\n      {\n        userId: createdCustomers[2].id, // Michael Johnson\n        subject: 'Transfer Rejected',\n        body: 'Your transfer of $2000.00 to Emma Davis has been rejected. Reason: Insufficient documentation provided.',\n        status: 'sent',\n        sentAt: new Date('2024-08-21T15:35:00Z'),\n      }\n    ];\n\n    for (const email of emailData) {\n      await db.insert(emailNotifications).values(email);\n    }\n    console.log('✅ Created email notifications');\n\n    console.log('🎉 Database seeded successfully!');\n    console.log('\\n📊 Seed Data Summary:');\n    console.log('- 1 Admin user (admin@admin.com / admin123)');\n    console.log('- 5 Customer users (password123 for all)');\n    console.log('- 8 Bank accounts with realistic balances');\n    console.log('- 7 Transaction records with history');\n    console.log('- 3 Sample transfers (pending, completed, rejected)');\n    console.log('- 3 Audit log entries');\n    console.log('- 3 Email notifications');\n    console.log('\\n🔐 Test Accounts:');\n    console.log('- john.doe@email.com (2 accounts: checking $15,420.75, savings $45,230.25)');\n    console.log('- jane.smith@email.com (2 accounts: checking $8,750.50, savings $23,100.00 - FROZEN)');\n    console.log('- michael.johnson@email.com (1 account: checking $2,890.35)');\n    console.log('- sarah.williams@email.com (2 accounts: checking $67,890.80, savings $125,000.00)');\n    console.log('- david.brown@email.com (1 account: checking $0.00 - CLOSED)');\n\n  } catch (error) {\n    console.error('❌ Error seeding database:', error);\n    throw error;\n  }\n}\n\n// Run seed if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedDatabase()\n    .then(() => {\n      console.log('✅ Seed completed');\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error('❌ Seed failed:', error);\n      process.exit(1);\n    });\n}","size_bytes":14051},"server/storage.ts":{"content":"import {\n  users,\n  accounts,\n  transfers,\n  transactions,\n  auditLogs,\n  emailNotifications,\n  type User,\n  type UpsertUser,\n  type Account,\n  type InsertAccount,\n  type Transfer,\n  type InsertTransfer,\n  type Transaction,\n  type InsertTransaction,\n  type AuditLog,\n  type InsertAuditLog,\n  type EmailNotification,\n  type InsertEmailNotification,\n  type UserRole,\n  type AccountStatus,\n  type TransferStatus,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, sql } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  createUserWithId(id: string, user: UpsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<UpsertUser>): Promise<User>;\n  \n  // Account operations\n  createAccount(account: InsertAccount): Promise<Account>;\n  getAccountsByUserId(userId: string): Promise<Account[]>;\n  getAccountById(id: string): Promise<Account | undefined>;\n  getAccountByNumber(accountNumber: string): Promise<Account | undefined>;\n  updateAccountBalance(accountId: string, newBalance: string): Promise<Account>;\n  updateAccountStatus(accountId: string, status: AccountStatus): Promise<Account>;\n  \n  // Transfer operations\n  createTransfer(transfer: InsertTransfer): Promise<Transfer>;\n  getTransferById(id: string): Promise<Transfer | undefined>;\n  getTransfersByAccountId(accountId: string): Promise<Transfer[]>;\n  getPendingTransfers(): Promise<Transfer[]>;\n  updateTransferStatus(id: string, status: TransferStatus, rejectionReason?: string, approvedBy?: string): Promise<Transfer>;\n  \n  // Transaction operations\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  getTransactionsByAccountId(accountId: string): Promise<Transaction[]>;\n  \n  // Audit log operations\n  createAuditLog(auditLog: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(): Promise<AuditLog[]>;\n  \n  // Email notification operations\n  createEmailNotification(notification: InsertEmailNotification): Promise<EmailNotification>;\n  getEmailNotificationsByUserId(userId: string): Promise<EmailNotification[]>;\n  \n  // Admin operations\n  getAllUsers(): Promise<User[]>;\n  getAllAccounts(): Promise<Account[]>;\n  creditAccount(accountId: string, amount: string, description: string, adminId: string): Promise<void>;\n  debitAccount(accountId: string, amount: string, description: string, adminId: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.email,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async createUserWithId(id: string, userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        id,\n        ...userData,\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<UpsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        ...userData,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  // Account operations\n  async createAccount(accountData: InsertAccount): Promise<Account> {\n    const [account] = await db\n      .insert(accounts)\n      .values(accountData)\n      .returning();\n    return account;\n  }\n\n  async getAccountsByUserId(userId: string): Promise<Account[]> {\n    return await db\n      .select()\n      .from(accounts)\n      .where(eq(accounts.userId, userId))\n      .orderBy(desc(accounts.createdAt));\n  }\n\n  async getAccountById(id: string): Promise<Account | undefined> {\n    const [account] = await db\n      .select()\n      .from(accounts)\n      .where(eq(accounts.id, id));\n    return account;\n  }\n\n  async getAccountByNumber(accountNumber: string): Promise<Account | undefined> {\n    const [account] = await db\n      .select()\n      .from(accounts)\n      .where(eq(accounts.accountNumber, accountNumber));\n    return account;\n  }\n\n  async updateAccountBalance(accountId: string, newBalance: string): Promise<Account> {\n    const [account] = await db\n      .update(accounts)\n      .set({ \n        balance: newBalance,\n        updatedAt: new Date()\n      })\n      .where(eq(accounts.id, accountId))\n      .returning();\n    return account;\n  }\n\n  async updateAccountStatus(accountId: string, status: AccountStatus): Promise<Account> {\n    const [account] = await db\n      .update(accounts)\n      .set({ \n        status,\n        updatedAt: new Date()\n      })\n      .where(eq(accounts.id, accountId))\n      .returning();\n    return account;\n  }\n\n  // Transfer operations\n  async createTransfer(transferData: InsertTransfer): Promise<Transfer> {\n    const [transfer] = await db\n      .insert(transfers)\n      .values(transferData)\n      .returning();\n    return transfer;\n  }\n\n  async getTransferById(id: string): Promise<Transfer | undefined> {\n    const [transfer] = await db\n      .select()\n      .from(transfers)\n      .where(eq(transfers.id, id));\n    return transfer;\n  }\n\n  async getTransfersByAccountId(accountId: string): Promise<Transfer[]> {\n    return await db\n      .select()\n      .from(transfers)\n      .where(or(\n        eq(transfers.fromAccountId, accountId),\n        eq(transfers.toAccountId, accountId)\n      ))\n      .orderBy(desc(transfers.createdAt));\n  }\n\n  async getPendingTransfers(): Promise<Transfer[]> {\n    return await db\n      .select()\n      .from(transfers)\n      .where(eq(transfers.status, 'verification_required'))\n      .orderBy(desc(transfers.createdAt));\n  }\n\n  async updateTransferStatus(\n    id: string, \n    status: TransferStatus, \n    rejectionReason?: string, \n    approvedBy?: string\n  ): Promise<Transfer> {\n    const updateData: any = { \n      status,\n      updatedAt: new Date()\n    };\n    \n    if (rejectionReason) {\n      updateData.rejectionReason = rejectionReason;\n    }\n    \n    if (approvedBy) {\n      updateData.approvedBy = approvedBy;\n      updateData.approvedAt = new Date();\n    }\n    \n    if (status === 'completed') {\n      updateData.completedAt = new Date();\n    }\n\n    const [transfer] = await db\n      .update(transfers)\n      .set(updateData)\n      .where(eq(transfers.id, id))\n      .returning();\n    return transfer;\n  }\n\n  // Transaction operations\n  async createTransaction(transactionData: InsertTransaction): Promise<Transaction> {\n    const [transaction] = await db\n      .insert(transactions)\n      .values(transactionData)\n      .returning();\n    return transaction;\n  }\n\n  async getTransactionsByAccountId(accountId: string): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.accountId, accountId))\n      .orderBy(desc(transactions.createdAt));\n  }\n\n  // Audit log operations\n  async createAuditLog(auditLogData: InsertAuditLog): Promise<AuditLog> {\n    const [auditLog] = await db\n      .insert(auditLogs)\n      .values(auditLogData)\n      .returning();\n    return auditLog;\n  }\n\n  async getAuditLogs(): Promise<AuditLog[]> {\n    return await db\n      .select()\n      .from(auditLogs)\n      .orderBy(desc(auditLogs.createdAt))\n      .limit(1000); // Limit to latest 1000 entries\n  }\n\n  // Email notification operations\n  async createEmailNotification(notificationData: InsertEmailNotification): Promise<EmailNotification> {\n    const [notification] = await db\n      .insert(emailNotifications)\n      .values(notificationData)\n      .returning();\n    return notification;\n  }\n\n  async getEmailNotificationsByUserId(userId: string): Promise<EmailNotification[]> {\n    return await db\n      .select()\n      .from(emailNotifications)\n      .where(eq(emailNotifications.userId, userId))\n      .orderBy(desc(emailNotifications.sentAt));\n  }\n\n  // Admin operations\n  async getAllUsers(): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .orderBy(desc(users.createdAt));\n  }\n\n  async getAllAccounts(): Promise<Account[]> {\n    return await db\n      .select()\n      .from(accounts)\n      .orderBy(desc(accounts.createdAt));\n  }\n\n  async creditAccount(accountId: string, amount: string, description: string, adminId: string): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Get current account\n      const [account] = await tx\n        .select()\n        .from(accounts)\n        .where(eq(accounts.id, accountId));\n      \n      if (!account) {\n        throw new Error(\"Account not found\");\n      }\n\n      // Calculate new balance\n      const currentBalance = parseFloat(account.balance);\n      const creditAmount = parseFloat(amount);\n      const newBalance = (currentBalance + creditAmount).toFixed(2);\n\n      // Update account balance\n      await tx\n        .update(accounts)\n        .set({ \n          balance: newBalance,\n          updatedAt: new Date()\n        })\n        .where(eq(accounts.id, accountId));\n\n      // Create transaction record\n      await tx\n        .insert(transactions)\n        .values({\n          accountId,\n          type: 'credit',\n          amount,\n          description,\n          balanceAfter: newBalance,\n        });\n\n      // Create audit log\n      await tx\n        .insert(auditLogs)\n        .values({\n          adminId,\n          targetUserId: account.userId,\n          action: 'balance_credited',\n          details: {\n            accountId,\n            amount,\n            description,\n            newBalance,\n          },\n        });\n    });\n  }\n\n  async debitAccount(accountId: string, amount: string, description: string, adminId: string): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Get current account\n      const [account] = await tx\n        .select()\n        .from(accounts)\n        .where(eq(accounts.id, accountId));\n      \n      if (!account) {\n        throw new Error(\"Account not found\");\n      }\n\n      // Calculate new balance\n      const currentBalance = parseFloat(account.balance);\n      const debitAmount = parseFloat(amount);\n      const newBalance = (currentBalance - debitAmount).toFixed(2);\n\n      // Check for sufficient funds\n      if (parseFloat(newBalance) < 0) {\n        throw new Error(\"Insufficient funds\");\n      }\n\n      // Update account balance\n      await tx\n        .update(accounts)\n        .set({ \n          balance: newBalance,\n          updatedAt: new Date()\n        })\n        .where(eq(accounts.id, accountId));\n\n      // Create transaction record\n      await tx\n        .insert(transactions)\n        .values({\n          accountId,\n          type: 'debit',\n          amount,\n          description,\n          balanceAfter: newBalance,\n        });\n\n      // Create audit log\n      await tx\n        .insert(auditLogs)\n        .values({\n          adminId,\n          targetUserId: account.userId,\n          action: 'balance_debited',\n          details: {\n            accountId,\n            amount,\n            description,\n            newBalance,\n          },\n        });\n    });\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11608},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  pgEnum,\n  boolean,\n  uuid,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table - mandatory for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User roles\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'customer']);\n\n// Account status\nexport const accountStatusEnum = pgEnum('account_status', ['active', 'frozen', 'closed']);\n\n// Transfer status\nexport const transferStatusEnum = pgEnum('transfer_status', [\n  'pending',\n  'processing', \n  'verification_required',\n  'approved',\n  'completed',\n  'rejected',\n  'failed'\n]);\n\n// Audit action types\nexport const auditActionEnum = pgEnum('audit_action', [\n  'account_created',\n  'account_frozen',\n  'account_unfrozen', \n  'account_closed',\n  'balance_credited',\n  'balance_debited',\n  'transfer_approved',\n  'transfer_rejected',\n  'email_sent'\n]);\n\n// User storage table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\"), // For local authentication\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").default('customer').notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Bank accounts\nexport const accounts = pgTable(\"accounts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  accountNumber: varchar(\"account_number\").unique().notNull(),\n  routingNumber: varchar(\"routing_number\").notNull().default('011075150'), // Santander routing number\n  accountType: varchar(\"account_type\").notNull().default('checking'),\n  balance: decimal(\"balance\", { precision: 15, scale: 2 }).notNull().default('0.00'),\n  status: accountStatusEnum(\"status\").default('active').notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Transfers\nexport const transfers = pgTable(\"transfers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fromAccountId: uuid(\"from_account_id\").references(() => accounts.id).notNull(),\n  toAccountId: uuid(\"to_account_id\").references(() => accounts.id),\n  toAccountNumber: varchar(\"to_account_number\"),\n  toRoutingNumber: varchar(\"to_routing_number\"),\n  toBankName: varchar(\"to_bank_name\"),\n  toAccountHolderName: varchar(\"to_account_holder_name\").notNull(),\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  fee: decimal(\"fee\", { precision: 15, scale: 2 }).notNull().default('0.00'),\n  tax: decimal(\"tax\", { precision: 15, scale: 2 }).notNull().default('0.00'),\n  description: text(\"description\"),\n  status: transferStatusEnum(\"status\").default('pending').notNull(),\n  rejectionReason: text(\"rejection_reason\"),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Transactions\nexport const transactions = pgTable(\"transactions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  accountId: uuid(\"account_id\").references(() => accounts.id).notNull(),\n  transferId: uuid(\"transfer_id\").references(() => transfers.id),\n  type: varchar(\"type\").notNull(), // credit, debit, fee, tax\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  description: text(\"description\").notNull(),\n  balanceAfter: decimal(\"balance_after\", { precision: 15, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Audit logs\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  adminId: varchar(\"admin_id\").references(() => users.id).notNull(),\n  targetUserId: varchar(\"target_user_id\").references(() => users.id),\n  action: auditActionEnum(\"action\").notNull(),\n  details: jsonb(\"details\"),\n  ipAddress: varchar(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Email notifications\nexport const emailNotifications = pgTable(\"email_notifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  subject: varchar(\"subject\").notNull(),\n  body: text(\"body\").notNull(),\n  status: varchar(\"status\").notNull().default('sent'), // sent, failed\n  sentAt: timestamp(\"sent_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  accounts: many(accounts),\n  auditLogs: many(auditLogs),\n  emailNotifications: many(emailNotifications),\n}));\n\nexport const accountsRelations = relations(accounts, ({ one, many }) => ({\n  user: one(users, { fields: [accounts.userId], references: [users.id] }),\n  transfersFrom: many(transfers, { relationName: \"fromAccount\" }),\n  transfersTo: many(transfers, { relationName: \"toAccount\" }),\n  transactions: many(transactions),\n}));\n\nexport const transfersRelations = relations(transfers, ({ one, many }) => ({\n  fromAccount: one(accounts, { \n    fields: [transfers.fromAccountId], \n    references: [accounts.id],\n    relationName: \"fromAccount\"\n  }),\n  toAccount: one(accounts, { \n    fields: [transfers.toAccountId], \n    references: [accounts.id],\n    relationName: \"toAccount\"\n  }),\n  approver: one(users, { fields: [transfers.approvedBy], references: [users.id] }),\n  transactions: many(transactions),\n}));\n\nexport const transactionsRelations = relations(transactions, ({ one }) => ({\n  account: one(accounts, { fields: [transactions.accountId], references: [accounts.id] }),\n  transfer: one(transfers, { fields: [transactions.transferId], references: [transfers.id] }),\n}));\n\nexport const auditLogsRelations = relations(auditLogs, ({ one }) => ({\n  admin: one(users, { fields: [auditLogs.adminId], references: [users.id] }),\n  targetUser: one(users, { fields: [auditLogs.targetUserId], references: [users.id] }),\n}));\n\nexport const emailNotificationsRelations = relations(emailNotifications, ({ one }) => ({\n  user: one(users, { fields: [emailNotifications.userId], references: [users.id] }),\n}));\n\n// Zod schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Valid email required\"),\n  password: z.string().min(1, \"Password required\"),\n});\n\nexport const insertAccountSchema = createInsertSchema(accounts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTransferSchema = createInsertSchema(transfers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  approvedBy: true,\n  approvedAt: true,\n  completedAt: true,\n}).extend({\n  amount: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, \"Invalid amount format\"),\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEmailNotificationSchema = createInsertSchema(emailNotifications).omit({\n  id: true,\n  sentAt: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Account = typeof accounts.$inferSelect;\nexport type InsertAccount = z.infer<typeof insertAccountSchema>;\nexport type Transfer = typeof transfers.$inferSelect;\nexport type InsertTransfer = z.infer<typeof insertTransferSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type EmailNotification = typeof emailNotifications.$inferSelect;\nexport type InsertEmailNotification = z.infer<typeof insertEmailNotificationSchema>;\n\n// Enums for TypeScript\nexport type UserRole = 'admin' | 'customer';\nexport type AccountStatus = 'active' | 'frozen' | 'closed';\nexport type TransferStatus = 'pending' | 'processing' | 'verification_required' | 'approved' | 'completed' | 'rejected' | 'failed';\nexport type AuditAction = 'account_created' | 'account_frozen' | 'account_unfrozen' | 'account_closed' | 'balance_credited' | 'balance_debited' | 'transfer_approved' | 'transfer_rejected' | 'email_sent';\n","size_bytes":8970},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\nimport Home from \"@/pages/home\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport CustomerDashboard from \"@/pages/customer-dashboard\";\nimport Transfer from \"@/pages/transfer\";\nimport UserManagement from \"@/pages/user-management\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route path=\"/admin/users\" component={UserManagement} />\n      <Route path=\"/dashboard\" component={CustomerDashboard} />\n      <Route path=\"/transfer\" component={Transfer} />\n      <Route path=\"/home\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1360},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(224, 71%, 4%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(224, 71%, 4%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(224, 71%, 4%);\n  --primary: hsl(0, 100%, 93%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(0, 100%, 47%);\n  --radius: 0.5rem;\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n\n  /* Santander Colors */\n  --santander-red: hsl(0, 100%, 93%);\n  --santander-dark: hsl(348, 100%, 37%);\n  --santander-light: hsl(0, 100%, 97%);\n  \n  /* Font families */\n  --font-sans: 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n  --font-serif: ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif;\n  --font-mono: ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace;\n}\n\n.dark {\n  --background: hsl(224, 71%, 4%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(224, 71%, 4%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(224, 71%, 4%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(0, 100%, 93%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(215, 28%, 17%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(215, 28%, 17%);\n  --muted-foreground: hsl(218, 11%, 65%);\n  --accent: hsl(215, 28%, 17%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(0, 85%, 97%);\n  --border: hsl(215, 28%, 17%);\n  --input: hsl(215, 28%, 17%);\n  --ring: hsl(0, 100%, 47%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground font-sans;\n  }\n}\n\n@layer components {\n  .santander-red {\n    color: var(--santander-red);\n  }\n  \n  .bg-santander-red {\n    background-color: var(--santander-red);\n  }\n  \n  .bg-santander-dark {\n    background-color: var(--santander-dark);\n  }\n  \n  .border-santander-red {\n    border-color: var(--santander-red);\n  }\n  \n  .text-santander-red {\n    color: var(--santander-red);\n  }\n  \n  .text-santander-dark {\n    color: var(--santander-dark);\n  }\n  \n  .hover\\:bg-santander-red:hover {\n    background-color: var(--santander-red);\n  }\n  \n  .hover\\:bg-santander-dark:hover {\n    background-color: var(--santander-dark);\n  }\n  \n  .hover\\:text-santander-red:hover {\n    color: var(--santander-red);\n  }\n}\n\n/* Font Awesome Icons */\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--border));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--santander-red));\n}\n\n/* Animation utilities */\n.animate-fade-in {\n  animation: fadeIn 0.5s ease-in-out;\n}\n\n.animate-slide-up {\n  animation: slideUp 0.3s ease-out;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(10px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n/* Banking specific styles */\n.account-card {\n  @apply bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow duration-200;\n}\n\n.balance-text {\n  @apply font-mono text-2xl font-bold text-gray-900;\n}\n\n.transaction-item {\n  @apply flex items-center justify-between p-4 border-b border-gray-100 last:border-b-0 hover:bg-gray-50 transition-colors duration-150;\n}\n\n.status-badge {\n  @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;\n}\n\n.status-active {\n  @apply bg-green-100 text-green-800;\n}\n\n.status-frozen {\n  @apply bg-orange-100 text-orange-800;\n}\n\n.status-closed {\n  @apply bg-red-100 text-red-800;\n}\n\n/* Form enhancements */\n.form-input {\n  @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-santander-red focus:ring-santander-red sm:text-sm;\n}\n\n.form-label {\n  @apply block text-sm font-medium text-gray-700 mb-1;\n}\n\n/* Button variants */\n.btn-primary {\n  @apply bg-santander-red text-white hover:bg-santander-dark focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 transition-colors duration-200;\n}\n\n.btn-secondary {\n  @apply bg-white text-santander-red border border-santander-red hover:bg-santander-red hover:text-white focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 transition-colors duration-200;\n}\n\n/* Loading states */\n.loading-spinner {\n  @apply animate-spin rounded-full border-2 border-gray-300 border-t-santander-red;\n}\n\n/* Responsive utilities */\n@media (max-width: 640px) {\n  .mobile-stack {\n    @apply flex-col space-y-2 space-x-0;\n  }\n  \n  .mobile-full {\n    @apply w-full;\n  }\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n  \n  .print-break {\n    page-break-before: always;\n  }\n}\n\n/* Accessibility improvements */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n/* Focus states */\n.focus-visible:focus {\n  @apply outline-2 outline-offset-2 outline-santander-red;\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  .bg-santander-red {\n    background-color: #B91C1C;\n  }\n  \n  .text-santander-red {\n    color: #B91C1C;\n  }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n","size_bytes":6558},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<User | null>({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000, // 10 minutes\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":568},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Navbar from \"@/components/ui/navbar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport AccountManagement from \"@/components/admin/account-management\";\nimport TransferApproval from \"@/components/admin/transfer-approval\";\nimport AuditLog from \"@/components/admin/audit-log\";\nimport UserManagement from \"@/pages/user-management\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function AdminDashboard() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n      return;\n    }\n    \n    if (!isLoading && user && user.role !== 'admin') {\n      toast({\n        title: \"Access Denied\",\n        description: \"You don't have admin privileges.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/dashboard\";\n      }, 2000);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-santander-red mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user || user.role !== 'admin') {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar showLogin={false} />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-admin-title\">Admin Dashboard</h1>\n          <p className=\"text-gray-600\">\n            Welcome back, {user.firstName} {user.lastName}\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Total Users</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-total-users\">\n                Loading...\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Active Accounts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-active-accounts\">\n                Loading...\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Pending Transfers</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-santander-red\" data-testid=\"text-pending-transfers\">\n                Loading...\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Today's Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-todays-actions\">\n                Loading...\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"accounts\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"accounts\" data-testid=\"tab-accounts\">Account Management</TabsTrigger>\n            <TabsTrigger value=\"transfers\" data-testid=\"tab-transfers\">Transfer Approval</TabsTrigger>\n            <TabsTrigger value=\"users\" data-testid=\"tab-users\">User Management</TabsTrigger>\n            <TabsTrigger value=\"audit\" data-testid=\"tab-audit\">Audit Log</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"accounts\">\n            <AccountManagement />\n          </TabsContent>\n          \n          <TabsContent value=\"transfers\">\n            <TransferApproval />\n          </TabsContent>\n          \n          <TabsContent value=\"users\">\n            <UserManagement />\n          </TabsContent>\n          \n          <TabsContent value=\"audit\">\n            <AuditLog />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5032},"client/src/pages/customer-dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Navbar from \"@/components/ui/navbar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport AccountOverview from \"@/components/customer/account-overview\";\nimport TransactionHistory from \"@/components/customer/transaction-history\";\nimport TransferForm from \"@/components/customer/transfer-form\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function CustomerDashboard() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n    \n    if (!isLoading && user && user.role === 'admin') {\n      window.location.href = \"/admin\";\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-santander-red mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar showLogin={false} />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-customer-title\">Welcome to Santander Bank</h1>\n          <p className=\"text-gray-600\">\n            Hello, {user.firstName} {user.lastName}\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Account Overview</TabsTrigger>\n            <TabsTrigger value=\"transactions\" data-testid=\"tab-transactions\">Transaction History</TabsTrigger>\n            <TabsTrigger value=\"transfer\" data-testid=\"tab-transfer\">Transfer Money</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"overview\">\n            <AccountOverview />\n          </TabsContent>\n          \n          <TabsContent value=\"transactions\">\n            <TransactionHistory />\n          </TabsContent>\n          \n          <TabsContent value=\"transfer\">\n            <TransferForm />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2809},"client/src/pages/home.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Navbar from \"@/components/ui/navbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Home() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && user) {\n      // Redirect based on user role\n      if (user.role === 'admin') {\n        setLocation('/admin');\n      } else {\n        setLocation('/dashboard');\n      }\n    }\n  }, [user, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-santander-red mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar showLogin={false} />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            Welcome to Santander Bank\n          </h1>\n          <p className=\"text-lg text-gray-600 mb-8\">\n            Redirecting you to your dashboard...\n          </p>\n          \n          <Card className=\"max-w-md mx-auto\">\n            <CardHeader>\n              <CardTitle>Getting Started</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {user?.role === 'admin' ? (\n                <>\n                  <p className=\"text-gray-600\">You have admin access.</p>\n                  <Button \n                    onClick={() => setLocation('/admin')}\n                    className=\"w-full bg-santander-red hover:bg-santander-dark\"\n                    data-testid=\"button-admin-dashboard\"\n                  >\n                    Go to Admin Dashboard\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <p className=\"text-gray-600\">Welcome to your banking portal.</p>\n                  <Button \n                    onClick={() => setLocation('/dashboard')}\n                    className=\"w-full bg-santander-red hover:bg-santander-dark\"\n                    data-testid=\"button-customer-dashboard\"\n                  >\n                    Go to Dashboard\n                  </Button>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2704},"client/src/pages/landing.tsx":{"content":"import Navbar from \"@/components/ui/navbar\";\nimport HeroSection from \"@/components/ui/hero-section\";\nimport ServicesSection from \"@/components/ui/services-section\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Navbar showLogin={true} />\n      <HeroSection />\n      <ServicesSection />\n      \n      {/* Investment Section */}\n      <section className=\"bg-gray-50 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div>\n              <img \n                src=\"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Business professionals in investment meeting\" \n                className=\"rounded-lg shadow-lg w-full h-auto\" \n              />\n            </div>\n            <div>\n              <h2 className=\"text-3xl font-bold text-gray-900 mb-6\">Invest with confidence</h2>\n              <p className=\"text-lg text-gray-600 mb-8\">\n                Santander Investment Services* offers a wide range of solutions that provide the guidance you need to set investment goals and the tools you need to achieve them. Start working with a Financial Advisor today.\n              </p>\n              <button className=\"bg-santander-red text-white px-8 py-3 rounded-md text-lg font-semibold hover:bg-santander-dark transition-colors duration-200\">\n                Start investing →\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Appointment Section */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"bg-white rounded-lg shadow-lg p-8 md:p-12\">\n            <div className=\"grid md:grid-cols-2 gap-8 items-center\">\n              <div>\n                <h2 className=\"text-3xl font-bold text-gray-900 mb-6\">Let's meet <strong>in person</strong></h2>\n                <div className=\"flex items-center mb-6\">\n                  <i className=\"fas fa-calendar-alt text-santander-red text-2xl mr-4\"></i>\n                  <p className=\"text-lg text-gray-600\">Schedule one-on-one time with a banker.</p>\n                </div>\n                <button className=\"bg-santander-red text-white px-8 py-3 rounded-md text-lg font-semibold hover:bg-santander-dark transition-colors duration-200\">\n                  Book now\n                </button>\n              </div>\n              <div>\n                <img \n                  src=\"https://images.unsplash.com/photo-1664575602554-2087b04935a5?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                  alt=\"Customer meeting with bank advisor\" \n                  className=\"rounded-lg shadow-lg w-full h-auto\" \n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Mobile Banking Section */}\n      <section className=\"bg-gray-50 py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Santander mobile banking for anywhere convenience</h2>\n            <p className=\"text-lg text-gray-600\">\n              Make Mobile Check Deposits, set up Alerts, manage cards, and more, all from the Santander Mobile Banking App. It's the simplest, most secure way to manage your money on the go.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-6\">Download our highly-rated app</h3>\n              <p className=\"text-gray-600 mb-6\">4.7 out of 5 Rating. Based on 379k ratings on the App Store as of 3/26/2025</p>\n              \n              <div className=\"flex space-x-4 mb-8\">\n                <img src=\"https://www.santanderbank.com/documents/330001/14323886/27601_apple_btn+%281%29.jpg/bf7ba4f1-97b8-1d4e-28bc-ae5aa6ecbcb8\" alt=\"Download on App Store\" className=\"h-12\" />\n                <img src=\"https://www.santanderbank.com/documents/330001/14323886/27601_google_btn+%281%29.jpg/dd96fe00-ed38-b079-1e46-319aa5d3776c\" alt=\"Get it on Google Play\" className=\"h-12\" />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <p className=\"font-semibold text-gray-900\">Get started with one of our mobile app tutorials:</p>\n                <a href=\"#\" className=\"block text-santander-red hover:underline\">Mobile Check Deposit</a>\n                <a href=\"#\" className=\"block text-santander-red hover:underline\">Set up Alerts</a>\n                <a href=\"#\" className=\"block text-santander-red hover:underline\">Manage cards</a>\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <img \n                src=\"https://images.unsplash.com/photo-1563013544-824ae1b704d3?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=600\" \n                alt=\"Person using mobile banking app\" \n                className=\"rounded-lg shadow-lg mx-auto\" \n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div>\n              <h3 className=\"font-semibold text-lg mb-4\">Santander Bank</h3>\n              <ul className=\"space-y-2 text-gray-300\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Personal Banking</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Investing</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Small Business</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Commercial</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Private Client</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-lg mb-4\">About</h3>\n              <ul className=\"space-y-2 text-gray-300\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Careers</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Our Commitment</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Leadership</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Media Center</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Shareholder Relations</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-lg mb-4\">Support Services</h3>\n              <ul className=\"space-y-2 text-gray-300\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">SCRA Benefits</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Homeowner Assistance</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-lg mb-4\">Resources & Help</h3>\n              <ul className=\"space-y-2 text-gray-300\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Find a Branch/ATM</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Personal Banking Resources</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Security Center</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Site Map</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-700 mt-8 pt-8\">\n            <div className=\"flex flex-col md:flex-row justify-between items-center\">\n              <div className=\"text-sm text-gray-400 mb-4 md:mb-0\">\n                <a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Privacy Policy</a> |{\" \"}\n                <a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Terms of Use</a> |{\" \"}\n                <a href=\"#\" className=\"hover:text-white transition-colors duration-200\">Accessibility</a>\n              </div>\n              <div className=\"flex space-x-4\">\n                <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors duration-200\">\n                  <i className=\"fab fa-twitter\"></i>\n                </a>\n                <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors duration-200\">\n                  <i className=\"fab fa-instagram\"></i>\n                </a>\n                <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors duration-200\">\n                  <i className=\"fab fa-facebook\"></i>\n                </a>\n                <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors duration-200\">\n                  <i className=\"fab fa-linkedin\"></i>\n                </a>\n                <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors duration-200\">\n                  <i className=\"fab fa-youtube\"></i>\n                </a>\n              </div>\n            </div>\n            <div className=\"text-xs text-gray-400 mt-4 text-center md:text-left\">\n              © 2025 Santander Bank, N.A. Equal Housing Lender - Member FDIC\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":9882},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { loginSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, EyeOff } from \"lucide-react\";\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const response = await fetch(\"/api/login\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Login failed\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome back!\",\n      });\n      \n      // Redirect based on user role\n      if (data.user?.role === 'admin') {\n        setLocation(\"/admin\");\n      } else {\n        setLocation(\"/dashboard\");\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Login failed\",\n        description: error.message || \"Invalid email or password\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-santander-red to-santander-dark flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\" data-testid=\"card-login\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold text-center\" data-testid=\"text-login-title\">\n            Sign in to Santander\n          </CardTitle>\n          <CardDescription className=\"text-center\" data-testid=\"text-login-description\">\n            Enter your credentials to access your account\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"your.email@example.com\"\n                        type=\"email\"\n                        data-testid=\"input-email\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          placeholder=\"Enter your password\"\n                          type={showPassword ? \"text\" : \"password\"}\n                          data-testid=\"input-password\"\n                          {...field}\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          data-testid=\"button-toggle-password\"\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4 text-gray-500\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4 text-gray-500\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-santander-red hover:bg-santander-dark\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? \"Signing in...\" : \"Sign in\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Admin credentials: admin@admin.com / admin123\n            </p>\n          </div>\n\n          <div className=\"mt-4 text-center\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation(\"/\")}\n              data-testid=\"button-back-home\"\n            >\n              ← Back to home\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5929},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/transfer.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Navbar from \"@/components/ui/navbar\";\nimport TransferForm from \"@/components/customer/transfer-form\";\n\nexport default function Transfer() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-santander-red mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar showLogin={false} />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-transfer-title\">Transfer Money</h1>\n          <p className=\"text-gray-600\">\n            Send money securely to any account\n          </p>\n        </div>\n\n        <TransferForm />\n      </div>\n    </div>\n  );\n}\n","size_bytes":1606},"client/src/pages/user-management.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, EyeOff, Plus, Users } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\nconst createUserSchema = z.object({\n  email: z.string().email(\"Valid email required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().min(1, \"First name required\"),\n  lastName: z.string().min(1, \"Last name required\"),\n  role: z.enum([\"admin\", \"customer\"], { required_error: \"Role is required\" }),\n});\n\ntype CreateUserForm = z.infer<typeof createUserSchema>;\n\nexport default function UserManagement() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CreateUserForm>({\n    resolver: zodResolver(createUserSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"customer\",\n    },\n  });\n\n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: CreateUserForm) => {\n      const response = await fetch(\"/api/admin/users\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to create user\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User created successfully\",\n        description: \"The new user account has been created.\",\n      });\n      form.reset();\n      setIsDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to create user\",\n        description: error.message || \"An error occurred while creating the user.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateUserForm) => {\n    createUserMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Users className=\"h-6 w-6 text-santander-red\" />\n          <h1 className=\"text-2xl font-bold\" data-testid=\"text-user-management-title\">User Management</h1>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-santander-red hover:bg-santander-dark\" data-testid=\"button-add-user\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add User\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Create New User</DialogTitle>\n              <DialogDescription>\n                Add a new customer or admin user to the system.\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"John\" data-testid=\"input-first-name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Doe\" data-testid=\"input-last-name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"john.doe@example.com\" \n                          type=\"email\"\n                          data-testid=\"input-user-email\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            placeholder=\"Enter password\"\n                            type={showPassword ? \"text\" : \"password\"}\n                            data-testid=\"input-user-password\"\n                            {...field}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"button-toggle-user-password\"\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-gray-500\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-gray-500\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Role</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-user-role\">\n                            <SelectValue placeholder=\"Select a role\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"customer\">Customer</SelectItem>\n                          <SelectItem value=\"admin\">Admin</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsDialogOpen(false)}\n                    className=\"flex-1\"\n                    data-testid=\"button-cancel-user\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1 bg-santander-red hover:bg-santander-dark\"\n                    disabled={createUserMutation.isPending}\n                    data-testid=\"button-create-user\"\n                  >\n                    {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>System Users</CardTitle>\n          <CardDescription>\n            Manage all user accounts in the system\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">Loading users...</div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Role</TableHead>\n                  <TableHead>Created</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {users?.map((user) => (\n                  <TableRow key={user.id} data-testid={`row-user-${user.id}`}>\n                    <TableCell data-testid={`text-user-name-${user.id}`}>\n                      {user.firstName} {user.lastName}\n                    </TableCell>\n                    <TableCell data-testid={`text-user-email-${user.id}`}>\n                      {user.email}\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant={user.role === 'admin' ? 'destructive' : 'default'}\n                        data-testid={`badge-user-role-${user.id}`}\n                      >\n                        {user.role}\n                      </Badge>\n                    </TableCell>\n                    <TableCell data-testid={`text-user-created-${user.id}`}>\n                      {user.createdAt ? new Date(user.createdAt).toLocaleDateString() : \"N/A\"}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11184},"client/src/components/admin/account-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { User, Account } from \"@shared/schema\";\n\nexport default function AccountManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedAccount, setSelectedAccount] = useState<Account | null>(null);\n  const [amount, setAmount] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [newStatus, setNewStatus] = useState(\"\");\n  const [statusReason, setStatusReason] = useState(\"\");\n  const [emailSubject, setEmailSubject] = useState(\"\");\n  const [emailMessage, setEmailMessage] = useState(\"\");\n  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n    retry: false,\n  });\n\n  const { data: accounts = [], isLoading: accountsLoading } = useQuery<Account[]>({\n    queryKey: [\"/api/admin/accounts\"],\n    retry: false,\n  });\n\n  const creditMutation = useMutation({\n    mutationFn: async ({ accountId, amount, description }: { accountId: string; amount: string; description: string }) => {\n      await apiRequest(\"POST\", `/api/admin/accounts/${accountId}/credit`, { amount, description });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Account credited successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/accounts\"] });\n      setAmount(\"\");\n      setDescription(\"\");\n      setSelectedAccount(null);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const debitMutation = useMutation({\n    mutationFn: async ({ accountId, amount, description }: { accountId: string; amount: string; description: string }) => {\n      await apiRequest(\"POST\", `/api/admin/accounts/${accountId}/debit`, { amount, description });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Account debited successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/accounts\"] });\n      setAmount(\"\");\n      setDescription(\"\");\n      setSelectedAccount(null);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const statusMutation = useMutation({\n    mutationFn: async ({ accountId, status, reason }: { accountId: string; status: string; reason: string }) => {\n      await apiRequest(\"POST\", `/api/admin/accounts/${accountId}/status`, { status, reason });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Account status updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/accounts\"] });\n      setNewStatus(\"\");\n      setStatusReason(\"\");\n      setSelectedAccount(null);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const emailMutation = useMutation({\n    mutationFn: async ({ userIds, subject, message }: { userIds: string[]; subject: string; message: string }) => {\n      await apiRequest(\"POST\", \"/api/admin/email\", { userIds, subject, message });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Email sent successfully\",\n      });\n      setEmailSubject(\"\");\n      setEmailMessage(\"\");\n      setSelectedUsers([]);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCredit = () => {\n    if (!selectedAccount || !amount || !description) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    creditMutation.mutate({ accountId: selectedAccount.id, amount, description });\n  };\n\n  const handleDebit = () => {\n    if (!selectedAccount || !amount || !description) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    debitMutation.mutate({ accountId: selectedAccount.id, amount, description });\n  };\n\n  const handleStatusUpdate = () => {\n    if (!selectedAccount || !newStatus) {\n      toast({\n        title: \"Error\",\n        description: \"Please select an account and status\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    statusMutation.mutate({ accountId: selectedAccount.id, status: newStatus, reason: statusReason });\n  };\n\n  const handleSendEmail = () => {\n    if (!emailSubject || !emailMessage || selectedUsers.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields and select at least one user\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    emailMutation.mutate({ userIds: selectedUsers, subject: emailSubject, message: emailMessage });\n  };\n\n  const toggleUserSelection = (userId: string) => {\n    setSelectedUsers(prev => \n      prev.includes(userId) \n        ? prev.filter(id => id !== userId)\n        : [...prev, userId]\n    );\n  };\n\n  if (usersLoading || accountsLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-santander-red mx-auto\"></div>\n        <p className=\"mt-2 text-gray-600\">Loading accounts...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Account Operations */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Account Operations</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"account-select\">Select Account</Label>\n              <Select \n                onValueChange={(value) => {\n                  const account = accounts.find((acc: Account) => acc.id === value);\n                  setSelectedAccount(account || null);\n                }}\n              >\n                <SelectTrigger data-testid=\"select-account\">\n                  <SelectValue placeholder=\"Choose an account\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {accounts.map((account: Account) => (\n                    <SelectItem key={account.id} value={account.id}>\n                      {account.accountNumber} - ${account.balance}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {selectedAccount && (\n              <>\n                <div>\n                  <Label htmlFor=\"amount\">Amount</Label>\n                  <Input\n                    id=\"amount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={amount}\n                    onChange={(e) => setAmount(e.target.value)}\n                    placeholder=\"0.00\"\n                    data-testid=\"input-amount\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Input\n                    id=\"description\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    placeholder=\"Transaction description\"\n                    data-testid=\"input-description\"\n                  />\n                </div>\n\n                <div className=\"flex space-x-2\">\n                  <Button\n                    onClick={handleCredit}\n                    disabled={creditMutation.isPending}\n                    className=\"bg-green-600 hover:bg-green-700\"\n                    data-testid=\"button-credit\"\n                  >\n                    {creditMutation.isPending ? \"Processing...\" : \"Credit Account\"}\n                  </Button>\n                  <Button\n                    onClick={handleDebit}\n                    disabled={debitMutation.isPending}\n                    variant=\"destructive\"\n                    data-testid=\"button-debit\"\n                  >\n                    {debitMutation.isPending ? \"Processing...\" : \"Debit Account\"}\n                  </Button>\n                </div>\n              </>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Account Status Management */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Account Status</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {selectedAccount && (\n              <>\n                <div>\n                  <Label>Current Status</Label>\n                  <div className=\"mt-1\">\n                    <Badge variant={selectedAccount.status === 'active' ? 'default' : 'destructive'}>\n                      {selectedAccount.status}\n                    </Badge>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"new-status\">New Status</Label>\n                  <Select onValueChange={setNewStatus}>\n                    <SelectTrigger data-testid=\"select-status\">\n                      <SelectValue placeholder=\"Select new status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"frozen\">Frozen</SelectItem>\n                      <SelectItem value=\"closed\">Closed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"status-reason\">Reason (Optional)</Label>\n                  <Textarea\n                    id=\"status-reason\"\n                    value={statusReason}\n                    onChange={(e) => setStatusReason(e.target.value)}\n                    placeholder=\"Reason for status change\"\n                    data-testid=\"textarea-status-reason\"\n                  />\n                </div>\n\n                <Button\n                  onClick={handleStatusUpdate}\n                  disabled={statusMutation.isPending}\n                  className=\"w-full bg-santander-red hover:bg-santander-dark\"\n                  data-testid=\"button-update-status\"\n                >\n                  {statusMutation.isPending ? \"Updating...\" : \"Update Status\"}\n                </Button>\n              </>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Email Management */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Send Email to Customers</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"email-subject\">Subject</Label>\n            <Input\n              id=\"email-subject\"\n              value={emailSubject}\n              onChange={(e) => setEmailSubject(e.target.value)}\n              placeholder=\"Email subject\"\n              data-testid=\"input-email-subject\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"email-message\">Message</Label>\n            <Textarea\n              id=\"email-message\"\n              value={emailMessage}\n              onChange={(e) => setEmailMessage(e.target.value)}\n              placeholder=\"Email message\"\n              rows={4}\n              data-testid=\"textarea-email-message\"\n            />\n          </div>\n\n          <div>\n            <Label>Select Recipients</Label>\n            <div className=\"mt-2 space-y-2 max-h-48 overflow-y-auto border rounded-md p-2\">\n              {users.map((user: User) => (\n                <label key={user.id} className=\"flex items-center space-x-2 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedUsers.includes(user.id)}\n                    onChange={() => toggleUserSelection(user.id)}\n                    className=\"rounded border-gray-300\"\n                    data-testid={`checkbox-user-${user.id}`}\n                  />\n                  <span className=\"text-sm\">\n                    {user.firstName} {user.lastName} ({user.email})\n                  </span>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          <Button\n            onClick={handleSendEmail}\n            disabled={emailMutation.isPending}\n            className=\"w-full bg-santander-red hover:bg-santander-dark\"\n            data-testid=\"button-send-email\"\n          >\n            {emailMutation.isPending ? \"Sending...\" : `Send Email to ${selectedUsers.length} users`}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Accounts List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>All Accounts</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full border-collapse border border-gray-200\">\n              <thead>\n                <tr className=\"bg-gray-50\">\n                  <th className=\"border border-gray-200 px-4 py-2 text-left\">Account Number</th>\n                  <th className=\"border border-gray-200 px-4 py-2 text-left\">Owner</th>\n                  <th className=\"border border-gray-200 px-4 py-2 text-left\">Balance</th>\n                  <th className=\"border border-gray-200 px-4 py-2 text-left\">Status</th>\n                  <th className=\"border border-gray-200 px-4 py-2 text-left\">Created</th>\n                </tr>\n              </thead>\n              <tbody>\n                {accounts.map((account: Account) => {\n                  const owner = users.find((user: User) => user.id === account.userId);\n                  return (\n                    <tr key={account.id} className=\"hover:bg-gray-50\">\n                      <td className=\"border border-gray-200 px-4 py-2\" data-testid={`text-account-number-${account.id}`}>\n                        {account.accountNumber}\n                      </td>\n                      <td className=\"border border-gray-200 px-4 py-2\">\n                        {owner ? `${owner.firstName} ${owner.lastName}` : 'Unknown'}\n                      </td>\n                      <td className=\"border border-gray-200 px-4 py-2 font-mono\">\n                        ${account.balance}\n                      </td>\n                      <td className=\"border border-gray-200 px-4 py-2\">\n                        <Badge variant={account.status === 'active' ? 'default' : 'destructive'}>\n                          {account.status}\n                        </Badge>\n                      </td>\n                      <td className=\"border border-gray-200 px-4 py-2\">\n                        {account.createdAt ? new Date(account.createdAt).toLocaleDateString() : 'N/A'}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":17084},"client/src/components/admin/audit-log.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { AuditLog } from \"@shared/schema\";\n\nexport default function AuditLog() {\n  const { toast } = useToast();\n\n  const { data: auditLogs, isLoading } = useQuery({\n    queryKey: [\"/api/admin/audit-logs\"],\n    retry: false,\n    refetchInterval: 10000, // Refresh every 10 seconds\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    },\n  });\n\n  const getActionColor = (action: string) => {\n    switch (action) {\n      case 'account_created':\n        return 'bg-green-100 text-green-800';\n      case 'account_frozen':\n      case 'account_closed':\n        return 'bg-red-100 text-red-800';\n      case 'account_unfrozen':\n        return 'bg-blue-100 text-blue-800';\n      case 'balance_credited':\n        return 'bg-green-100 text-green-800';\n      case 'balance_debited':\n        return 'bg-orange-100 text-orange-800';\n      case 'transfer_approved':\n        return 'bg-green-100 text-green-800';\n      case 'transfer_rejected':\n        return 'bg-red-100 text-red-800';\n      case 'email_sent':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatActionText = (action: string) => {\n    return action.split('_').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-santander-red mx-auto\"></div>\n        <p className=\"mt-2 text-gray-600\">Loading audit logs...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Audit Log</span>\n            <Badge variant=\"outline\">{auditLogs?.length || 0} entries</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {!auditLogs || auditLogs.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              No audit log entries found\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {auditLogs.map((log: AuditLog) => (\n                <Card key={log.id} className=\"border-l-4 border-l-santander-red\">\n                  <CardContent className=\"pt-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <Badge className={getActionColor(log.action)}>\n                            {formatActionText(log.action)}\n                          </Badge>\n                          <span className=\"text-sm text-gray-500\">\n                            {new Date(log.createdAt).toLocaleString()}\n                          </span>\n                        </div>\n                        \n                        <div className=\"space-y-1 text-sm\">\n                          <p data-testid={`text-admin-${log.id}`}>\n                            <span className=\"font-medium\">Admin:</span> {log.adminId}\n                          </p>\n                          {log.targetUserId && (\n                            <p data-testid={`text-target-${log.id}`}>\n                              <span className=\"font-medium\">Target User:</span> {log.targetUserId}\n                            </p>\n                          )}\n                          {log.ipAddress && (\n                            <p>\n                              <span className=\"font-medium\">IP Address:</span> {log.ipAddress}\n                            </p>\n                          )}\n                        </div>\n\n                        {log.details && (\n                          <div className=\"mt-3 p-3 bg-gray-50 rounded-md\">\n                            <p className=\"text-xs font-medium text-gray-700 mb-1\">Details:</p>\n                            <pre className=\"text-xs text-gray-600 whitespace-pre-wrap\">\n                              {JSON.stringify(log.details, null, 2)}\n                            </pre>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4925},"client/src/components/admin/transfer-approval.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Transfer } from \"@shared/schema\";\n\nexport default function TransferApproval() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedTransfer, setSelectedTransfer] = useState<Transfer | null>(null);\n  const [rejectionReason, setRejectionReason] = useState(\"\");\n\n  const { data: pendingTransfers = [], isLoading } = useQuery<Transfer[]>({\n    queryKey: [\"/api/admin/transfers/pending\"],\n    refetchInterval: 5000, // Refresh every 5 seconds\n    retry: false,\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (transferId: string) => {\n      await apiRequest(\"POST\", `/api/admin/transfers/${transferId}/approve`, {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Transfer approved successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/transfers/pending\"] });\n      setSelectedTransfer(null);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async ({ transferId, reason }: { transferId: string; reason: string }) => {\n      await apiRequest(\"POST\", `/api/admin/transfers/${transferId}/reject`, { reason });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Transfer rejected successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/transfers/pending\"] });\n      setSelectedTransfer(null);\n      setRejectionReason(\"\");\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApprove = (transfer: Transfer) => {\n    approveMutation.mutate(transfer.id);\n  };\n\n  const handleReject = () => {\n    if (!selectedTransfer || !rejectionReason.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide a rejection reason\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    rejectMutation.mutate({ transferId: selectedTransfer.id, reason: rejectionReason });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-santander-red mx-auto\"></div>\n        <p className=\"mt-2 text-gray-600\">Loading pending transfers...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Pending Transfer Approvals</span>\n            <Badge variant=\"destructive\">{pendingTransfers.length} pending</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {pendingTransfers.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              No pending transfers requiring approval\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {pendingTransfers.map((transfer: Transfer) => (\n                <Card key={transfer.id} className=\"border-l-4 border-l-orange-500\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <h4 className=\"font-semibold text-lg\" data-testid={`text-transfer-amount-${transfer.id}`}>\n                          ${transfer.amount}\n                        </h4>\n                        <p className=\"text-gray-600\">\n                          To: {transfer.toAccountHolderName}\n                        </p>\n                        {transfer.toAccountNumber && (\n                          <p className=\"text-gray-600\">\n                            Account: {transfer.toAccountNumber}\n                          </p>\n                        )}\n                        {transfer.toBankName && (\n                          <p className=\"text-gray-600\">\n                            Bank: {transfer.toBankName}\n                          </p>\n                        )}\n                        {transfer.description && (\n                          <p className=\"text-gray-600\">\n                            Description: {transfer.description}\n                          </p>\n                        )}\n                      </div>\n                      \n                      <div>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Transfer Amount:</span>\n                            <span>${transfer.amount}</span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Fee:</span>\n                            <span>${transfer.fee}</span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Tax:</span>\n                            <span>${transfer.tax}</span>\n                          </div>\n                          <div className=\"flex justify-between font-semibold border-t pt-2\">\n                            <span>Total:</span>\n                            <span>${(parseFloat(transfer.amount) + parseFloat(transfer.fee) + parseFloat(transfer.tax)).toFixed(2)}</span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"mt-4 space-y-2\">\n                          <p className=\"text-xs text-gray-500\">\n                            Submitted: {transfer.createdAt ? new Date(transfer.createdAt).toLocaleString() : 'N/A'}\n                          </p>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              onClick={() => handleApprove(transfer)}\n                              disabled={approveMutation.isPending}\n                              className=\"bg-green-600 hover:bg-green-700\"\n                              data-testid={`button-approve-${transfer.id}`}\n                            >\n                              {approveMutation.isPending ? \"Approving...\" : \"Approve\"}\n                            </Button>\n                            \n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button\n                                  onClick={() => setSelectedTransfer(transfer)}\n                                  variant=\"destructive\"\n                                  data-testid={`button-reject-${transfer.id}`}\n                                >\n                                  Reject\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent>\n                                <DialogHeader>\n                                  <DialogTitle>Reject Transfer</DialogTitle>\n                                </DialogHeader>\n                                <div className=\"space-y-4\">\n                                  <p>\n                                    Are you sure you want to reject this transfer of ${transfer.amount}?\n                                  </p>\n                                  <div>\n                                    <label htmlFor=\"rejection-reason\" className=\"block text-sm font-medium mb-2\">\n                                      Rejection Reason\n                                    </label>\n                                    <Textarea\n                                      id=\"rejection-reason\"\n                                      value={rejectionReason}\n                                      onChange={(e) => setRejectionReason(e.target.value)}\n                                      placeholder=\"Please provide a reason for rejection\"\n                                      rows={3}\n                                      data-testid=\"textarea-rejection-reason\"\n                                    />\n                                  </div>\n                                  <div className=\"flex space-x-2\">\n                                    <Button\n                                      onClick={handleReject}\n                                      disabled={rejectMutation.isPending}\n                                      variant=\"destructive\"\n                                      data-testid=\"button-confirm-reject\"\n                                    >\n                                      {rejectMutation.isPending ? \"Rejecting...\" : \"Confirm Rejection\"}\n                                    </Button>\n                                  </div>\n                                </div>\n                              </DialogContent>\n                            </Dialog>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10383},"client/src/components/customer/account-overview.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Account } from \"@shared/schema\";\nimport bankingCustomerService from \"@assets/generated_images/banking_customer_service_representative_75a1a79a.png\";\nimport mobileBankingApp from \"@assets/generated_images/mobile_banking_app_smartphone_aacbdc6b.png\";\n\nexport default function AccountOverview() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [newAccountType, setNewAccountType] = useState(\"\");\n\n  const { data: accounts = [], isLoading } = useQuery<Account[]>({\n    queryKey: [\"/api/accounts\"],\n    retry: false,\n  });\n\n  const createAccountMutation = useMutation({\n    mutationFn: async (accountType: string) => {\n      await apiRequest(\"POST\", \"/api/accounts\", { accountType });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Account created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/accounts\"] });\n      setNewAccountType(\"\");\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateAccount = () => {\n    if (!newAccountType) {\n      toast({\n        title: \"Error\",\n        description: \"Please select an account type\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createAccountMutation.mutate(newAccountType);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-100 text-green-800';\n      case 'frozen':\n        return 'bg-orange-100 text-orange-800';\n      case 'closed':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const calculateTotalBalance = () => {\n    return accounts\n      .filter((account: Account) => account.status === 'active')\n      .reduce((total: number, account: Account) => total + parseFloat(account.balance), 0)\n      .toFixed(2);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-santander-red mx-auto\"></div>\n        <p className=\"mt-2 text-gray-600\">Loading your accounts...</p>\n      </div>\n    );\n  }\n\n  // Check for account status warnings\n  const frozenAccounts = accounts.filter((account: Account) => account.status === 'frozen');\n  const closedAccounts = accounts.filter((account: Account) => account.status === 'closed');\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Account Status Warnings */}\n      {frozenAccounts.length > 0 && (\n        <Alert variant=\"destructive\">\n          <AlertDescription>\n            <strong>Account Alert:</strong> You have {frozenAccounts.length} frozen account(s). \n            Please contact customer service to resolve any issues.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {closedAccounts.length > 0 && (\n        <Alert variant=\"destructive\">\n          <AlertDescription>\n            <strong>Account Notice:</strong> You have {closedAccounts.length} closed account(s). \n            These accounts are no longer active and cannot be used for transactions.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Total Balance Summary */}\n      <Card className=\"border-l-4 border-l-santander-red\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Balance</p>\n              <p className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-total-balance\">\n                ${calculateTotalBalance()}\n              </p>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm text-gray-600\">Active Accounts</p>\n              <p className=\"text-xl font-semibold text-santander-red\">\n                {accounts.filter((account: Account) => account.status === 'active').length}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Create New Account */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Open New Account</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Select onValueChange={setNewAccountType}>\n              <SelectTrigger data-testid=\"select-account-type\">\n                <SelectValue placeholder=\"Select account type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"checking\">Checking Account</SelectItem>\n                <SelectItem value=\"savings\">Savings Account</SelectItem>\n                <SelectItem value=\"money_market\">Money Market Account</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <Button\n            onClick={handleCreateAccount}\n            disabled={createAccountMutation.isPending}\n            className=\"w-full bg-santander-red hover:bg-santander-dark\"\n            data-testid=\"button-create-account\"\n          >\n            {createAccountMutation.isPending ? \"Creating...\" : \"Open Account\"}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Accounts List */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Your Accounts</h3>\n          <Badge variant=\"outline\">{accounts.length} accounts</Badge>\n        </div>\n        \n        {accounts.length === 0 ? (\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center py-8 text-gray-500\">\n                <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-university text-gray-400 text-2xl\"></i>\n                </div>\n                <p className=\"font-medium\">No accounts found</p>\n                <p className=\"text-sm\">Open your first account to get started</p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid gap-4\">\n            {accounts.map((account: Account) => (\n              <Card key={account.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <h4 className=\"font-semibold text-lg capitalize\">\n                          {account.accountType.replace('_', ' ')} Account\n                        </h4>\n                        <Badge className={getStatusColor(account.status)}>\n                          {account.status}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"space-y-1 text-sm text-gray-600\">\n                        <p data-testid={`text-account-number-${account.id}`}>\n                          <span className=\"font-medium\">Account Number:</span> ****{account.accountNumber.slice(-4)}\n                        </p>\n                        <p>\n                          <span className=\"font-medium\">Routing Number:</span> {account.routingNumber}\n                        </p>\n                        <p>\n                          <span className=\"font-medium\">Opened:</span> {new Date(account.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <p className=\"text-sm font-medium text-gray-600\">Available Balance</p>\n                      <p className=\"text-2xl font-bold text-gray-900\" data-testid={`text-balance-${account.id}`}>\n                        ${account.balance}\n                      </p>\n                      \n                      {account.status === 'frozen' && (\n                        <div className=\"mt-2 p-2 bg-orange-50 rounded-md\">\n                          <p className=\"text-xs text-orange-800\">\n                            Account is frozen. Contact customer service for assistance.\n                          </p>\n                        </div>\n                      )}\n                      \n                      {account.status === 'closed' && (\n                        <div className=\"mt-2 p-2 bg-red-50 rounded-md\">\n                          <p className=\"text-xs text-red-800\">\n                            Account is closed and no longer active.\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Customer Service & Mobile Banking Section */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-headset text-santander-red\"></i>\n              <span>Customer Service</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center space-x-4\">\n              <img \n                src={bankingCustomerService} \n                alt=\"Customer Service Representative\" \n                className=\"w-20 h-20 rounded-lg object-cover\"\n              />\n              <div>\n                <p className=\"text-sm text-gray-600 mb-2\">\n                  Need help with your account? Our customer service team is here to assist you.\n                </p>\n                <Button variant=\"outline\" className=\"text-santander-red border-santander-red hover:bg-santander-red hover:text-white\">\n                  Contact Support\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-mobile-alt text-santander-red\"></i>\n              <span>Mobile Banking</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center space-x-4\">\n              <img \n                src={mobileBankingApp} \n                alt=\"Mobile Banking App\" \n                className=\"w-20 h-20 rounded-lg object-cover\"\n              />\n              <div>\n                <p className=\"text-sm text-gray-600 mb-2\">\n                  Bank on the go with our secure mobile app. Available 24/7 for your convenience.\n                </p>\n                <Button variant=\"outline\" className=\"text-santander-red border-santander-red hover:bg-santander-red hover:text-white\">\n                  Download App\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12041},"client/src/components/customer/transaction-history.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Transaction } from \"@shared/schema\";\n\nexport default function TransactionHistory() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState(\"all\");\n\n  const { data: transactions, isLoading } = useQuery({\n    queryKey: [\"/api/transactions\"],\n    retry: false,\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    },\n  });\n\n  const getTransactionColor = (type: string) => {\n    switch (type) {\n      case 'credit':\n        return 'bg-green-100 text-green-800';\n      case 'debit':\n        return 'bg-red-100 text-red-800';\n      case 'fee':\n        return 'bg-orange-100 text-orange-800';\n      case 'tax':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTransactionIcon = (type: string) => {\n    switch (type) {\n      case 'credit':\n        return 'fas fa-arrow-down text-green-600';\n      case 'debit':\n        return 'fas fa-arrow-up text-red-600';\n      case 'fee':\n        return 'fas fa-receipt text-orange-600';\n      case 'tax':\n        return 'fas fa-calculator text-yellow-600';\n      default:\n        return 'fas fa-exchange-alt text-gray-600';\n    }\n  };\n\n  const formatTransactionType = (type: string) => {\n    return type.charAt(0).toUpperCase() + type.slice(1);\n  };\n\n  // Filter transactions based on search term and type\n  const filteredTransactions = transactions?.filter((transaction: Transaction & { accountNumber: string }) => {\n    const matchesSearch = searchTerm === \"\" || \n      transaction.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      transaction.accountNumber.includes(searchTerm);\n    \n    const matchesType = filterType === \"all\" || transaction.type === filterType;\n    \n    return matchesSearch && matchesType;\n  }) || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-santander-red mx-auto\"></div>\n        <p className=\"mt-2 text-gray-600\">Loading transaction history...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Transaction History</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Input\n                placeholder=\"Search transactions...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full\"\n                data-testid=\"input-search-transactions\"\n              />\n            </div>\n            <div>\n              <Select onValueChange={setFilterType}>\n                <SelectTrigger data-testid=\"select-transaction-type\">\n                  <SelectValue placeholder=\"Filter by type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Transactions</SelectItem>\n                  <SelectItem value=\"credit\">Credits</SelectItem>\n                  <SelectItem value=\"debit\">Debits</SelectItem>\n                  <SelectItem value=\"fee\">Fees</SelectItem>\n                  <SelectItem value=\"tax\">Taxes</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <p className=\"text-sm text-gray-600\">\n              Showing {filteredTransactions.length} of {transactions?.length || 0} transactions\n            </p>\n            <Badge variant=\"outline\">{transactions?.length || 0} total</Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Transaction List */}\n      <div className=\"space-y-4\">\n        {filteredTransactions.length === 0 ? (\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center py-8 text-gray-500\">\n                <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-receipt text-gray-400 text-2xl\"></i>\n                </div>\n                <p className=\"font-medium\">No transactions found</p>\n                <p className=\"text-sm\">\n                  {searchTerm || filterType !== \"all\" \n                    ? \"Try adjusting your search or filter criteria\"\n                    : \"Your transaction history will appear here\"}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredTransactions.map((transaction: Transaction & { accountNumber: string }) => (\n            <Card key={transaction.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"pt-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center\">\n                      <i className={getTransactionIcon(transaction.type)}></i>\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h4 className=\"font-medium text-gray-900\" data-testid={`text-description-${transaction.id}`}>\n                          {transaction.description}\n                        </h4>\n                        <Badge className={getTransactionColor(transaction.type)}>\n                          {formatTransactionType(transaction.type)}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"space-y-1 text-sm text-gray-600\">\n                        <p>\n                          <span className=\"font-medium\">Account:</span> ****{transaction.accountNumber.slice(-4)}\n                        </p>\n                        <p>\n                          <span className=\"font-medium\">Date:</span> {new Date(transaction.createdAt).toLocaleString()}\n                        </p>\n                        <p>\n                          <span className=\"font-medium\">Balance After:</span> ${transaction.balanceAfter}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className={`text-lg font-bold ${\n                      transaction.type === 'credit' ? 'text-green-600' : 'text-red-600'\n                    }`} data-testid={`text-amount-${transaction.id}`}>\n                      {transaction.type === 'credit' ? '+' : '-'}${transaction.amount}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7747},"client/src/components/customer/transfer-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Account, Transfer } from \"@shared/schema\";\n\ninterface TransferFormData {\n  fromAccountId: string;\n  toAccountNumber: string;\n  toRoutingNumber: string;\n  toBankName: string;\n  toAccountHolderName: string;\n  amount: string;\n  description: string;\n}\n\nexport default function TransferForm() {\n  const { toast } = useToast();\n  \n  const [formData, setFormData] = useState<TransferFormData>({\n    fromAccountId: \"\",\n    toAccountNumber: \"\",\n    toRoutingNumber: \"\",\n    toBankName: \"\",\n    toAccountHolderName: \"\",\n    amount: \"\",\n    description: \"\",\n  });\n  \n  const [currentTransfer, setCurrentTransfer] = useState<Transfer | null>(null);\n  const [transferProgress, setTransferProgress] = useState(0);\n  const [transferStep, setTransferStep] = useState<string>(\"\");\n\n  const { data: accounts = [], isLoading: accountsLoading } = useQuery<Account[]>({\n    queryKey: [\"/api/accounts\"],\n    retry: false,\n  });\n\n  const transferMutation = useMutation({\n    mutationFn: async (data: TransferFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/transfers\", data);\n      return response.json();\n    },\n    onSuccess: (transfer: Transfer) => {\n      toast({\n        title: \"Transfer Initiated\",\n        description: \"Your transfer has been submitted for verification\",\n      });\n      setCurrentTransfer(transfer);\n      startTransferProgress();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Transfer Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Poll transfer status\n  const { data: transferStatus } = useQuery<{status: string; rejectionReason?: string}>({\n    queryKey: [\"/api/transfers\", currentTransfer?.id, \"status\"],\n    enabled: !!currentTransfer,\n    refetchInterval: 2000,\n    retry: false,\n  });\n\n  const startTransferProgress = () => {\n    setTransferProgress(25);\n    setTransferStep(\"Transfer submitted\");\n    \n    setTimeout(() => {\n      setTransferProgress(50);\n      setTransferStep(\"Verifying account details\");\n    }, 1000);\n    \n    setTimeout(() => {\n      setTransferProgress(75);\n      setTransferStep(\"Pending admin verification\");\n    }, 2000);\n  };\n\n  useEffect(() => {\n    if (transferStatus?.status) {\n      switch (transferStatus.status) {\n        case 'approved':\n          setTransferProgress(90);\n          setTransferStep(\"Processing transfer\");\n          break;\n        case 'completed':\n          setTransferProgress(100);\n          setTransferStep(\"Transfer completed successfully\");\n          toast({\n            title: \"Transfer Completed\",\n            description: \"Your transfer has been processed successfully\",\n          });\n          break;\n        case 'rejected':\n          setTransferProgress(100);\n          setTransferStep(\"Transfer rejected\");\n          toast({\n            title: \"Transfer Rejected\",\n            description: transferStatus.rejectionReason || \"Your transfer was rejected\",\n            variant: \"destructive\",\n          });\n          break;\n      }\n    }\n  }, [transferStatus, toast]);\n\n  const calculateFeeAndTax = (amount: string) => {\n    const numAmount = parseFloat(amount);\n    if (isNaN(numAmount) || numAmount <= 0) return { fee: \"0.00\", tax: \"0.00\", total: \"0.00\" };\n    \n    const fee = numAmount > 1000 ? (numAmount * 0.001).toFixed(2) : \"0.00\";\n    const tax = (numAmount * 0.001).toFixed(2);\n    const total = (numAmount + parseFloat(fee) + parseFloat(tax)).toFixed(2);\n    \n    return { fee, tax, total };\n  };\n\n  const { fee, tax, total } = calculateFeeAndTax(formData.amount);\n\n  const handleInputChange = (field: keyof TransferFormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validation\n    if (!formData.fromAccountId || !formData.toAccountHolderName || !formData.amount) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (parseFloat(formData.amount) <= 0) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Transfer amount must be greater than $0\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const selectedAccount = accounts.find((acc: Account) => acc.id === formData.fromAccountId);\n    if (selectedAccount && parseFloat(selectedAccount.balance) < parseFloat(total)) {\n      toast({\n        title: \"Insufficient Funds\",\n        description: \"Your account balance is insufficient for this transfer\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    transferMutation.mutate(formData);\n  };\n\n  const resetForm = () => {\n    setFormData({\n      fromAccountId: \"\",\n      toAccountNumber: \"\",\n      toRoutingNumber: \"\",\n      toBankName: \"\",\n      toAccountHolderName: \"\",\n      amount: \"\",\n      description: \"\",\n    });\n    setCurrentTransfer(null);\n    setTransferProgress(0);\n    setTransferStep(\"\");\n  };\n\n  if (accountsLoading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-santander-red mx-auto\"></div>\n        <p className=\"mt-2 text-gray-600\">Loading your accounts...</p>\n      </div>\n    );\n  }\n\n  const activeAccounts = accounts.filter((account: Account) => account.status === 'active');\n\n  if (activeAccounts.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center py-8\">\n            <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-exclamation-triangle text-gray-400 text-2xl\"></i>\n            </div>\n            <h3 className=\"font-medium text-gray-900 mb-2\">No Active Accounts</h3>\n            <p className=\"text-gray-600\">You need an active account to make transfers.</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Transfer Progress */}\n      {currentTransfer && (\n        <Card className=\"border-l-4 border-l-santander-red\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Transfer Progress</span>\n              <Badge variant={transferStatus?.status === 'completed' ? 'default' : transferStatus?.status === 'rejected' ? 'destructive' : 'secondary'}>\n                {transferStatus?.status || 'processing'}\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <div className=\"flex justify-between text-sm mb-2\">\n                <span>{transferStep}</span>\n                <span>{transferProgress}%</span>\n              </div>\n              <Progress value={transferProgress} className=\"h-2\" />\n            </div>\n            \n            <div className=\"text-sm text-gray-600\">\n              <p><strong>Transfer ID:</strong> {currentTransfer.id}</p>\n              <p><strong>Amount:</strong> ${currentTransfer.amount}</p>\n              <p><strong>To:</strong> {currentTransfer.toAccountHolderName}</p>\n            </div>\n\n            {transferStatus?.status === 'verification_required' && (\n              <Alert>\n                <AlertDescription>\n                  Your transfer is pending admin verification. You will receive an email notification once it's processed.\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {transferStatus?.status === 'rejected' && transferStatus.rejectionReason && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>\n                  <strong>Rejection Reason:</strong> {transferStatus.rejectionReason}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {(transferStatus?.status === 'completed' || transferStatus?.status === 'rejected') && (\n              <Button onClick={resetForm} className=\"w-full bg-santander-red hover:bg-santander-dark\">\n                Make Another Transfer\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Transfer Form */}\n      {!currentTransfer && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Transfer Money</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* From Account */}\n              <div>\n                <Label htmlFor=\"from-account\">From Account *</Label>\n                <Select onValueChange={(value) => handleInputChange('fromAccountId', value)}>\n                  <SelectTrigger data-testid=\"select-from-account\">\n                    <SelectValue placeholder=\"Select source account\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {activeAccounts.map((account: Account) => (\n                      <SelectItem key={account.id} value={account.id}>\n                        {account.accountType.replace('_', ' ')} - ****{account.accountNumber.slice(-4)} (${account.balance})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Recipient Information */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"recipient-name\">Recipient Name *</Label>\n                  <Input\n                    id=\"recipient-name\"\n                    value={formData.toAccountHolderName}\n                    onChange={(e) => handleInputChange('toAccountHolderName', e.target.value)}\n                    placeholder=\"Full name of recipient\"\n                    data-testid=\"input-recipient-name\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"account-number\">Account Number</Label>\n                  <Input\n                    id=\"account-number\"\n                    value={formData.toAccountNumber}\n                    onChange={(e) => handleInputChange('toAccountNumber', e.target.value)}\n                    placeholder=\"Recipient's account number\"\n                    data-testid=\"input-account-number\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"routing-number\">Routing Number</Label>\n                  <Input\n                    id=\"routing-number\"\n                    value={formData.toRoutingNumber}\n                    onChange={(e) => handleInputChange('toRoutingNumber', e.target.value)}\n                    placeholder=\"9-digit routing number\"\n                    data-testid=\"input-routing-number\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"bank-name\">Bank Name</Label>\n                  <Input\n                    id=\"bank-name\"\n                    value={formData.toBankName}\n                    onChange={(e) => handleInputChange('toBankName', e.target.value)}\n                    placeholder=\"Recipient's bank name\"\n                    data-testid=\"input-bank-name\"\n                  />\n                </div>\n              </div>\n\n              {/* Transfer Details */}\n              <div>\n                <Label htmlFor=\"amount\">Transfer Amount *</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={formData.amount}\n                  onChange={(e) => handleInputChange('amount', e.target.value)}\n                  placeholder=\"0.00\"\n                  data-testid=\"input-transfer-amount\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Description (Optional)</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => handleInputChange('description', e.target.value)}\n                  placeholder=\"Purpose of transfer\"\n                  rows={3}\n                  data-testid=\"textarea-description\"\n                />\n              </div>\n\n              {/* Fee Breakdown */}\n              {formData.amount && parseFloat(formData.amount) > 0 && (\n                <Card className=\"bg-gray-50\">\n                  <CardContent className=\"pt-4\">\n                    <h4 className=\"font-medium mb-3\">Transfer Summary</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Transfer Amount:</span>\n                        <span>${formData.amount}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Transfer Fee:</span>\n                        <span>${fee}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Tax:</span>\n                        <span>${tax}</span>\n                      </div>\n                      <div className=\"flex justify-between font-semibold border-t pt-2\">\n                        <span>Total Amount:</span>\n                        <span data-testid=\"text-total-amount\">${total}</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              <Button\n                type=\"submit\"\n                disabled={transferMutation.isPending}\n                className=\"w-full bg-santander-red hover:bg-santander-dark\"\n                data-testid=\"button-submit-transfer\"\n              >\n                {transferMutation.isPending ? \"Processing...\" : \"Submit Transfer\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":15134},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hero-section.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\nexport default function HeroSection() {\n  return (\n    <section className=\"bg-gray-50 py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n          <div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n              The best financial tools and advice for every need.\n            </h1>\n            <p className=\"text-xl text-gray-600 mb-8\">\n              Simple and secure personal banking available in person, online, or on your device.\n            </p>\n            <Button \n              className=\"bg-santander-red text-white px-8 py-3 text-lg font-semibold hover:bg-santander-dark\"\n              data-testid=\"button-choose-checking\"\n            >\n              Choose your checking account\n            </Button>\n          </div>\n          <div>\n            <img \n              src=\"https://images.unsplash.com/photo-1551836022-deb4988cc6c0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n              alt=\"Woman using mobile banking services\" \n              className=\"rounded-lg shadow-lg w-full h-auto\" \n              data-testid=\"img-hero\"\n            />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1298},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navbar.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface NavbarProps {\n  showLogin: boolean;\n}\n\nexport default function Navbar({ showLogin }: NavbarProps) {\n  const { user, isAuthenticated } = useAuth();\n\n  const handleLogout = async () => {\n    try {\n      await fetch(\"/api/logout\", { method: \"POST\" });\n      window.location.href = \"/\";\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n      window.location.href = \"/\";\n    }\n  };\n\n  const handleLogin = () => {\n    window.location.href = \"/login\";\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center py-4\">\n          <div className=\"flex items-center\">\n            <Link href=\"/\">\n              <img \n                src=\"https://www.santanderbank.com/documents/330006/330008/logo+%281%29.png/ca903dab-71ae-9b33-0bab-05c7d754b18f?t=1600208431481&download=true\" \n                alt=\"Santander Bank Logo\" \n                className=\"h-8 cursor-pointer\" \n                data-testid=\"img-logo\"\n              />\n            </Link>\n          </div>\n          \n          <nav className=\"hidden md:flex space-x-8\">\n            <a href=\"#\" className=\"text-gray-700 hover:text-santander-red transition-colors duration-200\">Personal</a>\n            <a href=\"#\" className=\"text-gray-700 hover:text-santander-red transition-colors duration-200\">Business</a>\n            <a href=\"#\" className=\"text-gray-700 hover:text-santander-red transition-colors duration-200\">Commercial</a>\n            <a href=\"#\" className=\"text-gray-700 hover:text-santander-red transition-colors duration-200\">Private Client</a>\n            <a href=\"#\" className=\"text-gray-700 hover:text-santander-red transition-colors duration-200\">Investing</a>\n          </nav>\n          \n          <div className=\"flex items-center space-x-4\">\n            <a href=\"#\" className=\"text-gray-700 hover:text-santander-red transition-colors duration-200 text-sm\">\n              Find a Branch/ATM\n            </a>\n            \n            {showLogin && !isAuthenticated && (\n              <Button \n                onClick={handleLogin}\n                className=\"bg-santander-red text-white hover:bg-santander-dark\"\n                data-testid=\"button-login\"\n              >\n                Login\n              </Button>\n            )}\n            \n            {isAuthenticated && user && (\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-gray-700 text-sm\">\n                  Hello, {user.firstName || 'User'}\n                </span>\n                <Button \n                  onClick={handleLogout}\n                  variant=\"outline\"\n                  className=\"border-santander-red text-santander-red hover:bg-santander-red hover:text-white\"\n                  data-testid=\"button-logout\"\n                >\n                  Logout\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3141},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/services-section.tsx":{"content":"export default function ServicesSection() {\n  return (\n    <section className=\"py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Helping people bank smarter</h2>\n        </div>\n        \n        <div className=\"grid md:grid-cols-3 gap-8\">\n          <div className=\"text-center p-6 bg-white rounded-lg shadow-sm border\">\n            <div className=\"w-16 h-16 bg-santander-red rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-piggy-bank text-white text-2xl\"></i>\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Savings & CDs</h3>\n            <p className=\"text-gray-600 mb-4\">that make it convenient to earn more as you save.</p>\n            <a href=\"#\" className=\"text-santander-red hover:underline\">Learn more →</a>\n          </div>\n          \n          <div className=\"text-center p-6 bg-white rounded-lg shadow-sm border\">\n            <div className=\"w-16 h-16 bg-santander-red rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-check text-white text-2xl\"></i>\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Checking</h3>\n            <p className=\"text-gray-600 mb-4\">options for even easier everyday banking.</p>\n            <a href=\"#\" className=\"text-santander-red hover:underline\">Learn more →</a>\n          </div>\n          \n          <div className=\"text-center p-6 bg-white rounded-lg shadow-sm border\">\n            <div className=\"w-16 h-16 bg-santander-red rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-credit-card text-white text-2xl\"></i>\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Credit cards</h3>\n            <p className=\"text-gray-600 mb-4\">with a range of benefits and rewards.</p>\n            <a href=\"#\" className=\"text-santander-red hover:underline\">Learn more →</a>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2158},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}